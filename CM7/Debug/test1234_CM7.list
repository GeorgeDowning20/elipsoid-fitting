
test1234_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce60  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a80  0800d100  0800d100  0001d100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb80  0800fb80  000202a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb80  0800fb80  0001fb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb88  0800fb88  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb88  0800fb88  0001fb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb8c  0800fb8c  0001fb8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  0800fb90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  240001e4  0800fd74  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000244  0800fdd4  00020244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000005fc  240002a4  0800fe34  000202a4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240008a0  0800fe34  000208a0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000306f0  00000000  00000000  000202d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004e82  00000000  00000000  000509c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017b8  00000000  00000000  00055848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001620  00000000  00000000  00057000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003dca3  00000000  00000000  00058620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e8f8  00000000  00000000  000962c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018c9fb  00000000  00000000  000b4bbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  002415b6  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007c1c  00000000  00000000  0024160c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002a4 	.word	0x240002a4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d0e8 	.word	0x0800d0e8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a8 	.word	0x240002a8
 80002dc:	0800d0e8 	.word	0x0800d0e8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96e 	b.w	80009fc <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468c      	mov	ip, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8083 	bne.w	800084e <__udivmoddi4+0x116>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d947      	bls.n	80007de <__udivmoddi4+0xa6>
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	b142      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000754:	f1c2 0020 	rsb	r0, r2, #32
 8000758:	fa24 f000 	lsr.w	r0, r4, r0
 800075c:	4091      	lsls	r1, r2
 800075e:	4097      	lsls	r7, r2
 8000760:	ea40 0c01 	orr.w	ip, r0, r1
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbbc f6f8 	udiv	r6, ip, r8
 8000770:	fa1f fe87 	uxth.w	lr, r7
 8000774:	fb08 c116 	mls	r1, r8, r6, ip
 8000778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077c:	fb06 f10e 	mul.w	r1, r6, lr
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295
 800078a:	f080 8119 	bcs.w	80009c0 <__udivmoddi4+0x288>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8116 	bls.w	80009c0 <__udivmoddi4+0x288>
 8000794:	3e02      	subs	r6, #2
 8000796:	443b      	add	r3, r7
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	193c      	adds	r4, r7, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8105 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	f240 8102 	bls.w	80009c4 <__udivmoddi4+0x28c>
 80007c0:	3802      	subs	r0, #2
 80007c2:	443c      	add	r4, r7
 80007c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	b902      	cbnz	r2, 80007e2 <__udivmoddi4+0xaa>
 80007e0:	deff      	udf	#255	; 0xff
 80007e2:	fab2 f282 	clz	r2, r2
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d150      	bne.n	800088c <__udivmoddi4+0x154>
 80007ea:	1bcb      	subs	r3, r1, r7
 80007ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	2601      	movs	r6, #1
 80007f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007fa:	0c21      	lsrs	r1, r4, #16
 80007fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb08 f30c 	mul.w	r3, r8, ip
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0xe4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0xe2>
 8000814:	428b      	cmp	r3, r1
 8000816:	f200 80e9 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 800081a:	4684      	mov	ip, r0
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1110 	mls	r1, lr, r0, r1
 8000828:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x10c>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x10a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80d9 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e7bf      	b.n	80007ce <__udivmoddi4+0x96>
 800084e:	428b      	cmp	r3, r1
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x12e>
 8000852:	2d00      	cmp	r5, #0
 8000854:	f000 80b1 	beq.w	80009ba <__udivmoddi4+0x282>
 8000858:	2600      	movs	r6, #0
 800085a:	e9c5 0100 	strd	r0, r1, [r5]
 800085e:	4630      	mov	r0, r6
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	fab3 f683 	clz	r6, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d14a      	bne.n	8000904 <__udivmoddi4+0x1cc>
 800086e:	428b      	cmp	r3, r1
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0x140>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 80b8 	bhi.w	80009e8 <__udivmoddi4+0x2b0>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb61 0103 	sbc.w	r1, r1, r3
 800087e:	2001      	movs	r0, #1
 8000880:	468c      	mov	ip, r1
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0a8      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000886:	e9c5 4c00 	strd	r4, ip, [r5]
 800088a:	e7a5      	b.n	80007d8 <__udivmoddi4+0xa0>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f603 	lsr.w	r6, r0, r3
 8000894:	4097      	lsls	r7, r2
 8000896:	fa01 f002 	lsl.w	r0, r1, r2
 800089a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089e:	40d9      	lsrs	r1, r3
 80008a0:	4330      	orrs	r0, r6
 80008a2:	0c03      	lsrs	r3, r0, #16
 80008a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008a8:	fa1f f887 	uxth.w	r8, r7
 80008ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b4:	fb06 f108 	mul.w	r1, r6, r8
 80008b8:	4299      	cmp	r1, r3
 80008ba:	fa04 f402 	lsl.w	r4, r4, r2
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x19c>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008c6:	f080 808d 	bcs.w	80009e4 <__udivmoddi4+0x2ac>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 808a 	bls.w	80009e4 <__udivmoddi4+0x2ac>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b281      	uxth	r1, r0
 80008d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e4:	fb00 f308 	mul.w	r3, r0, r8
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x1c4>
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f2:	d273      	bcs.n	80009dc <__udivmoddi4+0x2a4>
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d971      	bls.n	80009dc <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4439      	add	r1, r7
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000902:	e778      	b.n	80007f6 <__udivmoddi4+0xbe>
 8000904:	f1c6 0c20 	rsb	ip, r6, #32
 8000908:	fa03 f406 	lsl.w	r4, r3, r6
 800090c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000910:	431c      	orrs	r4, r3
 8000912:	fa20 f70c 	lsr.w	r7, r0, ip
 8000916:	fa01 f306 	lsl.w	r3, r1, r6
 800091a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800091e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000922:	431f      	orrs	r7, r3
 8000924:	0c3b      	lsrs	r3, r7, #16
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fa1f f884 	uxth.w	r8, r4
 800092e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000932:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000936:	fb09 fa08 	mul.w	sl, r9, r8
 800093a:	458a      	cmp	sl, r1
 800093c:	fa02 f206 	lsl.w	r2, r2, r6
 8000940:	fa00 f306 	lsl.w	r3, r0, r6
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x220>
 8000946:	1861      	adds	r1, r4, r1
 8000948:	f109 30ff 	add.w	r0, r9, #4294967295
 800094c:	d248      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 800094e:	458a      	cmp	sl, r1
 8000950:	d946      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 8000952:	f1a9 0902 	sub.w	r9, r9, #2
 8000956:	4421      	add	r1, r4
 8000958:	eba1 010a 	sub.w	r1, r1, sl
 800095c:	b2bf      	uxth	r7, r7
 800095e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000962:	fb0e 1110 	mls	r1, lr, r0, r1
 8000966:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800096a:	fb00 f808 	mul.w	r8, r0, r8
 800096e:	45b8      	cmp	r8, r7
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x24a>
 8000972:	19e7      	adds	r7, r4, r7
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d22e      	bcs.n	80009d8 <__udivmoddi4+0x2a0>
 800097a:	45b8      	cmp	r8, r7
 800097c:	d92c      	bls.n	80009d8 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	4427      	add	r7, r4
 8000982:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000986:	eba7 0708 	sub.w	r7, r7, r8
 800098a:	fba0 8902 	umull	r8, r9, r0, r2
 800098e:	454f      	cmp	r7, r9
 8000990:	46c6      	mov	lr, r8
 8000992:	4649      	mov	r1, r9
 8000994:	d31a      	bcc.n	80009cc <__udivmoddi4+0x294>
 8000996:	d017      	beq.n	80009c8 <__udivmoddi4+0x290>
 8000998:	b15d      	cbz	r5, 80009b2 <__udivmoddi4+0x27a>
 800099a:	ebb3 020e 	subs.w	r2, r3, lr
 800099e:	eb67 0701 	sbc.w	r7, r7, r1
 80009a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009a6:	40f2      	lsrs	r2, r6
 80009a8:	ea4c 0202 	orr.w	r2, ip, r2
 80009ac:	40f7      	lsrs	r7, r6
 80009ae:	e9c5 2700 	strd	r2, r7, [r5]
 80009b2:	2600      	movs	r6, #0
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e70b      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fd      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009c8:	4543      	cmp	r3, r8
 80009ca:	d2e5      	bcs.n	8000998 <__udivmoddi4+0x260>
 80009cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d0:	eb69 0104 	sbc.w	r1, r9, r4
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7df      	b.n	8000998 <__udivmoddi4+0x260>
 80009d8:	4608      	mov	r0, r1
 80009da:	e7d2      	b.n	8000982 <__udivmoddi4+0x24a>
 80009dc:	4660      	mov	r0, ip
 80009de:	e78d      	b.n	80008fc <__udivmoddi4+0x1c4>
 80009e0:	4681      	mov	r9, r0
 80009e2:	e7b9      	b.n	8000958 <__udivmoddi4+0x220>
 80009e4:	4666      	mov	r6, ip
 80009e6:	e775      	b.n	80008d4 <__udivmoddi4+0x19c>
 80009e8:	4630      	mov	r0, r6
 80009ea:	e74a      	b.n	8000882 <__udivmoddi4+0x14a>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	4439      	add	r1, r7
 80009f2:	e713      	b.n	800081c <__udivmoddi4+0xe4>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	e724      	b.n	8000844 <__udivmoddi4+0x10c>
 80009fa:	bf00      	nop

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a04:	4b3f      	ldr	r3, [pc, #252]	; (8000b04 <SystemInit+0x104>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0a:	4a3e      	ldr	r2, [pc, #248]	; (8000b04 <SystemInit+0x104>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a14:	4b3b      	ldr	r3, [pc, #236]	; (8000b04 <SystemInit+0x104>)
 8000a16:	691b      	ldr	r3, [r3, #16]
 8000a18:	4a3a      	ldr	r2, [pc, #232]	; (8000b04 <SystemInit+0x104>)
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a20:	4b39      	ldr	r3, [pc, #228]	; (8000b08 <SystemInit+0x108>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f003 030f 	and.w	r3, r3, #15
 8000a28:	2b06      	cmp	r3, #6
 8000a2a:	d807      	bhi.n	8000a3c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a2c:	4b36      	ldr	r3, [pc, #216]	; (8000b08 <SystemInit+0x108>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f023 030f 	bic.w	r3, r3, #15
 8000a34:	4a34      	ldr	r2, [pc, #208]	; (8000b08 <SystemInit+0x108>)
 8000a36:	f043 0307 	orr.w	r3, r3, #7
 8000a3a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a3c:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <SystemInit+0x10c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a32      	ldr	r2, [pc, #200]	; (8000b0c <SystemInit+0x10c>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a48:	4b30      	ldr	r3, [pc, #192]	; (8000b0c <SystemInit+0x10c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <SystemInit+0x10c>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	492e      	ldr	r1, [pc, #184]	; (8000b0c <SystemInit+0x10c>)
 8000a54:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <SystemInit+0x110>)
 8000a56:	4013      	ands	r3, r2
 8000a58:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <SystemInit+0x108>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d007      	beq.n	8000a76 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <SystemInit+0x108>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f023 030f 	bic.w	r3, r3, #15
 8000a6e:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <SystemInit+0x108>)
 8000a70:	f043 0307 	orr.w	r3, r3, #7
 8000a74:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a76:	4b25      	ldr	r3, [pc, #148]	; (8000b0c <SystemInit+0x10c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a7c:	4b23      	ldr	r3, [pc, #140]	; (8000b0c <SystemInit+0x10c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <SystemInit+0x10c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <SystemInit+0x10c>)
 8000a8a:	4a22      	ldr	r2, [pc, #136]	; (8000b14 <SystemInit+0x114>)
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a8e:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <SystemInit+0x10c>)
 8000a90:	4a21      	ldr	r2, [pc, #132]	; (8000b18 <SystemInit+0x118>)
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a94:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <SystemInit+0x10c>)
 8000a96:	4a21      	ldr	r2, [pc, #132]	; (8000b1c <SystemInit+0x11c>)
 8000a98:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <SystemInit+0x10c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <SystemInit+0x10c>)
 8000aa2:	4a1e      	ldr	r2, [pc, #120]	; (8000b1c <SystemInit+0x11c>)
 8000aa4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <SystemInit+0x10c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <SystemInit+0x10c>)
 8000aae:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <SystemInit+0x11c>)
 8000ab0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <SystemInit+0x10c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <SystemInit+0x10c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a13      	ldr	r2, [pc, #76]	; (8000b0c <SystemInit+0x10c>)
 8000abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <SystemInit+0x10c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <SystemInit+0x120>)
 8000acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ace:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <SystemInit+0x120>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <SystemInit+0x124>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <SystemInit+0x128>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ae2:	d202      	bcs.n	8000aea <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <SystemInit+0x12c>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <SystemInit+0x130>)
 8000aec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000af0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SystemInit+0x104>)
 8000af4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000af8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00
 8000b08:	52002000 	.word	0x52002000
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b14:	02020200 	.word	0x02020200
 8000b18:	01ff0000 	.word	0x01ff0000
 8000b1c:	01010280 	.word	0x01010280
 8000b20:	580000c0 	.word	0x580000c0
 8000b24:	5c001000 	.word	0x5c001000
 8000b28:	ffff0000 	.word	0xffff0000
 8000b2c:	51008108 	.word	0x51008108
 8000b30:	52004000 	.word	0x52004000

08000b34 <createNewMatrix>:




float **createNewMatrix(int mode, int r, int c)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
    int i, j;
    float **mat = (float **)malloc(r * sizeof(float *));
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	4618      	mov	r0, r3
 8000b46:	f007 fecf 	bl	80088e8 <malloc>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	617b      	str	r3, [r7, #20]

        for (i = 0; i < r; i++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
 8000b52:	e06d      	b.n	8000c30 <createNewMatrix+0xfc>
        {
            mat[i] = (float *)malloc(c * sizeof(float));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	0099      	lsls	r1, r3, #2
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	18d4      	adds	r4, r2, r3
 8000b60:	4608      	mov	r0, r1
 8000b62:	f007 fec1 	bl	80088e8 <malloc>
 8000b66:	4603      	mov	r3, r0
 8000b68:	6023      	str	r3, [r4, #0]

            for (j = 0; j < c; j++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
 8000b6e:	e058      	b.n	8000c22 <createNewMatrix+0xee>
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d852      	bhi.n	8000c1c <createNewMatrix+0xe8>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <createNewMatrix+0x48>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000ba5 	.word	0x08000ba5
 8000b84:	08000bbd 	.word	0x08000bbd
 8000b88:	08000bf7 	.word	0x08000bf7
            {
            	switch (mode){

            	case 0:
            	mat[i][j] = 0;
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	697a      	ldr	r2, [r7, #20]
 8000b92:	4413      	add	r3, r2
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	f04f 0200 	mov.w	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
            	break;
 8000ba2:	e03b      	b.n	8000c1c <createNewMatrix+0xe8>

            	case 1:
            	mat[i][j] = 1;
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	697a      	ldr	r2, [r7, #20]
 8000baa:	4413      	add	r3, r2
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	4413      	add	r3, r2
 8000bb4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000bb8:	601a      	str	r2, [r3, #0]
            	break;
 8000bba:	e02f      	b.n	8000c1c <createNewMatrix+0xe8>

            	case 2:
            	mat[i][j] = rand() % 10;
 8000bbc:	f008 fc20 	bl	8009400 <rand>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	4b20      	ldr	r3, [pc, #128]	; (8000c44 <createNewMatrix+0x110>)
 8000bc4:	fb83 1302 	smull	r1, r3, r3, r2
 8000bc8:	1099      	asrs	r1, r3, #2
 8000bca:	17d3      	asrs	r3, r2, #31
 8000bcc:	1ac9      	subs	r1, r1, r3
 8000bce:	460b      	mov	r3, r1
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	1ad1      	subs	r1, r2, r3
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	4413      	add	r3, r2
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	ee07 1a90 	vmov	s15, r1
 8000bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bf0:	edc3 7a00 	vstr	s15, [r3]
            	break;
 8000bf4:	e012      	b.n	8000c1c <createNewMatrix+0xe8>

            	case 3:
            	mat[i][j] = i == j ? 1 : 0;
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d102      	bne.n	8000c04 <createNewMatrix+0xd0>
 8000bfe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000c02:	e001      	b.n	8000c08 <createNewMatrix+0xd4>
 8000c04:	f04f 0200 	mov.w	r2, #0
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	6979      	ldr	r1, [r7, #20]
 8000c0e:	440b      	add	r3, r1
 8000c10:	6819      	ldr	r1, [r3, #0]
 8000c12:	69bb      	ldr	r3, [r7, #24]
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	440b      	add	r3, r1
 8000c18:	601a      	str	r2, [r3, #0]
            	break;
 8000c1a:	bf00      	nop
            for (j = 0; j < c; j++)
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	dba2      	blt.n	8000b70 <createNewMatrix+0x3c>
        for (i = 0; i < r; i++)
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
 8000c30:	69fa      	ldr	r2, [r7, #28]
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	db8d      	blt.n	8000b54 <createNewMatrix+0x20>
            	}
            }
        }

    return mat;
 8000c38:	697b      	ldr	r3, [r7, #20]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd90      	pop	{r4, r7, pc}
 8000c42:	bf00      	nop
 8000c44:	66666667 	.word	0x66666667

08000c48 <normaliseMatrix>:

float **normaliseMatrix (float **Matrix, int r, int c)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
	float **MATRIX = createNewMatrix(0, r, c);
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	68b9      	ldr	r1, [r7, #8]
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff ff6b 	bl	8000b34 <createNewMatrix>
 8000c5e:	6178      	str	r0, [r7, #20]
	float K = -Matrix[r-1][c-1];
 8000c60:	68ba      	ldr	r2, [r7, #8]
 8000c62:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8000c76:	440b      	add	r3, r1
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	edd3 7a00 	vldr	s15, [r3]
 8000c80:	eef1 7a67 	vneg.f32	s15, s15
 8000c84:	edc7 7a04 	vstr	s15, [r7, #16]

    int i, j;
    for (i = 0; i < r; i++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
 8000c8c:	e024      	b.n	8000cd8 <normaliseMatrix+0x90>
    {
        for (j = 0; j < c; j++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
 8000c92:	e01a      	b.n	8000cca <normaliseMatrix+0x82>
        {
        	MATRIX[i][j] = Matrix[i][j]/K;
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	edd3 6a00 	vldr	s13, [r3]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	4413      	add	r3, r2
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000cc0:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0; j < c; j++)
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	dbe0      	blt.n	8000c94 <normaliseMatrix+0x4c>
    for (i = 0; i < r; i++)
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	61fb      	str	r3, [r7, #28]
 8000cd8:	69fa      	ldr	r2, [r7, #28]
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbd6      	blt.n	8000c8e <normaliseMatrix+0x46>
        }
    }
    return MATRIX;
 8000ce0:	697b      	ldr	r3, [r7, #20]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3720      	adds	r7, #32
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <ArraytoMatrix>:

float **ArraytoMatrix (float *array , int r , int c)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b088      	sub	sp, #32
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
	float ** matrix = createNewMatrix(0, r, c);
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff ff1a 	bl	8000b34 <createNewMatrix>
 8000d00:	6178      	str	r0, [r7, #20]
    int i, j;
    for (i = 0; i < r; i++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	e01f      	b.n	8000d48 <ArraytoMatrix+0x5e>
    {
        for (j = 0; j < c; j++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	e015      	b.n	8000d3a <ArraytoMatrix+0x50>
        {
        	matrix[i][j] = array[(i*c)+j];
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	fb02 f203 	mul.w	r2, r2, r3
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	4413      	add	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	441a      	add	r2, r3
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	6979      	ldr	r1, [r7, #20]
 8000d26:	440b      	add	r3, r1
 8000d28:	6819      	ldr	r1, [r3, #0]
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	440b      	add	r3, r1
 8000d30:	6812      	ldr	r2, [r2, #0]
 8000d32:	601a      	str	r2, [r3, #0]
        for (j = 0; j < c; j++)
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	3301      	adds	r3, #1
 8000d38:	61bb      	str	r3, [r7, #24]
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	dbe5      	blt.n	8000d0e <ArraytoMatrix+0x24>
    for (i = 0; i < r; i++)
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3301      	adds	r3, #1
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	69fa      	ldr	r2, [r7, #28]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbdb      	blt.n	8000d08 <ArraytoMatrix+0x1e>
        }
    }
    return matrix;
 8000d50:	697b      	ldr	r3, [r7, #20]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <MatrixtoArrayB>:
    }
    return ArrayPTR;
}
#
float *MatrixtoArrayB (float **Matrix , int r , int c, float *ArrayPTR)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b087      	sub	sp, #28
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
 8000d66:	603b      	str	r3, [r7, #0]
	//float Array[r][c];
    int i, j;
    for (i = 0; i < r; i++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e01f      	b.n	8000dae <MatrixtoArrayB+0x54>
    {
        for (j = 0; j < c; j++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	e015      	b.n	8000da0 <MatrixtoArrayB+0x46>
        {
        	ArrayPTR[(i*9)+j] = Matrix[i][j];
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	68fa      	ldr	r2, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	18d1      	adds	r1, r2, r3
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	4613      	mov	r3, r2
 8000d88:	00db      	lsls	r3, r3, #3
 8000d8a:	441a      	add	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4413      	add	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	4413      	add	r3, r2
 8000d96:	680a      	ldr	r2, [r1, #0]
 8000d98:	601a      	str	r2, [r3, #0]
        for (j = 0; j < c; j++)
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbe5      	blt.n	8000d74 <MatrixtoArrayB+0x1a>
    for (i = 0; i < r; i++)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	3301      	adds	r3, #1
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	dbdb      	blt.n	8000d6e <MatrixtoArrayB+0x14>
        }
    }
    return ArrayPTR;
 8000db6:	683b      	ldr	r3, [r7, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <printArray>:



void printArray (float *Array , int r , int c)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
	printf("\r\n");
 8000dd0:	4819      	ldr	r0, [pc, #100]	; (8000e38 <printArray+0x74>)
 8000dd2:	f008 fb0d 	bl	80093f0 <puts>
	    int i, j;
	    for (i = 0; i < r; i++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	e021      	b.n	8000e20 <printArray+0x5c>
	    {
	        for (j = 0; j < c; j++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	e014      	b.n	8000e0c <printArray+0x48>
	        {
	            printf("%f ", Array[(i*c)+j]);
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	fb02 f203 	mul.w	r2, r2, r3
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4413      	add	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	68fa      	ldr	r2, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	edd3 7a00 	vldr	s15, [r3]
 8000df8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dfc:	ec53 2b17 	vmov	r2, r3, d7
 8000e00:	480e      	ldr	r0, [pc, #56]	; (8000e3c <printArray+0x78>)
 8000e02:	f008 fa6f 	bl	80092e4 <iprintf>
	        for (j = 0; j < c; j++)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbe6      	blt.n	8000de2 <printArray+0x1e>
	        }
	        printf("\r\n");
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <printArray+0x74>)
 8000e16:	f008 faeb 	bl	80093f0 <puts>
	    for (i = 0; i < r; i++)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbd9      	blt.n	8000ddc <printArray+0x18>
	    }
	    printf("\r\n");
 8000e28:	4803      	ldr	r0, [pc, #12]	; (8000e38 <printArray+0x74>)
 8000e2a:	f008 fae1 	bl	80093f0 <puts>
}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	0800d100 	.word	0x0800d100
 8000e3c:	0800d104 	.word	0x0800d104

08000e40 <MultiplyMatrix>:


float **MultiplyMatrix(float **matrix1, int r1, int c1, float **matrix2, int r2, int c2)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
	if (r2 != c1)
 8000e4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d001      	beq.n	8000e5a <MultiplyMatrix+0x1a>
	return NULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e050      	b.n	8000efc <MultiplyMatrix+0xbc>

    int i, j, k;
    float **result = createNewMatrix(ZERO, r1, c2);
 8000e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff fe68 	bl	8000b34 <createNewMatrix>
 8000e64:	6138      	str	r0, [r7, #16]

    for (i = 0; i < r1; i++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
 8000e6a:	e042      	b.n	8000ef2 <MultiplyMatrix+0xb2>
    {
        for (j = 0; j < c2; j++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	e038      	b.n	8000ee4 <MultiplyMatrix+0xa4>
        {
            for (k = 0; k < r2; k++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e02e      	b.n	8000ed6 <MultiplyMatrix+0x96>
            {
                result[i][j] += matrix1[i][k] * matrix2[k][j];
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4413      	add	r3, r2
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	69bb      	ldr	r3, [r7, #24]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	ed93 7a00 	vldr	s14, [r3]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4413      	add	r3, r2
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	edd3 6a00 	vldr	s13, [r3]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ecc:	edc3 7a00 	vstr	s15, [r3]
            for (k = 0; k < r2; k++)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eda:	429a      	cmp	r2, r3
 8000edc:	dbcc      	blt.n	8000e78 <MultiplyMatrix+0x38>
        for (j = 0; j < c2; j++)
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	61bb      	str	r3, [r7, #24]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbc2      	blt.n	8000e72 <MultiplyMatrix+0x32>
    for (i = 0; i < r1; i++)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	dbb8      	blt.n	8000e6c <MultiplyMatrix+0x2c>
            }
        }
    }
    return result;
 8000efa:	693b      	ldr	r3, [r7, #16]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3720      	adds	r7, #32
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <TransposeMatrix>:

float **TransposeMatrix(float **matrix, int r, int c)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
    int i, j;
    float **result = createNewMatrix(ONES, c, r);
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	2001      	movs	r0, #1
 8000f16:	f7ff fe0d 	bl	8000b34 <createNewMatrix>
 8000f1a:	6178      	str	r0, [r7, #20]

    for (i = 0; i < r; i++)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61fb      	str	r3, [r7, #28]
 8000f20:	e01e      	b.n	8000f60 <TransposeMatrix+0x5c>
    {
        for (j = 0; j < c; j++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
 8000f26:	e014      	b.n	8000f52 <TransposeMatrix+0x4e>
        {
                result[j][i] = matrix[i][j];
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	69bb      	ldr	r3, [r7, #24]
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	441a      	add	r2, r3
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	6979      	ldr	r1, [r7, #20]
 8000f3e:	440b      	add	r3, r1
 8000f40:	6819      	ldr	r1, [r3, #0]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	6812      	ldr	r2, [r2, #0]
 8000f4a:	601a      	str	r2, [r3, #0]
        for (j = 0; j < c; j++)
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dbe6      	blt.n	8000f28 <TransposeMatrix+0x24>
    for (i = 0; i < r; i++)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dbdc      	blt.n	8000f22 <TransposeMatrix+0x1e>
        }
    }
    return result;
 8000f68:	697b      	ldr	r3, [r7, #20]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <NegitiveMatrix>:
{
	float **rusult = MultiplyMatrix(TransposeMatrix(matrix,r,c),c,r,matrix,r,c);
    return rusult;
}
float **NegitiveMatrix (float **Matrix,int r,int c)
{
 8000f72:	b480      	push	{r7}
 8000f74:	b087      	sub	sp, #28
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
	int i, j;
	for (i = 0; i < r; i++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e022      	b.n	8000fca <NegitiveMatrix+0x58>
	{
		for (j = 0; j < c; j++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e018      	b.n	8000fbc <NegitiveMatrix+0x4a>
		{
			Matrix[i][j] = -Matrix[i][j];
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	edd3 7a00 	vldr	s15, [r3]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	4413      	add	r3, r2
 8000fae:	eef1 7a67 	vneg.f32	s15, s15
 8000fb2:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < c; j++)
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	dbe2      	blt.n	8000f8a <NegitiveMatrix+0x18>
	for (i = 0; i < r; i++)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbd8      	blt.n	8000f84 <NegitiveMatrix+0x12>
		}
	}

	return Matrix;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <printMatrix>:
float a[];
float **inverseMatrix(float ** Matrix,int size);
float ** ArrayElipsoidMat (float **ArrayM, int samples);
float **EigenValues3x3 (float **Matrix);
void printMatrix(float **matrix, int r, int c)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
	printf("\r\n[");
 8000fec:	481b      	ldr	r0, [pc, #108]	; (800105c <printMatrix+0x7c>)
 8000fee:	f008 f979 	bl	80092e4 <iprintf>
    int i, j;
    for (i = 0; i < r; i++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	e025      	b.n	8001044 <printMatrix+0x64>
    {
        for (j = 0; j < c; j++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	e013      	b.n	8001026 <printMatrix+0x46>
        {
            printf("%f ", matrix[i][j]);
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4413      	add	r3, r2
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	4413      	add	r3, r2
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001016:	ec53 2b17 	vmov	r2, r3, d7
 800101a:	4811      	ldr	r0, [pc, #68]	; (8001060 <printMatrix+0x80>)
 800101c:	f008 f962 	bl	80092e4 <iprintf>
        for (j = 0; j < c; j++)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	3301      	adds	r3, #1
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	429a      	cmp	r2, r3
 800102c:	dbe7      	blt.n	8000ffe <printMatrix+0x1e>
        }
        if (!(i == (r-1)))
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	3b01      	subs	r3, #1
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	429a      	cmp	r2, r3
 8001036:	d002      	beq.n	800103e <printMatrix+0x5e>
        printf(";\r\n");
 8001038:	480a      	ldr	r0, [pc, #40]	; (8001064 <printMatrix+0x84>)
 800103a:	f008 f9d9 	bl	80093f0 <puts>
    for (i = 0; i < r; i++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbd5      	blt.n	8000ff8 <printMatrix+0x18>
    }
    printf("]\r\n");
 800104c:	4806      	ldr	r0, [pc, #24]	; (8001068 <printMatrix+0x88>)
 800104e:	f008 f9cf 	bl	80093f0 <puts>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	0800d108 	.word	0x0800d108
 8001060:	0800d10c 	.word	0x0800d10c
 8001064:	0800d110 	.word	0x0800d110
 8001068:	0800d114 	.word	0x0800d114

0800106c <get_cubic>:

float **get_cubic(float a,float b,float c,float d)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	ed2d 8b02 	vpush	{d8}
 8001072:	b09c      	sub	sp, #112	; 0x70
 8001074:	af06      	add	r7, sp, #24
 8001076:	ed87 0a03 	vstr	s0, [r7, #12]
 800107a:	edc7 0a02 	vstr	s1, [r7, #8]
 800107e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001082:	edc7 1a00 	vstr	s3, [r7]
float e,f,g,h,i,j,k,l,m,n,p,r,s,t,u,x1,x2,x3;
int w;
printf("\r\n%f\t%f\t%f\t%f\t\r\n",a,b,c,d);
 8001086:	edd7 7a03 	vldr	s15, [r7, #12]
 800108a:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 800108e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001092:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001096:	edd7 6a01 	vldr	s13, [r7, #4]
 800109a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800109e:	edd7 5a00 	vldr	s11, [r7]
 80010a2:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80010a6:	ed8d 5b04 	vstr	d5, [sp, #16]
 80010aa:	ed8d 6b02 	vstr	d6, [sp, #8]
 80010ae:	ed8d 7b00 	vstr	d7, [sp]
 80010b2:	ec53 2b14 	vmov	r2, r3, d4
 80010b6:	48f1      	ldr	r0, [pc, #964]	; (800147c <get_cubic+0x410>)
 80010b8:	f008 f914 	bl	80092e4 <iprintf>


e=2.7182818284590;
 80010bc:	4bf0      	ldr	r3, [pc, #960]	; (8001480 <get_cubic+0x414>)
 80010be:	657b      	str	r3, [r7, #84]	; 0x54
f=((3*c/a)-(b*b/(a*a)))/3;
 80010c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80010c8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80010d8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80010dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80010e4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80010e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010ec:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80010f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
g=((2*b*b*b/(a*a*a))-(9*b*c/(a*a))+(27*d/a))/27;
 80010f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80010fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001100:	edd7 7a02 	vldr	s15, [r7, #8]
 8001104:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001108:	edd7 7a02 	vldr	s15, [r7, #8]
 800110c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001110:	edd7 7a03 	vldr	s15, [r7, #12]
 8001114:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001118:	edd7 7a03 	vldr	s15, [r7, #12]
 800111c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001124:	edd7 7a02 	vldr	s15, [r7, #8]
 8001128:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800112c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001130:	edd7 7a01 	vldr	s15, [r7, #4]
 8001134:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001138:	edd7 7a03 	vldr	s15, [r7, #12]
 800113c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001140:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001144:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001148:	edd7 7a00 	vldr	s15, [r7]
 800114c:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 8001150:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8001154:	edd7 6a03 	vldr	s13, [r7, #12]
 8001158:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800115c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001160:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 8001164:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001168:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
h=(g*g/4)+(f*f*f/27);
 800116c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001170:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001174:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001178:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800117c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001180:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001184:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001188:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800118c:	eeb3 6a0b 	vmov.f32	s12, #59	; 0x41d80000  27.0
 8001190:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
i=sqrtf(((g*g/4)-h));
 800119c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80011a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011a4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80011a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011ac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80011b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b4:	eeb0 0a67 	vmov.f32	s0, s15
 80011b8:	f00a feba 	bl	800bf30 <sqrtf>
 80011bc:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
j=expf(log10(i)/log10(e)/3);
 80011c0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80011c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011c8:	eeb0 0b47 	vmov.f64	d0, d7
 80011cc:	f00a fe1c 	bl	800be08 <log10>
 80011d0:	eeb0 8b40 	vmov.f64	d8, d0
 80011d4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80011d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011dc:	eeb0 0b47 	vmov.f64	d0, d7
 80011e0:	f00a fe12 	bl	800be08 <log10>
 80011e4:	eeb0 7b40 	vmov.f64	d7, d0
 80011e8:	ee88 6b07 	vdiv.f64	d6, d8, d7
 80011ec:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80011f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011f8:	eeb0 0a67 	vmov.f32	s0, s15
 80011fc:	f00a fcc4 	bl	800bb88 <expf>
 8001200:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
k=acosf((-1)*(g/(2*i)));
 8001204:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001208:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800120c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8001210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001214:	eef1 7a67 	vneg.f32	s15, s15
 8001218:	eeb0 0a67 	vmov.f32	s0, s15
 800121c:	f00a fe56 	bl	800becc <acosf>
 8001220:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
l=j*(-1);
 8001224:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001228:	eef1 7a67 	vneg.f32	s15, s15
 800122c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
m=cosf(k/3);
 8001230:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001234:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001238:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800123c:	eeb0 0a47 	vmov.f32	s0, s14
 8001240:	f00a f896 	bl	800b370 <cosf>
 8001244:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
n=sqrtf(3)*sinf(k/3);
 8001248:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800124c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001250:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001254:	eeb0 0a47 	vmov.f32	s0, s14
 8001258:	f00a fd36 	bl	800bcc8 <sinf>
 800125c:	eef0 7a40 	vmov.f32	s15, s0
 8001260:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001484 <get_cubic+0x418>
 8001264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001268:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
p=(b/3*a)*(-1);
 800126c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001270:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001274:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001278:	edd7 7a03 	vldr	s15, [r7, #12]
 800127c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001280:	eef1 7a67 	vneg.f32	s15, s15
 8001284:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
r=(-1)*(g/2)+sqrtf(h);
 8001288:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 800128c:	f00a fe50 	bl	800bf30 <sqrtf>
 8001290:	eef0 6a40 	vmov.f32	s13, s0
 8001294:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001298:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800129c:	eec7 7a06 	vdiv.f32	s15, s14, s12
 80012a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012a4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
s=expf(log10(r)/log10(e)/3);
 80012a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80012ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012b0:	eeb0 0b47 	vmov.f64	d0, d7
 80012b4:	f00a fda8 	bl	800be08 <log10>
 80012b8:	eeb0 8b40 	vmov.f64	d8, d0
 80012bc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80012c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012c4:	eeb0 0b47 	vmov.f64	d0, d7
 80012c8:	f00a fd9e 	bl	800be08 <log10>
 80012cc:	eeb0 7b40 	vmov.f64	d7, d0
 80012d0:	ee88 6b07 	vdiv.f64	d6, d8, d7
 80012d4:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80012d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	f00a fc50 	bl	800bb88 <expf>
 80012e8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
t=(-1)*(g/2)-sqrt(h);
 80012ec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80012f0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f8:	eef1 7a67 	vneg.f32	s15, s15
 80012fc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001300:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001304:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001308:	eeb0 0b47 	vmov.f64	d0, d7
 800130c:	f00a fdb4 	bl	800be78 <sqrt>
 8001310:	eeb0 7b40 	vmov.f64	d7, d0
 8001314:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001318:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800131c:	edc7 7a08 	vstr	s15, [r7, #32]
u=expf(log10(t)/log10(e)/3);
 8001320:	edd7 7a08 	vldr	s15, [r7, #32]
 8001324:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001328:	eeb0 0b47 	vmov.f64	d0, d7
 800132c:	f00a fd6c 	bl	800be08 <log10>
 8001330:	eeb0 8b40 	vmov.f64	d8, d0
 8001334:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001338:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800133c:	eeb0 0b47 	vmov.f64	d0, d7
 8001340:	f00a fd62 	bl	800be08 <log10>
 8001344:	eeb0 7b40 	vmov.f64	d7, d0
 8001348:	ee88 6b07 	vdiv.f64	d6, d8, d7
 800134c:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001350:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001354:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	f00a fc14 	bl	800bb88 <expf>
 8001360:	ed87 0a07 	vstr	s0, [r7, #28]

if (h>0) w=1;
 8001364:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	dd01      	ble.n	8001376 <get_cubic+0x30a>
 8001372:	2301      	movs	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
if (h<=0) w=3;
 8001376:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800137a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	d801      	bhi.n	8001388 <get_cubic+0x31c>
 8001384:	2303      	movs	r3, #3
 8001386:	61bb      	str	r3, [r7, #24]
if ((f==0) && (g==0) && (h==0)) w=2;
 8001388:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800138c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001394:	d10f      	bne.n	80013b6 <get_cubic+0x34a>
 8001396:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800139a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	d108      	bne.n	80013b6 <get_cubic+0x34a>
 80013a4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80013a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b0:	d101      	bne.n	80013b6 <get_cubic+0x34a>
 80013b2:	2302      	movs	r3, #2
 80013b4:	61bb      	str	r3, [r7, #24]

float **eigenValues = createNewMatrix(0, 3, 1);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2103      	movs	r1, #3
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7ff fbba 	bl	8000b34 <createNewMatrix>
 80013c0:	4603      	mov	r3, r0
 80013c2:	617b      	str	r3, [r7, #20]

eigenValues[0][0]=2*j*cos(k/3)-(b/3*a);
 80013c4:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80013c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013cc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80013d0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80013d4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80013d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013e0:	eeb0 0b47 	vmov.f64	d0, d7
 80013e4:	f00a fb88 	bl	800baf8 <cos>
 80013e8:	eeb0 7b40 	vmov.f64	d7, d0
 80013ec:	ee28 6b07 	vmul.f64	d6, d8, d7
 80013f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f4:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80013f8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80013fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001404:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001408:	ee36 7b47 	vsub.f64	d7, d6, d7
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001414:	edc3 7a00 	vstr	s15, [r3]
eigenValues[1][0]=l*(m+n)+p;
 8001418:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800141c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001420:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001424:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3304      	adds	r3, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001436:	ee77 7a27 	vadd.f32	s15, s14, s15
 800143a:	edc3 7a00 	vstr	s15, [r3]
eigenValues[2][0]=l*(m-n)+p;
 800143e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001442:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001446:	ee37 7a67 	vsub.f32	s14, s14, s15
 800144a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800144e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3308      	adds	r3, #8
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800145c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001460:	edc3 7a00 	vstr	s15, [r3]

printMatrix(eigenValues, 3, 1);
 8001464:	2201      	movs	r2, #1
 8001466:	2103      	movs	r1, #3
 8001468:	6978      	ldr	r0, [r7, #20]
 800146a:	f7ff fdb9 	bl	8000fe0 <printMatrix>
return eigenValues;
 800146e:	697b      	ldr	r3, [r7, #20]


}
 8001470:	4618      	mov	r0, r3
 8001472:	3758      	adds	r7, #88	; 0x58
 8001474:	46bd      	mov	sp, r7
 8001476:	ecbd 8b02 	vpop	{d8}
 800147a:	bd80      	pop	{r7, pc}
 800147c:	0800d118 	.word	0x0800d118
 8001480:	402df854 	.word	0x402df854
 8001484:	3fddb3d7 	.word	0x3fddb3d7

08001488 <ArrayElipsoidMat>:

	   return ElipseM;
}

float ** ArrayElipsoidMat (float **ArrayM, int samples)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]

	//x2 y2 z2 2xy 2xz 2yz 2x 2y 2z

	float **ElipseoidM = createNewMatrix(0, samples, 9);
 8001492:	2209      	movs	r2, #9
 8001494:	6839      	ldr	r1, [r7, #0]
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff fb4c 	bl	8000b34 <createNewMatrix>
 800149c:	4603      	mov	r3, r0
 800149e:	60bb      	str	r3, [r7, #8]

		for (uint16_t c = 0 ; c < samples; c++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	81fb      	strh	r3, [r7, #14]
 80014a4:	e0d4      	b.n	8001650 <ArrayElipsoidMat+0x1c8>
					{
							ElipseoidM[c][0]= ArrayM[0][c]*ArrayM[0][c];
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	89fb      	ldrh	r3, [r7, #14]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	ed93 7a00 	vldr	s14, [r3]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	89fb      	ldrh	r3, [r7, #14]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	4413      	add	r3, r2
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d0:	edc3 7a00 	vstr	s15, [r3]
							ElipseoidM[c][1]= ArrayM[1][c]*ArrayM[1][c];
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3304      	adds	r3, #4
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	ed93 7a00 	vldr	s14, [r3]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3304      	adds	r3, #4
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	89fb      	ldrh	r3, [r7, #14]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	68ba      	ldr	r2, [r7, #8]
 80014fa:	4413      	add	r3, r2
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3304      	adds	r3, #4
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001504:	edc3 7a00 	vstr	s15, [r3]
							ElipseoidM[c][2]= ArrayM[2][c]*ArrayM[2][c];
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3308      	adds	r3, #8
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	ed93 7a00 	vldr	s14, [r3]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3308      	adds	r3, #8
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	89fb      	ldrh	r3, [r7, #14]
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	89fb      	ldrh	r3, [r7, #14]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	4413      	add	r3, r2
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3308      	adds	r3, #8
 8001534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001538:	edc3 7a00 	vstr	s15, [r3]

							ElipseoidM[c][3]= 2*ArrayM[0][c]*ArrayM[1][c];
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	89fb      	ldrh	r3, [r7, #14]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3304      	adds	r3, #4
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	89fb      	ldrh	r3, [r7, #14]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	4413      	add	r3, r2
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	330c      	adds	r3, #12
 800156a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156e:	edc3 7a00 	vstr	s15, [r3]
							ElipseoidM[c][4]= 2*ArrayM[0][c]*ArrayM[2][c];
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3308      	adds	r3, #8
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	89fb      	ldrh	r3, [r7, #14]
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	89fb      	ldrh	r3, [r7, #14]
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	4413      	add	r3, r2
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3310      	adds	r3, #16
 80015a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a4:	edc3 7a00 	vstr	s15, [r3]
							ElipseoidM[c][5]= 2*ArrayM[1][c]*ArrayM[2][c];
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3304      	adds	r3, #4
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	89fb      	ldrh	r3, [r7, #14]
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3308      	adds	r3, #8
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	89fb      	ldrh	r3, [r7, #14]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	89fb      	ldrh	r3, [r7, #14]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	4413      	add	r3, r2
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	3314      	adds	r3, #20
 80015d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015dc:	edc3 7a00 	vstr	s15, [r3]

							ElipseoidM[c][6]= 2*ArrayM[0][c];
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	89fb      	ldrh	r3, [r7, #14]
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	4413      	add	r3, r2
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3318      	adds	r3, #24
 80015fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015fe:	edc3 7a00 	vstr	s15, [r3]
							ElipseoidM[c][7]= 2*ArrayM[1][c];
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3304      	adds	r3, #4
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	89fb      	ldrh	r3, [r7, #14]
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	4413      	add	r3, r2
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	331c      	adds	r3, #28
 800161e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001622:	edc3 7a00 	vstr	s15, [r3]
							ElipseoidM[c][8]= 2*ArrayM[2][c];
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3308      	adds	r3, #8
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	89fb      	ldrh	r3, [r7, #14]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	89fb      	ldrh	r3, [r7, #14]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	4413      	add	r3, r2
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3320      	adds	r3, #32
 8001642:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001646:	edc3 7a00 	vstr	s15, [r3]
		for (uint16_t c = 0 ; c < samples; c++)
 800164a:	89fb      	ldrh	r3, [r7, #14]
 800164c:	3301      	adds	r3, #1
 800164e:	81fb      	strh	r3, [r7, #14]
 8001650:	89fb      	ldrh	r3, [r7, #14]
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	f73f af26 	bgt.w	80014a6 <ArrayElipsoidMat+0x1e>
			        }
		printMatrix(ElipseoidM, samples, 9);
 800165a:	2209      	movs	r2, #9
 800165c:	6839      	ldr	r1, [r7, #0]
 800165e:	68b8      	ldr	r0, [r7, #8]
 8001660:	f7ff fcbe 	bl	8000fe0 <printMatrix>
			   return ElipseoidM;
 8001664:	68bb      	ldr	r3, [r7, #8]
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <generateElispoidData>:



float ** generateElispoidData(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b09c      	sub	sp, #112	; 0x70
 8001674:	af02      	add	r7, sp, #8
#define Samples 30
float** data = createNewMatrix(0, 3, Samples);
 8001676:	221e      	movs	r2, #30
 8001678:	2103      	movs	r1, #3
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff fa5a 	bl	8000b34 <createNewMatrix>
 8001680:	4603      	mov	r3, r0
 8001682:	663b      	str	r3, [r7, #96]	; 0x60
//XY
float XStretch = 0.9,YStretch = 1.1,ZStretch = 1.2;
 8001684:	4b5e      	ldr	r3, [pc, #376]	; (8001800 <generateElispoidData+0x190>)
 8001686:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001688:	4b5e      	ldr	r3, [pc, #376]	; (8001804 <generateElispoidData+0x194>)
 800168a:	65bb      	str	r3, [r7, #88]	; 0x58
 800168c:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <generateElispoidData+0x198>)
 800168e:	657b      	str	r3, [r7, #84]	; 0x54

float Xoff= 0.07,Yoff = 0.08,Zoff = -0.02;
 8001690:	4b5e      	ldr	r3, [pc, #376]	; (800180c <generateElispoidData+0x19c>)
 8001692:	653b      	str	r3, [r7, #80]	; 0x50
 8001694:	4b5e      	ldr	r3, [pc, #376]	; (8001810 <generateElispoidData+0x1a0>)
 8001696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001698:	4b5e      	ldr	r3, [pc, #376]	; (8001814 <generateElispoidData+0x1a4>)
 800169a:	64bb      	str	r3, [r7, #72]	; 0x48
int a;
for ( a = 0 ; a < (Samples/3); a++)//Z = 0
 800169c:	2300      	movs	r3, #0
 800169e:	667b      	str	r3, [r7, #100]	; 0x64
 80016a0:	e04c      	b.n	800173c <generateElispoidData+0xcc>
     {
    	data[0][a] = (XStretch*(sinf(((2*M_PI)/(Samples/3))*(a)))) + Xoff;//x
 80016a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016ac:	ed9f 6b52 	vldr	d6, [pc, #328]	; 80017f8 <generateElispoidData+0x188>
 80016b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	f00a fb04 	bl	800bcc8 <sinf>
 80016c0:	eeb0 7a40 	vmov.f32	s14, s0
 80016c4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80016c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80016da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016de:	edc3 7a00 	vstr	s15, [r3]
    	data[1][a] = (YStretch*(cosf(((2*M_PI)/(Samples/3))*(a+1)))) + Yoff ;//y
 80016e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016e4:	3301      	adds	r3, #1
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80016ee:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80017f8 <generateElispoidData+0x188>
 80016f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016fa:	eeb0 0a67 	vmov.f32	s0, s15
 80016fe:	f009 fe37 	bl	800b370 <cosf>
 8001702:	eeb0 7a40 	vmov.f32	s14, s0
 8001706:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800170a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800170e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001710:	3304      	adds	r3, #4
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800171e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001722:	edc3 7a00 	vstr	s15, [r3]
    	data[2][a] = Zoff;//z
 8001726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001728:	3308      	adds	r3, #8
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001734:	601a      	str	r2, [r3, #0]
for ( a = 0 ; a < (Samples/3); a++)//Z = 0
 8001736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001738:	3301      	adds	r3, #1
 800173a:	667b      	str	r3, [r7, #100]	; 0x64
 800173c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800173e:	2b09      	cmp	r3, #9
 8001740:	ddaf      	ble.n	80016a2 <generateElispoidData+0x32>
     }
for ( a = 0 ; a < (Samples/3); a++)//Z = 0
 8001742:	2300      	movs	r3, #0
 8001744:	667b      	str	r3, [r7, #100]	; 0x64
 8001746:	e04e      	b.n	80017e6 <generateElispoidData+0x176>
     {
    	data[0][a+(Samples/3)] = (XStretch*(sinf(((2*M_PI)/(Samples/3))*(a)))) + Xoff ;//x
 8001748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001752:	ed9f 6b29 	vldr	d6, [pc, #164]	; 80017f8 <generateElispoidData+0x188>
 8001756:	ee27 7b06 	vmul.f64	d7, d7, d6
 800175a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	f00a fab1 	bl	800bcc8 <sinf>
 8001766:	eeb0 7a40 	vmov.f32	s14, s0
 800176a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800176e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001778:	330a      	adds	r3, #10
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001786:	edc3 7a00 	vstr	s15, [r3]
    	data[1][a+(Samples/3)] = Yoff;
 800178a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800178c:	3304      	adds	r3, #4
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001792:	330a      	adds	r3, #10
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800179a:	601a      	str	r2, [r3, #0]
    	data[2][a+(Samples/3)] = (ZStretch*(cosf(((2*M_PI)/(Samples/3))*(a)))) + Zoff ;//z
 800179c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80017a6:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80017f8 <generateElispoidData+0x188>
 80017aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017b2:	eeb0 0a67 	vmov.f32	s0, s15
 80017b6:	f009 fddb 	bl	800b370 <cosf>
 80017ba:	eeb0 7a40 	vmov.f32	s14, s0
 80017be:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80017c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017c8:	3308      	adds	r3, #8
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017ce:	330a      	adds	r3, #10
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80017d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017dc:	edc3 7a00 	vstr	s15, [r3]
for ( a = 0 ; a < (Samples/3); a++)//Z = 0
 80017e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017e2:	3301      	adds	r3, #1
 80017e4:	667b      	str	r3, [r7, #100]	; 0x64
 80017e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	ddad      	ble.n	8001748 <generateElispoidData+0xd8>
     }
for ( a = 0 ; a < (Samples/3); a++)//Z = 0
 80017ec:	2300      	movs	r3, #0
 80017ee:	667b      	str	r3, [r7, #100]	; 0x64
 80017f0:	e062      	b.n	80018b8 <generateElispoidData+0x248>
 80017f2:	bf00      	nop
 80017f4:	f3af 8000 	nop.w
 80017f8:	769cf0e0 	.word	0x769cf0e0
 80017fc:	3fe41b2f 	.word	0x3fe41b2f
 8001800:	3f666666 	.word	0x3f666666
 8001804:	3f8ccccd 	.word	0x3f8ccccd
 8001808:	3f99999a 	.word	0x3f99999a
 800180c:	3d8f5c29 	.word	0x3d8f5c29
 8001810:	3da3d70a 	.word	0x3da3d70a
 8001814:	bca3d70a 	.word	0xbca3d70a
     {
    	data[0][a+(2*Samples/3)] = Xoff;//x
 8001818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800181e:	3314      	adds	r3, #20
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001826:	601a      	str	r2, [r3, #0]
    	data[1][a+(2*Samples/3)] = (YStretch*(sinf(((2*M_PI)/(Samples/3))*(a+1)))) + Yoff ;//y
 8001828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800182a:	3301      	adds	r3, #1
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001834:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8001af0 <generateElispoidData+0x480>
 8001838:	ee27 7b06 	vmul.f64	d7, d7, d6
 800183c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001840:	eeb0 0a67 	vmov.f32	s0, s15
 8001844:	f00a fa40 	bl	800bcc8 <sinf>
 8001848:	eeb0 7a40 	vmov.f32	s14, s0
 800184c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001850:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001854:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001856:	3304      	adds	r3, #4
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800185c:	3314      	adds	r3, #20
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186a:	edc3 7a00 	vstr	s15, [r3]
    	data[2][a+(2*Samples/3)] = (ZStretch*(cosf(((2*M_PI)/(Samples/3))*(a)))) + Zoff ;
 800186e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001878:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8001af0 <generateElispoidData+0x480>
 800187c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001880:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	f009 fd72 	bl	800b370 <cosf>
 800188c:	eeb0 7a40 	vmov.f32	s14, s0
 8001890:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800189a:	3308      	adds	r3, #8
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018a0:	3314      	adds	r3, #20
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ae:	edc3 7a00 	vstr	s15, [r3]
for ( a = 0 ; a < (Samples/3); a++)//Z = 0
 80018b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018b4:	3301      	adds	r3, #1
 80018b6:	667b      	str	r3, [r7, #100]	; 0x64
 80018b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018ba:	2b09      	cmp	r3, #9
 80018bc:	ddac      	ble.n	8001818 <generateElispoidData+0x1a8>
     }


//fit elipseoid
printMatrix(data, 3, Samples);
 80018be:	221e      	movs	r2, #30
 80018c0:	2103      	movs	r1, #3
 80018c2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80018c4:	f7ff fb8c 	bl	8000fe0 <printMatrix>
float **M = ArrayElipsoidMat(data, 30);
 80018c8:	211e      	movs	r1, #30
 80018ca:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80018cc:	f7ff fddc 	bl	8001488 <ArrayElipsoidMat>
 80018d0:	6478      	str	r0, [r7, #68]	; 0x44
float **MT = TransposeMatrix(M, Samples, 9);
 80018d2:	2209      	movs	r2, #9
 80018d4:	211e      	movs	r1, #30
 80018d6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80018d8:	f7ff fb14 	bl	8000f04 <TransposeMatrix>
 80018dc:	4603      	mov	r3, r0
 80018de:	643b      	str	r3, [r7, #64]	; 0x40
float **MTM = MultiplyMatrix(MT, 9, Samples, M, Samples, 9);
 80018e0:	2309      	movs	r3, #9
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	231e      	movs	r3, #30
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ea:	221e      	movs	r2, #30
 80018ec:	2109      	movs	r1, #9
 80018ee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80018f0:	f7ff faa6 	bl	8000e40 <MultiplyMatrix>
 80018f4:	4603      	mov	r3, r0
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c




float **INVMTM = inverseMatrix(MTM, 9);
 80018f8:	2109      	movs	r1, #9
 80018fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018fc:	f000 faac 	bl	8001e58 <inverseMatrix>
 8001900:	63b8      	str	r0, [r7, #56]	; 0x38
float **MTMINVMT = MultiplyMatrix(INVMTM, 9, 9, MT, 9, Samples);
 8001902:	231e      	movs	r3, #30
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2309      	movs	r3, #9
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800190c:	2209      	movs	r2, #9
 800190e:	2109      	movs	r1, #9
 8001910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001912:	f7ff fa95 	bl	8000e40 <MultiplyMatrix>
 8001916:	4603      	mov	r3, r0
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
float **OnesColumVector = createNewMatrix(1, Samples, 1);
 800191a:	2201      	movs	r2, #1
 800191c:	211e      	movs	r1, #30
 800191e:	2001      	movs	r0, #1
 8001920:	f7ff f908 	bl	8000b34 <createNewMatrix>
 8001924:	4603      	mov	r3, r0
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
float **coefs = MultiplyMatrix(MTMINVMT, 9, Samples, OnesColumVector, Samples, 1);
 8001928:	2301      	movs	r3, #1
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	231e      	movs	r3, #30
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001932:	221e      	movs	r2, #30
 8001934:	2109      	movs	r1, #9
 8001936:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001938:	f7ff fa82 	bl	8000e40 <MultiplyMatrix>
 800193c:	4603      	mov	r3, r0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
printMatrix(INVMTM, 9, 9);
 8001940:	2209      	movs	r2, #9
 8001942:	2109      	movs	r1, #9
 8001944:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001946:	f7ff fb4b 	bl	8000fe0 <printMatrix>
printMatrix(coefs, 9, 1);
 800194a:	2201      	movs	r2, #1
 800194c:	2109      	movs	r1, #9
 800194e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001950:	f7ff fb46 	bl	8000fe0 <printMatrix>

//center elipseoid
float** A = createNewMatrix(0, 4, 4);
 8001954:	2204      	movs	r2, #4
 8001956:	2104      	movs	r1, #4
 8001958:	2000      	movs	r0, #0
 800195a:	f7ff f8eb 	bl	8000b34 <createNewMatrix>
 800195e:	4603      	mov	r3, r0
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
	A[0][0] = coefs[0][0];
 8001962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	601a      	str	r2, [r3, #0]
	A[0][1] = coefs[3][0];
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	330c      	adds	r3, #12
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3304      	adds	r3, #4
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	601a      	str	r2, [r3, #0]
	A[0][2] = coefs[4][0];
 800197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001980:	3310      	adds	r3, #16
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3308      	adds	r3, #8
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	601a      	str	r2, [r3, #0]
	A[0][3] = coefs[6][0];
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	3318      	adds	r3, #24
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	330c      	adds	r3, #12
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	601a      	str	r2, [r3, #0]

	A[1][0] = coefs[3][0];
 800199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a0:	330c      	adds	r3, #12
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a6:	3304      	adds	r3, #4
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	601a      	str	r2, [r3, #0]
	A[1][1] = coefs[1][0];
 80019ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b0:	3304      	adds	r3, #4
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b6:	3304      	adds	r3, #4
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	3304      	adds	r3, #4
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	601a      	str	r2, [r3, #0]
	A[1][2] = coefs[5][0];
 80019c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c2:	3314      	adds	r3, #20
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c8:	3304      	adds	r3, #4
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3308      	adds	r3, #8
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	601a      	str	r2, [r3, #0]
	A[1][3] = coefs[7][0];
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	331c      	adds	r3, #28
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019da:	3304      	adds	r3, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	330c      	adds	r3, #12
 80019e0:	6812      	ldr	r2, [r2, #0]
 80019e2:	601a      	str	r2, [r3, #0]

	A[2][0] = coefs[4][0];
 80019e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e6:	3310      	adds	r3, #16
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ec:	3308      	adds	r3, #8
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	601a      	str	r2, [r3, #0]
	A[2][1] = coefs[5][0];
 80019f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f6:	3314      	adds	r3, #20
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	3308      	adds	r3, #8
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	3304      	adds	r3, #4
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	601a      	str	r2, [r3, #0]
	A[2][2] = coefs[2][0];
 8001a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a08:	3308      	adds	r3, #8
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0e:	3308      	adds	r3, #8
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3308      	adds	r3, #8
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	601a      	str	r2, [r3, #0]
	A[2][3] = coefs[8][0];
 8001a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1a:	3320      	adds	r3, #32
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a20:	3308      	adds	r3, #8
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	330c      	adds	r3, #12
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	601a      	str	r2, [r3, #0]

	A[3][0] = coefs[6][0];
 8001a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2c:	3318      	adds	r3, #24
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a32:	330c      	adds	r3, #12
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	601a      	str	r2, [r3, #0]
	A[3][1] = coefs[7][0];
 8001a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3c:	331c      	adds	r3, #28
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a42:	330c      	adds	r3, #12
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	3304      	adds	r3, #4
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	601a      	str	r2, [r3, #0]
	A[3][2] = coefs[8][0];
 8001a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4e:	3320      	adds	r3, #32
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a54:	330c      	adds	r3, #12
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	3308      	adds	r3, #8
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	601a      	str	r2, [r3, #0]
	A[3][3] = -1;
 8001a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a60:	330c      	adds	r3, #12
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	330c      	adds	r3, #12
 8001a66:	4a24      	ldr	r2, [pc, #144]	; (8001af8 <generateElispoidData+0x488>)
 8001a68:	601a      	str	r2, [r3, #0]

	printMatrix(A, 4, 4);
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a70:	f7ff fab6 	bl	8000fe0 <printMatrix>

	float **aINV = inverseMatrix(A, 3);
 8001a74:	2103      	movs	r1, #3
 8001a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a78:	f000 f9ee 	bl	8001e58 <inverseMatrix>
 8001a7c:	6278      	str	r0, [r7, #36]	; 0x24
	float **NEGaINV = NegitiveMatrix(aINV, 3, 3);
 8001a7e:	2203      	movs	r2, #3
 8001a80:	2103      	movs	r1, #3
 8001a82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a84:	f7ff fa75 	bl	8000f72 <NegitiveMatrix>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	623b      	str	r3, [r7, #32]
	printMatrix(NEGaINV, 3, 3);
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	2103      	movs	r1, #3
 8001a90:	6a38      	ldr	r0, [r7, #32]
 8001a92:	f7ff faa5 	bl	8000fe0 <printMatrix>

	float **CVector = createNewMatrix(0, 3, 1);
 8001a96:	2201      	movs	r2, #1
 8001a98:	2103      	movs	r1, #3
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff f84a 	bl	8000b34 <createNewMatrix>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	61fb      	str	r3, [r7, #28]
	CVector[0][0] = coefs[6][0];
 8001aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa6:	3318      	adds	r3, #24
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	601a      	str	r2, [r3, #0]
	CVector[1][0] = coefs[7][0];
 8001ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab4:	331c      	adds	r3, #28
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	3304      	adds	r3, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	601a      	str	r2, [r3, #0]
	CVector[2][0] = coefs[8][0];
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	3320      	adds	r3, #32
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	3308      	adds	r3, #8
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	601a      	str	r2, [r3, #0]
	printMatrix(CVector, 3, 1);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	2103      	movs	r1, #3
 8001ad6:	69f8      	ldr	r0, [r7, #28]
 8001ad8:	f7ff fa82 	bl	8000fe0 <printMatrix>

	//get offsets
	float ** ofs = MultiplyMatrix(NEGaINV, 3, 3, CVector, 3, 1);
 8001adc:	2301      	movs	r3, #1
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	e008      	b.n	8001afc <generateElispoidData+0x48c>
 8001aea:	bf00      	nop
 8001aec:	f3af 8000 	nop.w
 8001af0:	769cf0e0 	.word	0x769cf0e0
 8001af4:	3fe41b2f 	.word	0x3fe41b2f
 8001af8:	bf800000 	.word	0xbf800000
 8001afc:	2103      	movs	r1, #3
 8001afe:	6a38      	ldr	r0, [r7, #32]
 8001b00:	f7ff f99e 	bl	8000e40 <MultiplyMatrix>
 8001b04:	4603      	mov	r3, r0
 8001b06:	61bb      	str	r3, [r7, #24]
	printMatrix(ofs, 3, 1);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	69b8      	ldr	r0, [r7, #24]
 8001b0e:	f7ff fa67 	bl	8000fe0 <printMatrix>

	float **Tmtx = createNewMatrix(3,4,4);
 8001b12:	2204      	movs	r2, #4
 8001b14:	2104      	movs	r1, #4
 8001b16:	2003      	movs	r0, #3
 8001b18:	f7ff f80c 	bl	8000b34 <createNewMatrix>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	617b      	str	r3, [r7, #20]
	Tmtx[3][0] = ofs[0][0];
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	330c      	adds	r3, #12
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	601a      	str	r2, [r3, #0]
	Tmtx[3][1] = ofs[1][0];
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	3304      	adds	r3, #4
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	330c      	adds	r3, #12
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	601a      	str	r2, [r3, #0]
	Tmtx[3][2] = ofs[2][0];
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	3308      	adds	r3, #8
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	330c      	adds	r3, #12
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3308      	adds	r3, #8
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	601a      	str	r2, [r3, #0]
	printMatrix(Tmtx, 4, 4);
 8001b52:	2204      	movs	r2, #4
 8001b54:	2104      	movs	r1, #4
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff fa42 	bl	8000fe0 <printMatrix>

	float ** Tmtxa = MultiplyMatrix(Tmtx, 4, 4, A, 4, 4);
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2304      	movs	r3, #4
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b66:	2204      	movs	r2, #4
 8001b68:	2104      	movs	r1, #4
 8001b6a:	6978      	ldr	r0, [r7, #20]
 8001b6c:	f7ff f968 	bl	8000e40 <MultiplyMatrix>
 8001b70:	4603      	mov	r3, r0
 8001b72:	613b      	str	r3, [r7, #16]
	float ** tTmtx = TransposeMatrix(Tmtx, 4, 4);
 8001b74:	2204      	movs	r2, #4
 8001b76:	2104      	movs	r1, #4
 8001b78:	6978      	ldr	r0, [r7, #20]
 8001b7a:	f7ff f9c3 	bl	8000f04 <TransposeMatrix>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	60fb      	str	r3, [r7, #12]

	// transposed elipseoid:
	float ** AT = MultiplyMatrix(Tmtxa, 4, 4, tTmtx, 4, 4);
 8001b82:	2304      	movs	r3, #4
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	2304      	movs	r3, #4
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	2104      	movs	r1, #4
 8001b90:	6938      	ldr	r0, [r7, #16]
 8001b92:	f7ff f955 	bl	8000e40 <MultiplyMatrix>
 8001b96:	4603      	mov	r3, r0
 8001b98:	60bb      	str	r3, [r7, #8]
	printMatrix(AT, 4, 4);
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	2104      	movs	r1, #4
 8001b9e:	68b8      	ldr	r0, [r7, #8]
 8001ba0:	f7ff fa1e 	bl	8000fe0 <printMatrix>

	// normalise
	float **NAT = normaliseMatrix(AT, 4, 4);
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	68b8      	ldr	r0, [r7, #8]
 8001baa:	f7ff f84d 	bl	8000c48 <normaliseMatrix>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	607b      	str	r3, [r7, #4]
	printMatrix(NAT, 3, 3);
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	2103      	movs	r1, #3
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff fa12 	bl	8000fe0 <printMatrix>

	EigenValues3x3(NAT);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f805 	bl	8001bcc <EigenValues3x3>



return data;
 8001bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3768      	adds	r7, #104	; 0x68
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <EigenValues3x3>:
return coefs;

}

float **EigenValues3x3 (float **Matrix)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af06      	add	r7, sp, #24
 8001bd2:	6078      	str	r0, [r7, #4]
	static float a,b,c,d;

	a = -1;
 8001bd4:	4b9a      	ldr	r3, [pc, #616]	; (8001e40 <EigenValues3x3+0x274>)
 8001bd6:	4a9b      	ldr	r2, [pc, #620]	; (8001e44 <EigenValues3x3+0x278>)
 8001bd8:	601a      	str	r2, [r3, #0]

	b = Matrix[0][0] + Matrix[1][1] + Matrix[2][2];
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	ed93 7a00 	vldr	s14, [r3]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3304      	adds	r3, #4
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3304      	adds	r3, #4
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3308      	adds	r3, #8
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c02:	4b91      	ldr	r3, [pc, #580]	; (8001e48 <EigenValues3x3+0x27c>)
 8001c04:	edc3 7a00 	vstr	s15, [r3]

	c = - (Matrix[2][2]*Matrix[0][0])
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	3308      	adds	r3, #8
 8001c10:	ed93 7a00 	vldr	s14, [r3]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	eeb1 7a67 	vneg.f32	s14, s15
		- (Matrix[2][2]*Matrix[1][1])
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3308      	adds	r3, #8
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3308      	adds	r3, #8
 8001c2c:	edd3 6a00 	vldr	s13, [r3]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3304      	adds	r3, #4
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee37 7a67 	vsub.f32	s14, s14, s15
		- (Matrix[0][0]*Matrix[1][1])
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	edd3 6a00 	vldr	s13, [r3]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3304      	adds	r3, #4
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c5c:	ee37 7a67 	vsub.f32	s14, s14, s15
		+ (Matrix[0][2]*Matrix[2][0])
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3308      	adds	r3, #8
 8001c66:	edd3 6a00 	vldr	s13, [r3]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	3308      	adds	r3, #8
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c78:	ee37 7a27 	vadd.f32	s14, s14, s15
		+ (Matrix[1][2]*Matrix[2][1])
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3304      	adds	r3, #4
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	3308      	adds	r3, #8
 8001c84:	edd3 6a00 	vldr	s13, [r3]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3308      	adds	r3, #8
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c98:	ee37 7a27 	vadd.f32	s14, s14, s15
		+ (Matrix[0][1]*Matrix[1][0]);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	edd3 6a00 	vldr	s13, [r3]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3304      	adds	r3, #4
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
	c = - (Matrix[2][2]*Matrix[0][0])
 8001cb8:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <EigenValues3x3+0x280>)
 8001cba:	edc3 7a00 	vstr	s15, [r3]

	d = +(Matrix[2][2]*Matrix[0][0]*Matrix[1][1])
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3308      	adds	r3, #8
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3308      	adds	r3, #8
 8001cc6:	ed93 7a00 	vldr	s14, [r3]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	edd3 7a00 	vldr	s15, [r3]
 8001cd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	ee27 7a27 	vmul.f32	s14, s14, s15
		+(Matrix[0][2]*Matrix[2][0]*Matrix[1][2])
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3308      	adds	r3, #8
 8001cec:	edd3 6a00 	vldr	s13, [r3]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3308      	adds	r3, #8
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3304      	adds	r3, #4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3308      	adds	r3, #8
 8001d06:	edd3 7a00 	vldr	s15, [r3]
 8001d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
		+(Matrix[0][2]*Matrix[1][0]*Matrix[2][1])
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	3308      	adds	r3, #8
 8001d18:	edd3 6a00 	vldr	s13, [r3]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3304      	adds	r3, #4
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3308      	adds	r3, #8
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	3304      	adds	r3, #4
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3a:	ee37 7a27 	vadd.f32	s14, s14, s15
		-(Matrix[0][2]*Matrix[1][1]*Matrix[2][0])
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	3308      	adds	r3, #8
 8001d44:	edd3 6a00 	vldr	s13, [r3]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3304      	adds	r3, #4
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	edd3 7a00 	vldr	s15, [r3]
 8001d54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3308      	adds	r3, #8
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d66:	ee37 7a67 	vsub.f32	s14, s14, s15
		-(Matrix[0][0]*Matrix[1][2]*Matrix[2][1])
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	edd3 6a00 	vldr	s13, [r3]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3304      	adds	r3, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3308      	adds	r3, #8
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3308      	adds	r3, #8
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d92:	ee37 7a67 	vsub.f32	s14, s14, s15
		-(Matrix[0][1]*Matrix[1][0]*Matrix[2][2]);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	edd3 6a00 	vldr	s13, [r3]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3304      	adds	r3, #4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3308      	adds	r3, #8
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	3308      	adds	r3, #8
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
	d = +(Matrix[2][2]*Matrix[0][0]*Matrix[1][1])
 8001dc2:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <EigenValues3x3+0x284>)
 8001dc4:	edc3 7a00 	vstr	s15, [r3]

	printf("\r\n%f\t%f\t%f\t%f\t\r\n",a,b,c,d);
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <EigenValues3x3+0x274>)
 8001dca:	edd3 7a00 	vldr	s15, [r3]
 8001dce:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <EigenValues3x3+0x27c>)
 8001dd4:	edd3 7a00 	vldr	s15, [r3]
 8001dd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <EigenValues3x3+0x280>)
 8001dde:	edd3 6a00 	vldr	s13, [r3]
 8001de2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <EigenValues3x3+0x284>)
 8001de8:	edd3 5a00 	vldr	s11, [r3]
 8001dec:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001df0:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001df4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001df8:	ed8d 7b00 	vstr	d7, [sp]
 8001dfc:	ec53 2b14 	vmov	r2, r3, d4
 8001e00:	4814      	ldr	r0, [pc, #80]	; (8001e54 <EigenValues3x3+0x288>)
 8001e02:	f007 fa6f 	bl	80092e4 <iprintf>

	float **roots = get_cubic(a,b,c,d);
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <EigenValues3x3+0x274>)
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <EigenValues3x3+0x27c>)
 8001e0e:	ed93 7a00 	vldr	s14, [r3]
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <EigenValues3x3+0x280>)
 8001e14:	edd3 6a00 	vldr	s13, [r3]
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <EigenValues3x3+0x284>)
 8001e1a:	ed93 6a00 	vldr	s12, [r3]
 8001e1e:	eef0 1a46 	vmov.f32	s3, s12
 8001e22:	eeb0 1a66 	vmov.f32	s2, s13
 8001e26:	eef0 0a47 	vmov.f32	s1, s14
 8001e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2e:	f7ff f91d 	bl	800106c <get_cubic>
 8001e32:	60f8      	str	r0, [r7, #12]
	return roots;
 8001e34:	68fb      	ldr	r3, [r7, #12]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	240002c0 	.word	0x240002c0
 8001e44:	bf800000 	.word	0xbf800000
 8001e48:	240002c4 	.word	0x240002c4
 8001e4c:	240002c8 	.word	0x240002c8
 8001e50:	240002cc 	.word	0x240002cc
 8001e54:	0800d118 	.word	0x0800d118

08001e58 <inverseMatrix>:




float **inverseMatrix(float ** Matrix,int size) // max size = 5
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	f6ad 1dd8 	subw	sp, sp, #2520	; 0x9d8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	6018      	str	r0, [r3, #0]
 8001e64:	463b      	mov	r3, r7
 8001e66:	6019      	str	r1, [r3, #0]
	float a[25][25];

	//a = MatrixtoArray(Matrix, 5, 5,a);
	MatrixtoArrayB(Matrix, size, size,a);
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	463a      	mov	r2, r7
 8001e6e:	4639      	mov	r1, r7
 8001e70:	1d38      	adds	r0, r7, #4
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	6809      	ldr	r1, [r1, #0]
 8001e76:	6800      	ldr	r0, [r0, #0]
 8001e78:	f7fe ff6f 	bl	8000d5a <MatrixtoArrayB>

	printArray(a, size, size);
 8001e7c:	463a      	mov	r2, r7
 8001e7e:	463b      	mov	r3, r7
 8001e80:	f107 000c 	add.w	r0, r7, #12
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	6819      	ldr	r1, [r3, #0]
 8001e88:	f7fe ff9c 	bl	8000dc4 <printArray>

	float d = detrminant(a, size);
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f839 	bl	8001f18 <detrminant>
 8001ea6:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8001eaa:	ed83 0a00 	vstr	s0, [r3]
	printf("detrimant is %f\r\n",d);
 8001eae:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001eba:	ec53 2b17 	vmov	r2, r3, d7
 8001ebe:	4814      	ldr	r0, [pc, #80]	; (8001f10 <inverseMatrix+0xb8>)
 8001ec0:	f007 fa10 	bl	80092e4 <iprintf>
	detrimant123 =d;
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <inverseMatrix+0xbc>)
 8001ec6:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6013      	str	r3, [r2, #0]
	if (d != 0)
 8001ece:	f607 13d4 	addw	r3, r7, #2516	; 0x9d4
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ede:	d011      	beq.n	8001f04 <inverseMatrix+0xac>
	{
		float **INV = cofactors(a, size);
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 f90a 	bl	800210e <cofactors>
 8001efa:	f8c7 09d0 	str.w	r0, [r7, #2512]	; 0x9d0
		return INV;
 8001efe:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	; 0x9d0
 8001f02:	e000      	b.n	8001f06 <inverseMatrix+0xae>
	}
	else
		return NULL;
 8001f04:	2300      	movs	r3, #0

}
 8001f06:	4618      	mov	r0, r3
 8001f08:	f607 17d8 	addw	r7, r7, #2520	; 0x9d8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	0800d148 	.word	0x0800d148
 8001f14:	240002e4 	.word	0x240002e4

08001f18 <detrminant>:





float detrminant(float a[9][9], float k) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	ed2d 8b02 	vpush	{d8}
 8001f1e:	b0da      	sub	sp, #360	; 0x168
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	6018      	str	r0, [r3, #0]
 8001f26:	463b      	mov	r3, r7
 8001f28:	ed83 0a00 	vstr	s0, [r3]

	float s = 1, det = 0;
 8001f2c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001f30:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	int i, j, m, n, c;




	if (k == 1) {
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	edd3 7a00 	vldr	s15, [r3]
 8001f42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f46:	eef4 7a47 	vcmp.f32	s15, s14
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	d103      	bne.n	8001f58 <detrminant+0x40>
		return (a[0][0]);
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	e0d0      	b.n	80020fa <detrminant+0x1e2>
	}
	else
		{
		det = 0;
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
		for (c = 0; c < k; c++)
 8001f60:	2300      	movs	r3, #0
 8001f62:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f66:	e0b7      	b.n	80020d8 <detrminant+0x1c0>
			{
			m = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
			n = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
			for (i = 0; i < k; i++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001f7a:	e070      	b.n	800205e <detrminant+0x146>
				{
				for (j = 0; j < k; j++)
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f82:	e059      	b.n	8002038 <detrminant+0x120>
					{
					b[i][j] = 0;
 8001f84:	f107 0108 	add.w	r1, r7, #8
 8001f88:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
					if (i != 0 && j != c)
 8001fa2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d041      	beq.n	800202e <detrminant+0x116>
 8001faa:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8001fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d03b      	beq.n	800202e <detrminant+0x116>
						{
						b[m][n] = a[i][j];
 8001fb6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	441a      	add	r2, r3
 8001fca:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	f107 0008 	add.w	r0, r7, #8
 8001fd8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4403      	add	r3, r0
 8001fec:	6019      	str	r1, [r3, #0]
						if (n < (k - 2))
 8001fee:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ff2:	ee07 3a90 	vmov	s15, r3
 8001ff6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002004:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002010:	d505      	bpl.n	800201e <detrminant+0x106>
							{
						    	n++;
 8002012:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002016:	3301      	adds	r3, #1
 8002018:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800201c:	e007      	b.n	800202e <detrminant+0x116>
							}
						 else
						 	 {
							n = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
							m++;
 8002024:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002028:	3301      	adds	r3, #1
 800202a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
				for (j = 0; j < k; j++)
 800202e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002032:	3301      	adds	r3, #1
 8002034:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002038:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002044:	463b      	mov	r3, r7
 8002046:	ed93 7a00 	vldr	s14, [r3]
 800204a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	dc97      	bgt.n	8001f84 <detrminant+0x6c>
			for (i = 0; i < k; i++)
 8002054:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002058:	3301      	adds	r3, #1
 800205a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800205e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002062:	ee07 3a90 	vmov	s15, r3
 8002066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800206a:	463b      	mov	r3, r7
 800206c:	ed93 7a00 	vldr	s14, [r3]
 8002070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002078:	dc80      	bgt.n	8001f7c <detrminant+0x64>
						 	 }
						}
					}
				}

			det = det + s * (a[0][c] * detrminant(b, k - 1));
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	ed93 8a00 	vldr	s16, [r3]
 800208a:	463b      	mov	r3, r7
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002098:	f107 0308 	add.w	r3, r7, #8
 800209c:	eeb0 0a67 	vmov.f32	s0, s15
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff39 	bl	8001f18 <detrminant>
 80020a6:	eef0 7a40 	vmov.f32	s15, s0
 80020aa:	ee28 7a27 	vmul.f32	s14, s16, s15
 80020ae:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 80020b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b6:	ed97 7a58 	vldr	s14, [r7, #352]	; 0x160
 80020ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020be:	edc7 7a58 	vstr	s15, [r7, #352]	; 0x160
			s = -1 * s;
 80020c2:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 80020c6:	eef1 7a67 	vneg.f32	s15, s15
 80020ca:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
		for (c = 0; c < k; c++)
 80020ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020d2:	3301      	adds	r3, #1
 80020d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80020d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e4:	463b      	mov	r3, r7
 80020e6:	ed93 7a00 	vldr	s14, [r3]
 80020ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020f2:	f73f af39 	bgt.w	8001f68 <detrminant+0x50>
		}
	}
	return det;
 80020f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80020fa:	ee07 3a90 	vmov	s15, r3
}
 80020fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002102:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8002106:	46bd      	mov	sp, r7
 8002108:	ecbd 8b02 	vpop	{d8}
 800210c:	bd80      	pop	{r7, pc}

0800210e <cofactors>:

float **cofactors(float num[9][9], float f) {
 800210e:	b580      	push	{r7, lr}
 8002110:	ed2d 8b02 	vpush	{d8}
 8002114:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
 8002118:	af00      	add	r7, sp, #0
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	6018      	str	r0, [r3, #0]
 800211e:	463b      	mov	r3, r7
 8002120:	ed83 0a00 	vstr	s0, [r3]
	//printArray(num, 5, 5);
	float b[9][9], fac[9][9];
	float c[9][9], inv[9][9], d;

	int p, q, m, n, i, j;
	for (q = 0; q < f; q++) {
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 800212a:	e0dd      	b.n	80022e8 <cofactors+0x1da>
		for (p = 0; p < f; p++) {
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8002132:	e0c5      	b.n	80022c0 <cofactors+0x1b2>
			m = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
			n = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
			for (i = 0; i < f; i++) {
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8002146:	e072      	b.n	800222e <cofactors+0x120>
				for (j = 0; j < f; j++) {
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800214e:	e05b      	b.n	8002208 <cofactors+0xfa>
					b[i][j] = 0;
 8002150:	f507 7175 	add.w	r1, r7, #980	; 0x3d4
 8002154:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 8002162:	4413      	add	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
					if (i != q && j != p) {
 800216e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8002172:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8002176:	429a      	cmp	r2, r3
 8002178:	d041      	beq.n	80021fe <cofactors+0xf0>
 800217a:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 800217e:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8002182:	429a      	cmp	r2, r3
 8002184:	d03b      	beq.n	80021fe <cofactors+0xf0>
						b[m][n] = num[i][j];
 8002186:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	461a      	mov	r2, r3
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	441a      	add	r2, r3
 800219a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	6819      	ldr	r1, [r3, #0]
 80021a4:	f507 7075 	add.w	r0, r7, #980	; 0x3d4
 80021a8:	f8d7 252c 	ldr.w	r2, [r7, #1324]	; 0x52c
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4403      	add	r3, r0
 80021bc:	6019      	str	r1, [r3, #0]
						if (n < (f - 2))
 80021be:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 80021c2:	ee07 3a90 	vmov	s15, r3
 80021c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ca:	463b      	mov	r3, r7
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80021d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e0:	d505      	bpl.n	80021ee <cofactors+0xe0>
						       n++; else {
 80021e2:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 80021e6:	3301      	adds	r3, #1
 80021e8:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 80021ec:	e007      	b.n	80021fe <cofactors+0xf0>
							n = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
							m++;
 80021f4:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80021f8:	3301      	adds	r3, #1
 80021fa:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
				for (j = 0; j < f; j++) {
 80021fe:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002202:	3301      	adds	r3, #1
 8002204:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8002208:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800220c:	ee07 3a90 	vmov	s15, r3
 8002210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002214:	463b      	mov	r3, r7
 8002216:	ed93 7a00 	vldr	s14, [r3]
 800221a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002222:	dc95      	bgt.n	8002150 <cofactors+0x42>
			for (i = 0; i < f; i++) {
 8002224:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002228:	3301      	adds	r3, #1
 800222a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800222e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800223a:	463b      	mov	r3, r7
 800223c:	ed93 7a00 	vldr	s14, [r3]
 8002240:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002248:	f73f af7e 	bgt.w	8002148 <cofactors+0x3a>
						}
					}
				}
			}
			fac[q][p] = pow(-1, q + p) * detrminant(b, f - 1);
 800224c:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 8002250:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8002254:	4413      	add	r3, r2
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800225e:	eeb0 1b47 	vmov.f64	d1, d7
 8002262:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8002266:	f009 f983 	bl	800b570 <pow>
 800226a:	eeb0 8b40 	vmov.f64	d8, d0
 800226e:	463b      	mov	r3, r7
 8002270:	edd3 7a00 	vldr	s15, [r3]
 8002274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800227c:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8002280:	eeb0 0a67 	vmov.f32	s0, s15
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff fe47 	bl	8001f18 <detrminant>
 800228a:	eef0 7a40 	vmov.f32	s15, s0
 800228e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002292:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002296:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800229a:	f507 7124 	add.w	r1, r7, #656	; 0x290
 800229e:	f8d7 2530 	ldr.w	r2, [r7, #1328]	; 0x530
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	edc3 7a00 	vstr	s15, [r3]
		for (p = 0; p < f; p++) {
 80022b6:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80022ba:	3301      	adds	r3, #1
 80022bc:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 80022c0:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 80022c4:	ee07 3a90 	vmov	s15, r3
 80022c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022cc:	463b      	mov	r3, r7
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022da:	f73f af2b 	bgt.w	8002134 <cofactors+0x26>
	for (q = 0; q < f; q++) {
 80022de:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80022e2:	3301      	adds	r3, #1
 80022e4:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 80022e8:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f4:	463b      	mov	r3, r7
 80022f6:	ed93 7a00 	vldr	s14, [r3]
 80022fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002302:	f73f af13 	bgt.w	800212c <cofactors+0x1e>
		}
	}

	//printArray(fac, 5, 5);
	for (i = 0; i < f; i++) {
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800230c:	e035      	b.n	800237a <cofactors+0x26c>
		for (j = 0; j < f; j++) {
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8002314:	e01e      	b.n	8002354 <cofactors+0x246>
			c[i][j] = fac[j][i];
 8002316:	f507 7124 	add.w	r1, r7, #656	; 0x290
 800231a:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	6819      	ldr	r1, [r3, #0]
 8002330:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8002334:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 8002342:	4413      	add	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4403      	add	r3, r0
 8002348:	6019      	str	r1, [r3, #0]
		for (j = 0; j < f; j++) {
 800234a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800234e:	3301      	adds	r3, #1
 8002350:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8002354:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002358:	ee07 3a90 	vmov	s15, r3
 800235c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002360:	463b      	mov	r3, r7
 8002362:	ed93 7a00 	vldr	s14, [r3]
 8002366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800236a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236e:	dcd2      	bgt.n	8002316 <cofactors+0x208>
	for (i = 0; i < f; i++) {
 8002370:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002374:	3301      	adds	r3, #1
 8002376:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800237a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800237e:	ee07 3a90 	vmov	s15, r3
 8002382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002386:	463b      	mov	r3, r7
 8002388:	ed93 7a00 	vldr	s14, [r3]
 800238c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	dcbb      	bgt.n	800230e <cofactors+0x200>
		}
	}

	d = detrminant(num, f);
 8002396:	463a      	mov	r2, r7
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	ed92 0a00 	vldr	s0, [r2]
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	f7ff fdba 	bl	8001f18 <detrminant>
 80023a4:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80023a8:	ed83 0a00 	vstr	s0, [r3]

	//inv[i][j] = 0;
	for (i = 0; i < f; i++) {
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 80023b2:	e03d      	b.n	8002430 <cofactors+0x322>
		for (j = 0; j < f; j++) {
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80023ba:	e026      	b.n	800240a <cofactors+0x2fc>
			inv[i][j] = c[i][j] / d;
 80023bc:	f507 71a6 	add.w	r1, r7, #332	; 0x14c
 80023c0:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	edd3 6a00 	vldr	s13, [r3]
 80023d8:	f207 531c 	addw	r3, r7, #1308	; 0x51c
 80023dc:	ed93 7a00 	vldr	s14, [r3]
 80023e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e4:	f107 0108 	add.w	r1, r7, #8
 80023e8:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	edc3 7a00 	vstr	s15, [r3]
		for (j = 0; j < f; j++) {
 8002400:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002404:	3301      	adds	r3, #1
 8002406:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800240a:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002416:	463b      	mov	r3, r7
 8002418:	ed93 7a00 	vldr	s14, [r3]
 800241c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	dcca      	bgt.n	80023bc <cofactors+0x2ae>
	for (i = 0; i < f; i++) {
 8002426:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800242a:	3301      	adds	r3, #1
 800242c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8002430:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800243c:	463b      	mov	r3, r7
 800243e:	ed93 7a00 	vldr	s14, [r3]
 8002442:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244a:	dcb3      	bgt.n	80023b4 <cofactors+0x2a6>
		}
	}
//printf("\r\n invers is: \r\n");
	//printArray(inv, 5, 5);
	float **INVS = ArraytoMatrix(inv, 9, 9);
 800244c:	f107 0308 	add.w	r3, r7, #8
 8002450:	2209      	movs	r2, #9
 8002452:	2109      	movs	r1, #9
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fc48 	bl	8000cea <ArraytoMatrix>
 800245a:	4603      	mov	r3, r0
 800245c:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
	return INVS;
 8002460:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518

}
 8002464:	4618      	mov	r0, r3
 8002466:	f507 67a7 	add.w	r7, r7, #1336	; 0x538
 800246a:	46bd      	mov	sp, r7
 800246c:	ecbd 8b02 	vpop	{d8}
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002478:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <MX_ETH_Init+0x80>)
 800247a:	4a1f      	ldr	r2, [pc, #124]	; (80024f8 <MX_ETH_Init+0x84>)
 800247c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800247e:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <MX_ETH_Init+0x88>)
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <MX_ETH_Init+0x88>)
 8002486:	2280      	movs	r2, #128	; 0x80
 8002488:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <MX_ETH_Init+0x88>)
 800248c:	22e1      	movs	r2, #225	; 0xe1
 800248e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002490:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <MX_ETH_Init+0x88>)
 8002492:	2200      	movs	r2, #0
 8002494:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002496:	4b19      	ldr	r3, [pc, #100]	; (80024fc <MX_ETH_Init+0x88>)
 8002498:	2200      	movs	r2, #0
 800249a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <MX_ETH_Init+0x88>)
 800249e:	2200      	movs	r2, #0
 80024a0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <MX_ETH_Init+0x80>)
 80024a4:	4a15      	ldr	r2, [pc, #84]	; (80024fc <MX_ETH_Init+0x88>)
 80024a6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <MX_ETH_Init+0x80>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <MX_ETH_Init+0x80>)
 80024b0:	4a13      	ldr	r2, [pc, #76]	; (8002500 <MX_ETH_Init+0x8c>)
 80024b2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <MX_ETH_Init+0x80>)
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <MX_ETH_Init+0x90>)
 80024b8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <MX_ETH_Init+0x80>)
 80024bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80024c0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80024c2:	480c      	ldr	r0, [pc, #48]	; (80024f4 <MX_ETH_Init+0x80>)
 80024c4:	f000 ff54 	bl	8003370 <HAL_ETH_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80024ce:	f000 fa45 	bl	800295c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80024d2:	2234      	movs	r2, #52	; 0x34
 80024d4:	2100      	movs	r1, #0
 80024d6:	480c      	ldr	r0, [pc, #48]	; (8002508 <MX_ETH_Init+0x94>)
 80024d8:	f006 fa0e 	bl	80088f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80024dc:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <MX_ETH_Init+0x94>)
 80024de:	2221      	movs	r2, #33	; 0x21
 80024e0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <MX_ETH_Init+0x94>)
 80024e4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80024e8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <MX_ETH_Init+0x94>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	240002ec 	.word	0x240002ec
 80024f8:	40028000 	.word	0x40028000
 80024fc:	240002d0 	.word	0x240002d0
 8002500:	24000244 	.word	0x24000244
 8002504:	240001e4 	.word	0x240001e4
 8002508:	24000374 	.word	0x24000374

0800250c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08e      	sub	sp, #56	; 0x38
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a59      	ldr	r2, [pc, #356]	; (8002690 <HAL_ETH_MspInit+0x184>)
 800252a:	4293      	cmp	r3, r2
 800252c:	f040 80ab 	bne.w	8002686 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002530:	4b58      	ldr	r3, [pc, #352]	; (8002694 <HAL_ETH_MspInit+0x188>)
 8002532:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002536:	4a57      	ldr	r2, [pc, #348]	; (8002694 <HAL_ETH_MspInit+0x188>)
 8002538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800253c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002540:	4b54      	ldr	r3, [pc, #336]	; (8002694 <HAL_ETH_MspInit+0x188>)
 8002542:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254a:	623b      	str	r3, [r7, #32]
 800254c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800254e:	4b51      	ldr	r3, [pc, #324]	; (8002694 <HAL_ETH_MspInit+0x188>)
 8002550:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002554:	4a4f      	ldr	r2, [pc, #316]	; (8002694 <HAL_ETH_MspInit+0x188>)
 8002556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800255e:	4b4d      	ldr	r3, [pc, #308]	; (8002694 <HAL_ETH_MspInit+0x188>)
 8002560:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800256c:	4b49      	ldr	r3, [pc, #292]	; (8002694 <HAL_ETH_MspInit+0x188>)
 800256e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002572:	4a48      	ldr	r2, [pc, #288]	; (8002694 <HAL_ETH_MspInit+0x188>)
 8002574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002578:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800257c:	4b45      	ldr	r3, [pc, #276]	; (8002694 <HAL_ETH_MspInit+0x188>)
 800257e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	4b42      	ldr	r3, [pc, #264]	; (8002694 <HAL_ETH_MspInit+0x188>)
 800258c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002590:	4a40      	ldr	r2, [pc, #256]	; (8002694 <HAL_ETH_MspInit+0x188>)
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800259a:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <HAL_ETH_MspInit+0x188>)
 800259c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a8:	4b3a      	ldr	r3, [pc, #232]	; (8002694 <HAL_ETH_MspInit+0x188>)
 80025aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ae:	4a39      	ldr	r2, [pc, #228]	; (8002694 <HAL_ETH_MspInit+0x188>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025b8:	4b36      	ldr	r3, [pc, #216]	; (8002694 <HAL_ETH_MspInit+0x188>)
 80025ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c6:	4b33      	ldr	r3, [pc, #204]	; (8002694 <HAL_ETH_MspInit+0x188>)
 80025c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025cc:	4a31      	ldr	r2, [pc, #196]	; (8002694 <HAL_ETH_MspInit+0x188>)
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025d6:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <HAL_ETH_MspInit+0x188>)
 80025d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80025e4:	4b2b      	ldr	r3, [pc, #172]	; (8002694 <HAL_ETH_MspInit+0x188>)
 80025e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ea:	4a2a      	ldr	r2, [pc, #168]	; (8002694 <HAL_ETH_MspInit+0x188>)
 80025ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025f4:	4b27      	ldr	r3, [pc, #156]	; (8002694 <HAL_ETH_MspInit+0x188>)
 80025f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002602:	2332      	movs	r3, #50	; 0x32
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002612:	230b      	movs	r3, #11
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261a:	4619      	mov	r1, r3
 800261c:	481e      	ldr	r0, [pc, #120]	; (8002698 <HAL_ETH_MspInit+0x18c>)
 800261e:	f001 fabd 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002622:	2386      	movs	r3, #134	; 0x86
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002632:	230b      	movs	r3, #11
 8002634:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800263a:	4619      	mov	r1, r3
 800263c:	4817      	ldr	r0, [pc, #92]	; (800269c <HAL_ETH_MspInit+0x190>)
 800263e:	f001 faad 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002650:	2300      	movs	r3, #0
 8002652:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002654:	230b      	movs	r3, #11
 8002656:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800265c:	4619      	mov	r1, r3
 800265e:	4810      	ldr	r0, [pc, #64]	; (80026a0 <HAL_ETH_MspInit+0x194>)
 8002660:	f001 fa9c 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002664:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002672:	2300      	movs	r3, #0
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002676:	230b      	movs	r3, #11
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800267a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800267e:	4619      	mov	r1, r3
 8002680:	4808      	ldr	r0, [pc, #32]	; (80026a4 <HAL_ETH_MspInit+0x198>)
 8002682:	f001 fa8b 	bl	8003b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002686:	bf00      	nop
 8002688:	3738      	adds	r7, #56	; 0x38
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40028000 	.word	0x40028000
 8002694:	58024400 	.word	0x58024400
 8002698:	58020800 	.word	0x58020800
 800269c:	58020000 	.word	0x58020000
 80026a0:	58020400 	.word	0x58020400
 80026a4:	58021800 	.word	0x58021800

080026a8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ae:	4b30      	ldr	r3, [pc, #192]	; (8002770 <MX_GPIO_Init+0xc8>)
 80026b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b4:	4a2e      	ldr	r2, [pc, #184]	; (8002770 <MX_GPIO_Init+0xc8>)
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026be:	4b2c      	ldr	r3, [pc, #176]	; (8002770 <MX_GPIO_Init+0xc8>)
 80026c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026cc:	4b28      	ldr	r3, [pc, #160]	; (8002770 <MX_GPIO_Init+0xc8>)
 80026ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d2:	4a27      	ldr	r2, [pc, #156]	; (8002770 <MX_GPIO_Init+0xc8>)
 80026d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026dc:	4b24      	ldr	r3, [pc, #144]	; (8002770 <MX_GPIO_Init+0xc8>)
 80026de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	4b21      	ldr	r3, [pc, #132]	; (8002770 <MX_GPIO_Init+0xc8>)
 80026ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f0:	4a1f      	ldr	r2, [pc, #124]	; (8002770 <MX_GPIO_Init+0xc8>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026fa:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <MX_GPIO_Init+0xc8>)
 80026fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <MX_GPIO_Init+0xc8>)
 800270a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270e:	4a18      	ldr	r2, [pc, #96]	; (8002770 <MX_GPIO_Init+0xc8>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002718:	4b15      	ldr	r3, [pc, #84]	; (8002770 <MX_GPIO_Init+0xc8>)
 800271a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <MX_GPIO_Init+0xc8>)
 8002728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272c:	4a10      	ldr	r2, [pc, #64]	; (8002770 <MX_GPIO_Init+0xc8>)
 800272e:	f043 0308 	orr.w	r3, r3, #8
 8002732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <MX_GPIO_Init+0xc8>)
 8002738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <MX_GPIO_Init+0xc8>)
 8002746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800274a:	4a09      	ldr	r2, [pc, #36]	; (8002770 <MX_GPIO_Init+0xc8>)
 800274c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002750:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MX_GPIO_Init+0xc8>)
 8002756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	683b      	ldr	r3, [r7, #0]

}
 8002762:	bf00      	nop
 8002764:	371c      	adds	r7, #28
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	58024400 	.word	0x58024400

08002774 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800277c:	1d39      	adds	r1, r7, #4
 800277e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002782:	2201      	movs	r2, #1
 8002784:	4803      	ldr	r0, [pc, #12]	; (8002794 <__io_putchar+0x20>)
 8002786:	f004 fd61 	bl	800724c <HAL_UART_Transmit>



  return ch;
 800278a:	687b      	ldr	r3, [r7, #4]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	240003f4 	.word	0x240003f4

08002798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800279e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a2:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80027a4:	bf00      	nop
 80027a6:	4b28      	ldr	r3, [pc, #160]	; (8002848 <main+0xb0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d004      	beq.n	80027bc <main+0x24>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1e5a      	subs	r2, r3, #1
 80027b6:	60fa      	str	r2, [r7, #12]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	dcf4      	bgt.n	80027a6 <main+0xe>
  if ( timeout < 0 )
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	da01      	bge.n	80027c6 <main+0x2e>
  {
  Error_Handler();
 80027c2:	f000 f8cb 	bl	800295c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027c6:	f000 fbed 	bl	8002fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ca:	f000 f843 	bl	8002854 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80027ce:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <main+0xb0>)
 80027d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d4:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <main+0xb0>)
 80027d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027de:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <main+0xb0>)
 80027e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f001 fb85 	bl	8003efc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80027f2:	2100      	movs	r1, #0
 80027f4:	2000      	movs	r0, #0
 80027f6:	f001 fb9b 	bl	8003f30 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80027fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027fe:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8002800:	bf00      	nop
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <main+0xb0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d104      	bne.n	8002818 <main+0x80>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	60fa      	str	r2, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	dcf4      	bgt.n	8002802 <main+0x6a>
if ( timeout < 0 )
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	da01      	bge.n	8002822 <main+0x8a>
{
Error_Handler();
 800281e:	f000 f89d 	bl	800295c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002822:	f7ff ff41 	bl	80026a8 <MX_GPIO_Init>
  MX_ETH_Init();
 8002826:	f7ff fe25 	bl	8002474 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800282a:	f000 fa25 	bl	8002c78 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800282e:	f000 fad5 	bl	8002ddc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8002832:	f000 f9ad 	bl	8002b90 <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  a = 0.78;
 8002836:	4b05      	ldr	r3, [pc, #20]	; (800284c <main+0xb4>)
 8002838:	4a05      	ldr	r2, [pc, #20]	; (8002850 <main+0xb8>)
 800283a:	601a      	str	r2, [r3, #0]
	  //MATRIX inverse = inverseMatrix(test, 5);
	  //printMatrix(inverse, 5, 5);
	  //elipsecoef();
	  //centerElipse();

	  float ** a = generateElispoidData();
 800283c:	f7fe ff18 	bl	8001670 <generateElispoidData>
 8002840:	4603      	mov	r3, r0
 8002842:	60bb      	str	r3, [r7, #8]
	//  leastSqaresElipse();
	 // l = detrminant1(test,5);
//printf("detriment is: %f\r\n",l);

	 // HAL_Delay(50000);
	  while(1){}
 8002844:	e7fe      	b.n	8002844 <main+0xac>
 8002846:	bf00      	nop
 8002848:	58024400 	.word	0x58024400
 800284c:	240002e8 	.word	0x240002e8
 8002850:	3f47ae14 	.word	0x3f47ae14

08002854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b09c      	sub	sp, #112	; 0x70
 8002858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800285a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800285e:	224c      	movs	r2, #76	; 0x4c
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f006 f848 	bl	80088f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	2220      	movs	r2, #32
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f006 f842 	bl	80088f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002874:	2004      	movs	r0, #4
 8002876:	f001 fcb7 	bl	80041e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800287a:	2300      	movs	r3, #0
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	4b34      	ldr	r3, [pc, #208]	; (8002950 <SystemClock_Config+0xfc>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4a33      	ldr	r2, [pc, #204]	; (8002950 <SystemClock_Config+0xfc>)
 8002884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002888:	6193      	str	r3, [r2, #24]
 800288a:	4b31      	ldr	r3, [pc, #196]	; (8002950 <SystemClock_Config+0xfc>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <SystemClock_Config+0x100>)
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	4a2e      	ldr	r2, [pc, #184]	; (8002954 <SystemClock_Config+0x100>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80028a0:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <SystemClock_Config+0x100>)
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80028ac:	bf00      	nop
 80028ae:	4b28      	ldr	r3, [pc, #160]	; (8002950 <SystemClock_Config+0xfc>)
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ba:	d1f8      	bne.n	80028ae <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80028bc:	4b26      	ldr	r3, [pc, #152]	; (8002958 <SystemClock_Config+0x104>)
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	f023 0303 	bic.w	r3, r3, #3
 80028c4:	4a24      	ldr	r2, [pc, #144]	; (8002958 <SystemClock_Config+0x104>)
 80028c6:	f043 0302 	orr.w	r3, r3, #2
 80028ca:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028cc:	2301      	movs	r3, #1
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80028d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028d6:	2302      	movs	r3, #2
 80028d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028da:	2302      	movs	r3, #2
 80028dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80028de:	2301      	movs	r3, #1
 80028e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80028e2:	2378      	movs	r3, #120	; 0x78
 80028e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80028e6:	2302      	movs	r3, #2
 80028e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028ea:	2302      	movs	r3, #2
 80028ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028ee:	2302      	movs	r3, #2
 80028f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80028f2:	230c      	movs	r3, #12
 80028f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002902:	4618      	mov	r0, r3
 8002904:	f001 fcda 	bl	80042bc <HAL_RCC_OscConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800290e:	f000 f825 	bl	800295c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002912:	233f      	movs	r3, #63	; 0x3f
 8002914:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002916:	2303      	movs	r3, #3
 8002918:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800291e:	2308      	movs	r3, #8
 8002920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002922:	2340      	movs	r3, #64	; 0x40
 8002924:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002926:	2340      	movs	r3, #64	; 0x40
 8002928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800292a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800292e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002930:	2340      	movs	r3, #64	; 0x40
 8002932:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	2104      	movs	r1, #4
 8002938:	4618      	mov	r0, r3
 800293a:	f002 f8cf 	bl	8004adc <HAL_RCC_ClockConfig>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002944:	f000 f80a 	bl	800295c <Error_Handler>
  }
}
 8002948:	bf00      	nop
 800294a:	3770      	adds	r7, #112	; 0x70
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	58024800 	.word	0x58024800
 8002954:	58000400 	.word	0x58000400
 8002958:	58024400 	.word	0x58024400

0800295c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002960:	b672      	cpsid	i
}
 8002962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002964:	e7fe      	b.n	8002964 <Error_Handler+0x8>
	...

08002968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_MspInit+0x30>)
 8002970:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002974:	4a08      	ldr	r2, [pc, #32]	; (8002998 <HAL_MspInit+0x30>)
 8002976:	f043 0302 	orr.w	r3, r3, #2
 800297a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_MspInit+0x30>)
 8002980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	58024400 	.word	0x58024400

0800299c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029a0:	e7fe      	b.n	80029a0 <NMI_Handler+0x4>

080029a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a6:	e7fe      	b.n	80029a6 <HardFault_Handler+0x4>

080029a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029ac:	e7fe      	b.n	80029ac <MemManage_Handler+0x4>

080029ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029b2:	e7fe      	b.n	80029b2 <BusFault_Handler+0x4>

080029b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b8:	e7fe      	b.n	80029b8 <UsageFault_Handler+0x4>

080029ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029e8:	f000 fb4e 	bl	8003088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <TIM2_IRQHandler+0x10>)
 80029f6:	f003 ffb6 	bl	8006966 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	240003a8 	.word	0x240003a8

08002a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
	return 1;
 8002a08:	2301      	movs	r3, #1
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <_kill>:

int _kill(int pid, int sig)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a1e:	f005 ff39 	bl	8008894 <__errno>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2216      	movs	r2, #22
 8002a26:	601a      	str	r2, [r3, #0]
	return -1;
 8002a28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_exit>:

void _exit (int status)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ffe7 	bl	8002a14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a46:	e7fe      	b.n	8002a46 <_exit+0x12>

08002a48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e00a      	b.n	8002a70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a5a:	f3af 8000 	nop.w
 8002a5e:	4601      	mov	r1, r0
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	60ba      	str	r2, [r7, #8]
 8002a66:	b2ca      	uxtb	r2, r1
 8002a68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	dbf0      	blt.n	8002a5a <_read+0x12>
	}

return len;
 8002a78:	687b      	ldr	r3, [r7, #4]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e009      	b.n	8002aa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	60ba      	str	r2, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fe69 	bl	8002774 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	dbf1      	blt.n	8002a94 <_write+0x12>
	}
	return len;
 8002ab0:	687b      	ldr	r3, [r7, #4]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_close>:

int _close(int file)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <_isatty>:

int _isatty(int file)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
	return 1;
 8002afa:	2301      	movs	r3, #1
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
	return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <_sbrk+0x5c>)
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <_sbrk+0x60>)
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <_sbrk+0x64>)
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <_sbrk+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d207      	bcs.n	8002b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b54:	f005 fe9e 	bl	8008894 <__errno>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	e009      	b.n	8002b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <_sbrk+0x64>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <_sbrk+0x64>)
 8002b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	24080000 	.word	0x24080000
 8002b84:	00000400 	.word	0x00000400
 8002b88:	240002d8 	.word	0x240002d8
 8002b8c:	240008a0 	.word	0x240008a0

08002b90 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b96:	f107 0310 	add.w	r3, r7, #16
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba4:	1d3b      	adds	r3, r7, #4
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	605a      	str	r2, [r3, #4]
 8002bac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bae:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <MX_TIM2_Init+0x98>)
 8002bb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8002bb6:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <MX_TIM2_Init+0x98>)
 8002bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <MX_TIM2_Init+0x98>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 240;
 8002bc4:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <MX_TIM2_Init+0x98>)
 8002bc6:	22f0      	movs	r2, #240	; 0xf0
 8002bc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bca:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <MX_TIM2_Init+0x98>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <MX_TIM2_Init+0x98>)
 8002bd2:	2280      	movs	r2, #128	; 0x80
 8002bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002bd6:	4814      	ldr	r0, [pc, #80]	; (8002c28 <MX_TIM2_Init+0x98>)
 8002bd8:	f003 fe6e 	bl	80068b8 <HAL_TIM_Base_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002be2:	f7ff febb 	bl	800295c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002bec:	f107 0310 	add.w	r3, r7, #16
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	480d      	ldr	r0, [pc, #52]	; (8002c28 <MX_TIM2_Init+0x98>)
 8002bf4:	f003 ffd6 	bl	8006ba4 <HAL_TIM_ConfigClockSource>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002bfe:	f7ff fead 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c0a:	1d3b      	adds	r3, r7, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4806      	ldr	r0, [pc, #24]	; (8002c28 <MX_TIM2_Init+0x98>)
 8002c10:	f004 fa26 	bl	8007060 <HAL_TIMEx_MasterConfigSynchronization>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002c1a:	f7ff fe9f 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c1e:	bf00      	nop
 8002c20:	3720      	adds	r7, #32
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	240003a8 	.word	0x240003a8

08002c2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d116      	bne.n	8002c6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c3e:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <HAL_TIM_Base_MspInit+0x48>)
 8002c40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c44:	4a0b      	ldr	r2, [pc, #44]	; (8002c74 <HAL_TIM_Base_MspInit+0x48>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c4e:	4b09      	ldr	r3, [pc, #36]	; (8002c74 <HAL_TIM_Base_MspInit+0x48>)
 8002c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	2100      	movs	r1, #0
 8002c60:	201c      	movs	r0, #28
 8002c62:	f000 fb50 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c66:	201c      	movs	r0, #28
 8002c68:	f000 fb67 	bl	800333a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	58024400 	.word	0x58024400

08002c78 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c7c:	4b22      	ldr	r3, [pc, #136]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002c7e:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <MX_USART3_UART_Init+0x94>)
 8002c80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c82:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c8a:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cb4:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cc0:	4811      	ldr	r0, [pc, #68]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002cc2:	f004 fa73 	bl	80071ac <HAL_UART_Init>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002ccc:	f7ff fe46 	bl	800295c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	480d      	ldr	r0, [pc, #52]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002cd4:	f005 fa56 	bl	8008184 <HAL_UARTEx_SetTxFifoThreshold>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002cde:	f7ff fe3d 	bl	800295c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4808      	ldr	r0, [pc, #32]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002ce6:	f005 fa8b 	bl	8008200 <HAL_UARTEx_SetRxFifoThreshold>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002cf0:	f7ff fe34 	bl	800295c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002cf4:	4804      	ldr	r0, [pc, #16]	; (8002d08 <MX_USART3_UART_Init+0x90>)
 8002cf6:	f005 fa0c 	bl	8008112 <HAL_UARTEx_DisableFifoMode>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002d00:	f7ff fe2c 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	240003f4 	.word	0x240003f4
 8002d0c:	40004800 	.word	0x40004800

08002d10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b0b8      	sub	sp, #224	; 0xe0
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d18:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	60da      	str	r2, [r3, #12]
 8002d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d28:	f107 0310 	add.w	r3, r7, #16
 8002d2c:	22bc      	movs	r2, #188	; 0xbc
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f005 fde1 	bl	80088f8 <memset>
  if(uartHandle->Instance==USART3)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a25      	ldr	r2, [pc, #148]	; (8002dd0 <HAL_UART_MspInit+0xc0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d142      	bne.n	8002dc6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002d40:	2302      	movs	r3, #2
 8002d42:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d4a:	f107 0310 	add.w	r3, r7, #16
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 fa50 	bl	80051f4 <HAL_RCCEx_PeriphCLKConfig>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d5a:	f7ff fdff 	bl	800295c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_UART_MspInit+0xc4>)
 8002d60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d64:	4a1b      	ldr	r2, [pc, #108]	; (8002dd4 <HAL_UART_MspInit+0xc4>)
 8002d66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d6e:	4b19      	ldr	r3, [pc, #100]	; (8002dd4 <HAL_UART_MspInit+0xc4>)
 8002d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d7c:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_UART_MspInit+0xc4>)
 8002d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d82:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <HAL_UART_MspInit+0xc4>)
 8002d84:	f043 0308 	orr.w	r3, r3, #8
 8002d88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d8c:	4b11      	ldr	r3, [pc, #68]	; (8002dd4 <HAL_UART_MspInit+0xc4>)
 8002d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002d9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	2302      	movs	r3, #2
 8002da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002db4:	2307      	movs	r3, #7
 8002db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4805      	ldr	r0, [pc, #20]	; (8002dd8 <HAL_UART_MspInit+0xc8>)
 8002dc2:	f000 feeb 	bl	8003b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002dc6:	bf00      	nop
 8002dc8:	37e0      	adds	r7, #224	; 0xe0
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40004800 	.word	0x40004800
 8002dd4:	58024400 	.word	0x58024400
 8002dd8:	58020c00 	.word	0x58020c00

08002ddc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002de0:	4b15      	ldr	r3, [pc, #84]	; (8002e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002de2:	4a16      	ldr	r2, [pc, #88]	; (8002e3c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002de4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002de8:	2209      	movs	r2, #9
 8002dea:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002dec:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002dee:	2202      	movs	r2, #2
 8002df0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002e04:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002e10:	4b09      	ldr	r3, [pc, #36]	; (8002e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e12:	2201      	movs	r2, #1
 8002e14:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002e22:	4805      	ldr	r0, [pc, #20]	; (8002e38 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002e24:	f001 f898 	bl	8003f58 <HAL_PCD_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002e2e:	f7ff fd95 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	24000484 	.word	0x24000484
 8002e3c:	40080000 	.word	0x40080000

08002e40 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b0b8      	sub	sp, #224	; 0xe0
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	22bc      	movs	r2, #188	; 0xbc
 8002e5e:	2100      	movs	r1, #0
 8002e60:	4618      	mov	r0, r3
 8002e62:	f005 fd49 	bl	80088f8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a36      	ldr	r2, [pc, #216]	; (8002f44 <HAL_PCD_MspInit+0x104>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d165      	bne.n	8002f3c <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002e70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e74:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002e76:	2301      	movs	r3, #1
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8002e7a:	2318      	movs	r3, #24
 8002e7c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8002e82:	2304      	movs	r3, #4
 8002e84:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002e86:	2302      	movs	r3, #2
 8002e88:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002e8a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e8e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002e94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e9c:	f107 0310 	add.w	r3, r7, #16
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f002 f9a7 	bl	80051f4 <HAL_RCCEx_PeriphCLKConfig>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002eac:	f7ff fd56 	bl	800295c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002eb0:	f001 f9f4 	bl	800429c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb4:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_PCD_MspInit+0x108>)
 8002eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eba:	4a23      	ldr	r2, [pc, #140]	; (8002f48 <HAL_PCD_MspInit+0x108>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_PCD_MspInit+0x108>)
 8002ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002ed2:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002ed6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	2302      	movs	r3, #2
 8002edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002eec:	230a      	movs	r3, #10
 8002eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4814      	ldr	r0, [pc, #80]	; (8002f4c <HAL_PCD_MspInit+0x10c>)
 8002efa:	f000 fe4f 	bl	8003b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f12:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f16:	4619      	mov	r1, r3
 8002f18:	480c      	ldr	r0, [pc, #48]	; (8002f4c <HAL_PCD_MspInit+0x10c>)
 8002f1a:	f000 fe3f 	bl	8003b9c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_PCD_MspInit+0x108>)
 8002f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f24:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <HAL_PCD_MspInit+0x108>)
 8002f26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_PCD_MspInit+0x108>)
 8002f30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	37e0      	adds	r7, #224	; 0xe0
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40080000 	.word	0x40080000
 8002f48:	58024400 	.word	0x58024400
 8002f4c:	58020000 	.word	0x58020000

08002f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f54:	f7fd fd54 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f58:	480c      	ldr	r0, [pc, #48]	; (8002f8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f5a:	490d      	ldr	r1, [pc, #52]	; (8002f90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f60:	e002      	b.n	8002f68 <LoopCopyDataInit>

08002f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f66:	3304      	adds	r3, #4

08002f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f6c:	d3f9      	bcc.n	8002f62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f70:	4c0a      	ldr	r4, [pc, #40]	; (8002f9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f74:	e001      	b.n	8002f7a <LoopFillZerobss>

08002f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f78:	3204      	adds	r2, #4

08002f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f7c:	d3fb      	bcc.n	8002f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f7e:	f005 fc8f 	bl	80088a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f82:	f7ff fc09 	bl	8002798 <main>
  bx  lr
 8002f86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f88:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002f8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f90:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 8002f94:	0800fb90 	.word	0x0800fb90
  ldr r2, =_sbss
 8002f98:	240002a4 	.word	0x240002a4
  ldr r4, =_ebss
 8002f9c:	240008a0 	.word	0x240008a0

08002fa0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa0:	e7fe      	b.n	8002fa0 <ADC3_IRQHandler>
	...

08002fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002faa:	2003      	movs	r0, #3
 8002fac:	f000 f9a0 	bl	80032f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fb0:	f001 ff4a 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_Init+0x68>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	4913      	ldr	r1, [pc, #76]	; (8003010 <HAL_Init+0x6c>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fcc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <HAL_Init+0x68>)
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <HAL_Init+0x6c>)
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe4:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <HAL_Init+0x70>)
 8002fe6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <HAL_Init+0x74>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f000 f814 	bl	800301c <HAL_InitTick>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e002      	b.n	8003004 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ffe:	f7ff fcb3 	bl	8002968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	58024400 	.word	0x58024400
 8003010:	0800d15c 	.word	0x0800d15c
 8003014:	24000004 	.word	0x24000004
 8003018:	24000000 	.word	0x24000000

0800301c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_InitTick+0x60>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e021      	b.n	8003074 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003030:	4b13      	ldr	r3, [pc, #76]	; (8003080 <HAL_InitTick+0x64>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <HAL_InitTick+0x60>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	4619      	mov	r1, r3
 800303a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800303e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f985 	bl	8003356 <HAL_SYSTICK_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e00e      	b.n	8003074 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b0f      	cmp	r3, #15
 800305a:	d80a      	bhi.n	8003072 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800305c:	2200      	movs	r2, #0
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	f000 f94f 	bl	8003306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003068:	4a06      	ldr	r2, [pc, #24]	; (8003084 <HAL_InitTick+0x68>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	2400000c 	.word	0x2400000c
 8003080:	24000000 	.word	0x24000000
 8003084:	24000008 	.word	0x24000008

08003088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_IncTick+0x20>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_IncTick+0x24>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4413      	add	r3, r2
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <HAL_IncTick+0x24>)
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	2400000c 	.word	0x2400000c
 80030ac:	2400088c 	.word	0x2400088c

080030b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return uwTick;
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <HAL_GetTick+0x14>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	2400088c 	.word	0x2400088c

080030c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7ff ffee 	bl	80030b0 <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d005      	beq.n	80030ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_Delay+0x44>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030ee:	bf00      	nop
 80030f0:	f7ff ffde 	bl	80030b0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d8f7      	bhi.n	80030f0 <HAL_Delay+0x28>
  {
  }
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	2400000c 	.word	0x2400000c

08003110 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_GetREVID+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	0c1b      	lsrs	r3, r3, #16
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	5c001000 	.word	0x5c001000

08003128 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003138:	4904      	ldr	r1, [pc, #16]	; (800314c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	58000400 	.word	0x58000400

08003150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <__NVIC_SetPriorityGrouping+0x40>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800316c:	4013      	ands	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <__NVIC_SetPriorityGrouping+0x44>)
 800317a:	4313      	orrs	r3, r2
 800317c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317e:	4a04      	ldr	r2, [pc, #16]	; (8003190 <__NVIC_SetPriorityGrouping+0x40>)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	60d3      	str	r3, [r2, #12]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00
 8003194:	05fa0000 	.word	0x05fa0000

08003198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800319c:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <__NVIC_GetPriorityGrouping+0x18>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	f003 0307 	and.w	r3, r3, #7
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	db0b      	blt.n	80031de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	f003 021f 	and.w	r2, r3, #31
 80031cc:	4907      	ldr	r1, [pc, #28]	; (80031ec <__NVIC_EnableIRQ+0x38>)
 80031ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	2001      	movs	r0, #1
 80031d6:	fa00 f202 	lsl.w	r2, r0, r2
 80031da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000e100 	.word	0xe000e100

080031f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003200:	2b00      	cmp	r3, #0
 8003202:	db0a      	blt.n	800321a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	490c      	ldr	r1, [pc, #48]	; (800323c <__NVIC_SetPriority+0x4c>)
 800320a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800320e:	0112      	lsls	r2, r2, #4
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	440b      	add	r3, r1
 8003214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003218:	e00a      	b.n	8003230 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4908      	ldr	r1, [pc, #32]	; (8003240 <__NVIC_SetPriority+0x50>)
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	3b04      	subs	r3, #4
 8003228:	0112      	lsls	r2, r2, #4
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	440b      	add	r3, r1
 800322e:	761a      	strb	r2, [r3, #24]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000e100 	.word	0xe000e100
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f1c3 0307 	rsb	r3, r3, #7
 800325e:	2b04      	cmp	r3, #4
 8003260:	bf28      	it	cs
 8003262:	2304      	movcs	r3, #4
 8003264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3304      	adds	r3, #4
 800326a:	2b06      	cmp	r3, #6
 800326c:	d902      	bls.n	8003274 <NVIC_EncodePriority+0x30>
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3b03      	subs	r3, #3
 8003272:	e000      	b.n	8003276 <NVIC_EncodePriority+0x32>
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	f04f 32ff 	mov.w	r2, #4294967295
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43da      	mvns	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	401a      	ands	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800328c:	f04f 31ff 	mov.w	r1, #4294967295
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43d9      	mvns	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800329c:	4313      	orrs	r3, r2
         );
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3724      	adds	r7, #36	; 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032bc:	d301      	bcc.n	80032c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032be:	2301      	movs	r3, #1
 80032c0:	e00f      	b.n	80032e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032c2:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <SysTick_Config+0x40>)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ca:	210f      	movs	r1, #15
 80032cc:	f04f 30ff 	mov.w	r0, #4294967295
 80032d0:	f7ff ff8e 	bl	80031f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <SysTick_Config+0x40>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032da:	4b04      	ldr	r3, [pc, #16]	; (80032ec <SysTick_Config+0x40>)
 80032dc:	2207      	movs	r2, #7
 80032de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	e000e010 	.word	0xe000e010

080032f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ff29 	bl	8003150 <__NVIC_SetPriorityGrouping>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	4603      	mov	r3, r0
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003314:	f7ff ff40 	bl	8003198 <__NVIC_GetPriorityGrouping>
 8003318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	6978      	ldr	r0, [r7, #20]
 8003320:	f7ff ff90 	bl	8003244 <NVIC_EncodePriority>
 8003324:	4602      	mov	r2, r0
 8003326:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff ff5f 	bl	80031f0 <__NVIC_SetPriority>
}
 8003332:	bf00      	nop
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	4603      	mov	r3, r0
 8003342:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff33 	bl	80031b4 <__NVIC_EnableIRQ>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffa4 	bl	80032ac <SysTick_Config>
 8003364:	4603      	mov	r3, r0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0c6      	b.n	8003510 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff f8be 	bl	800250c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2223      	movs	r2, #35	; 0x23
 8003394:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003396:	4b60      	ldr	r3, [pc, #384]	; (8003518 <HAL_ETH_Init+0x1a8>)
 8003398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800339c:	4a5e      	ldr	r2, [pc, #376]	; (8003518 <HAL_ETH_Init+0x1a8>)
 800339e:	f043 0302 	orr.w	r3, r3, #2
 80033a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033a6:	4b5c      	ldr	r3, [pc, #368]	; (8003518 <HAL_ETH_Init+0x1a8>)
 80033a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7a1b      	ldrb	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d103      	bne.n	80033c4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80033bc:	2000      	movs	r0, #0
 80033be:	f7ff feb3 	bl	8003128 <HAL_SYSCFG_ETHInterfaceSelect>
 80033c2:	e003      	b.n	80033cc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80033c4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80033c8:	f7ff feae 	bl	8003128 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e4:	f7ff fe64 	bl	80030b0 <HAL_GetTick>
 80033e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80033ea:	e00f      	b.n	800340c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80033ec:	f7ff fe60 	bl	80030b0 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80033fa:	d907      	bls.n	800340c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2204      	movs	r2, #4
 8003400:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	22e0      	movs	r2, #224	; 0xe0
 8003406:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e081      	b.n	8003510 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e6      	bne.n	80033ec <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fac0 	bl	80039a4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003424:	f001 fe8a 	bl	800513c <HAL_RCC_GetHCLKFreq>
 8003428:	4603      	mov	r3, r0
 800342a:	4a3c      	ldr	r2, [pc, #240]	; (800351c <HAL_ETH_Init+0x1ac>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	0c9a      	lsrs	r2, r3, #18
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3a01      	subs	r2, #1
 8003438:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fa13 	bl	8003868 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003458:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800345c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	22e0      	movs	r2, #224	; 0xe0
 8003474:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e04a      	b.n	8003510 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003482:	4413      	add	r3, r2
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4b26      	ldr	r3, [pc, #152]	; (8003520 <HAL_ETH_Init+0x1b0>)
 8003488:	4013      	ands	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6952      	ldr	r2, [r2, #20]
 800348e:	0052      	lsls	r2, r2, #1
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	6809      	ldr	r1, [r1, #0]
 8003494:	431a      	orrs	r2, r3
 8003496:	f241 1308 	movw	r3, #4360	; 0x1108
 800349a:	440b      	add	r3, r1
 800349c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fad8 	bl	8003a54 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fb1c 	bl	8003ae2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	3305      	adds	r3, #5
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	021a      	lsls	r2, r3, #8
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	3304      	adds	r3, #4
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	4619      	mov	r1, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	3303      	adds	r3, #3
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	061a      	lsls	r2, r3, #24
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	3302      	adds	r3, #2
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	3301      	adds	r3, #1
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80034e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80034f6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80034f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2210      	movs	r2, #16
 8003506:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2210      	movs	r2, #16
 800350c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	58024400 	.word	0x58024400
 800351c:	431bde83 	.word	0x431bde83
 8003520:	ffff8001 	.word	0xffff8001

08003524 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003536:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	791b      	ldrb	r3, [r3, #4]
 800353c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800353e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	7b1b      	ldrb	r3, [r3, #12]
 8003544:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003546:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	7b5b      	ldrb	r3, [r3, #13]
 800354c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800354e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	7b9b      	ldrb	r3, [r3, #14]
 8003554:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003556:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	7bdb      	ldrb	r3, [r3, #15]
 800355c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800355e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	7c12      	ldrb	r2, [r2, #16]
 8003564:	2a00      	cmp	r2, #0
 8003566:	d102      	bne.n	800356e <ETH_SetMACConfig+0x4a>
 8003568:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800356c:	e000      	b.n	8003570 <ETH_SetMACConfig+0x4c>
 800356e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003570:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	7c52      	ldrb	r2, [r2, #17]
 8003576:	2a00      	cmp	r2, #0
 8003578:	d102      	bne.n	8003580 <ETH_SetMACConfig+0x5c>
 800357a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800357e:	e000      	b.n	8003582 <ETH_SetMACConfig+0x5e>
 8003580:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003582:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	7c9b      	ldrb	r3, [r3, #18]
 8003588:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800358a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003590:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003596:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	7f1b      	ldrb	r3, [r3, #28]
 800359c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800359e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	7f5b      	ldrb	r3, [r3, #29]
 80035a4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80035a6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	7f92      	ldrb	r2, [r2, #30]
 80035ac:	2a00      	cmp	r2, #0
 80035ae:	d102      	bne.n	80035b6 <ETH_SetMACConfig+0x92>
 80035b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035b4:	e000      	b.n	80035b8 <ETH_SetMACConfig+0x94>
 80035b6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80035b8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	7fdb      	ldrb	r3, [r3, #31]
 80035be:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80035c0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80035c8:	2a00      	cmp	r2, #0
 80035ca:	d102      	bne.n	80035d2 <ETH_SetMACConfig+0xae>
 80035cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035d0:	e000      	b.n	80035d4 <ETH_SetMACConfig+0xb0>
 80035d2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80035d4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80035da:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035e2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80035e4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b56      	ldr	r3, [pc, #344]	; (8003750 <ETH_SetMACConfig+0x22c>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6812      	ldr	r2, [r2, #0]
 80035fc:	68f9      	ldr	r1, [r7, #12]
 80035fe:	430b      	orrs	r3, r1
 8003600:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003606:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800360e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8003610:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003618:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800361a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003622:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003624:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800362c:	2a00      	cmp	r2, #0
 800362e:	d102      	bne.n	8003636 <ETH_SetMACConfig+0x112>
 8003630:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003634:	e000      	b.n	8003638 <ETH_SetMACConfig+0x114>
 8003636:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003638:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	4b42      	ldr	r3, [pc, #264]	; (8003754 <ETH_SetMACConfig+0x230>)
 800364a:	4013      	ands	r3, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	68f9      	ldr	r1, [r7, #12]
 8003652:	430b      	orrs	r3, r1
 8003654:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800365c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	4b3a      	ldr	r3, [pc, #232]	; (8003758 <ETH_SetMACConfig+0x234>)
 800366e:	4013      	ands	r3, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	430b      	orrs	r3, r1
 8003678:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003680:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003686:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800368e:	2a00      	cmp	r2, #0
 8003690:	d101      	bne.n	8003696 <ETH_SetMACConfig+0x172>
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	e000      	b.n	8003698 <ETH_SetMACConfig+0x174>
 8003696:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003698:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036aa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80036ae:	4013      	ands	r3, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	68f9      	ldr	r1, [r7, #12]
 80036b6:	430b      	orrs	r3, r1
 80036b8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80036c0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80036c8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d6:	f023 0103 	bic.w	r1, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80036ee:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800370a:	2a00      	cmp	r2, #0
 800370c:	d101      	bne.n	8003712 <ETH_SetMACConfig+0x1ee>
 800370e:	2240      	movs	r2, #64	; 0x40
 8003710:	e000      	b.n	8003714 <ETH_SetMACConfig+0x1f0>
 8003712:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003714:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800371c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800371e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003726:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003734:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	430a      	orrs	r2, r1
 8003740:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	00048083 	.word	0x00048083
 8003754:	c0f88000 	.word	0xc0f88000
 8003758:	fffffef0 	.word	0xfffffef0

0800375c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4b38      	ldr	r3, [pc, #224]	; (8003854 <ETH_SetDMAConfig+0xf8>)
 8003772:	4013      	ands	r3, r2
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	6809      	ldr	r1, [r1, #0]
 800377c:	431a      	orrs	r2, r3
 800377e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003782:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	791b      	ldrb	r3, [r3, #4]
 8003788:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800378e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	7b1b      	ldrb	r3, [r3, #12]
 8003794:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	f241 0304 	movw	r3, #4100	; 0x1004
 80037a2:	4413      	add	r3, r2
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b2c      	ldr	r3, [pc, #176]	; (8003858 <ETH_SetDMAConfig+0xfc>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6811      	ldr	r1, [r2, #0]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	431a      	orrs	r2, r3
 80037b2:	f241 0304 	movw	r3, #4100	; 0x1004
 80037b6:	440b      	add	r3, r1
 80037b8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	7b5b      	ldrb	r3, [r3, #13]
 80037be:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <ETH_SetDMAConfig+0x100>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6811      	ldr	r1, [r2, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	431a      	orrs	r2, r3
 80037de:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80037e2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	7d1b      	ldrb	r3, [r3, #20]
 80037ec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80037ee:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	7f5b      	ldrb	r3, [r3, #29]
 80037f4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	f241 1304 	movw	r3, #4356	; 0x1104
 8003802:	4413      	add	r3, r2
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <ETH_SetDMAConfig+0x104>)
 8003808:	4013      	ands	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6811      	ldr	r1, [r2, #0]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	431a      	orrs	r2, r3
 8003812:	f241 1304 	movw	r3, #4356	; 0x1104
 8003816:	440b      	add	r3, r1
 8003818:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	7f1b      	ldrb	r3, [r3, #28]
 800381e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	f241 1308 	movw	r3, #4360	; 0x1108
 8003830:	4413      	add	r3, r2
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <ETH_SetDMAConfig+0x108>)
 8003836:	4013      	ands	r3, r2
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6811      	ldr	r1, [r2, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	431a      	orrs	r2, r3
 8003840:	f241 1308 	movw	r3, #4360	; 0x1108
 8003844:	440b      	add	r3, r1
 8003846:	601a      	str	r2, [r3, #0]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	ffff87fd 	.word	0xffff87fd
 8003858:	ffff2ffe 	.word	0xffff2ffe
 800385c:	fffec000 	.word	0xfffec000
 8003860:	ffc0efef 	.word	0xffc0efef
 8003864:	7fc0ffff 	.word	0x7fc0ffff

08003868 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b0a4      	sub	sp, #144	; 0x90
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003870:	2301      	movs	r3, #1
 8003872:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003876:	2300      	movs	r3, #0
 8003878:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800387a:	2300      	movs	r3, #0
 800387c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003892:	2301      	movs	r3, #1
 8003894:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003898:	2300      	movs	r3, #0
 800389a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80038a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038a8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80038ba:	2300      	movs	r3, #0
 80038bc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80038c0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80038c4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80038cc:	2300      	movs	r3, #0
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80038e2:	2300      	movs	r3, #0
 80038e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80038ea:	2300      	movs	r3, #0
 80038ec:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80038f4:	2300      	movs	r3, #0
 80038f6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003900:	2320      	movs	r3, #32
 8003902:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800390c:	2300      	movs	r3, #0
 800390e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8003912:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003916:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800391c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800391e:	2300      	movs	r3, #0
 8003920:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003924:	2302      	movs	r3, #2
 8003926:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800392a:	2300      	movs	r3, #0
 800392c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003930:	2300      	movs	r3, #0
 8003932:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003936:	2300      	movs	r3, #0
 8003938:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800393c:	2301      	movs	r3, #1
 800393e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003942:	2300      	movs	r3, #0
 8003944:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800394c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fde6 	bl	8003524 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003958:	2301      	movs	r3, #1
 800395a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800395c:	2301      	movs	r3, #1
 800395e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003960:	2300      	movs	r3, #0
 8003962:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003964:	2300      	movs	r3, #0
 8003966:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800396a:	2300      	movs	r3, #0
 800396c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800396e:	2300      	movs	r3, #0
 8003970:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003972:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003976:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003978:	2300      	movs	r3, #0
 800397a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800397c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003980:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003982:	2300      	movs	r3, #0
 8003984:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003988:	f44f 7306 	mov.w	r3, #536	; 0x218
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800398e:	f107 0308 	add.w	r3, r7, #8
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff fee1 	bl	800375c <ETH_SetDMAConfig>
}
 800399a:	bf00      	nop
 800399c:	3790      	adds	r7, #144	; 0x90
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80039be:	f001 fbbd 	bl	800513c <HAL_RCC_GetHCLKFreq>
 80039c2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4a1e      	ldr	r2, [pc, #120]	; (8003a40 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d908      	bls.n	80039de <ETH_MAC_MDIO_ClkConfig+0x3a>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d804      	bhi.n	80039de <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e027      	b.n	8003a2e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d908      	bls.n	80039f8 <ETH_MAC_MDIO_ClkConfig+0x54>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d204      	bcs.n	80039f8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	e01a      	b.n	8003a2e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d303      	bcc.n	8003a08 <ETH_MAC_MDIO_ClkConfig+0x64>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d911      	bls.n	8003a2c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	4a10      	ldr	r2, [pc, #64]	; (8003a4c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d908      	bls.n	8003a22 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4a0f      	ldr	r2, [pc, #60]	; (8003a50 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d804      	bhi.n	8003a22 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	e005      	b.n	8003a2e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	e000      	b.n	8003a2e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003a2c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003a38:	bf00      	nop
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	01312cff 	.word	0x01312cff
 8003a44:	02160ebf 	.word	0x02160ebf
 8003a48:	03938700 	.word	0x03938700
 8003a4c:	05f5e0ff 	.word	0x05f5e0ff
 8003a50:	08f0d17f 	.word	0x08f0d17f

08003a54 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	e01d      	b.n	8003a9e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68d9      	ldr	r1, [r3, #12]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	440b      	add	r3, r1
 8003a72:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	3206      	adds	r2, #6
 8003a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d9de      	bls.n	8003a62 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	f241 132c 	movw	r3, #4396	; 0x112c
 8003ab2:	4413      	add	r3, r2
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68d9      	ldr	r1, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	f241 1314 	movw	r3, #4372	; 0x1114
 8003ac4:	4413      	add	r3, r2
 8003ac6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003ad4:	601a      	str	r2, [r3, #0]
}
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	e024      	b.n	8003b3a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6919      	ldr	r1, [r3, #16]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4613      	mov	r3, r2
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	4413      	add	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	440b      	add	r3, r1
 8003b00:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2200      	movs	r2, #0
 8003b12:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2200      	movs	r2, #0
 8003b18:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2200      	movs	r2, #0
 8003b24:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003b26:	68ba      	ldr	r2, [r7, #8]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3310      	adds	r3, #16
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3301      	adds	r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d9d7      	bls.n	8003af0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	f241 1330 	movw	r3, #4400	; 0x1130
 8003b66:	4413      	add	r3, r2
 8003b68:	2203      	movs	r2, #3
 8003b6a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6919      	ldr	r1, [r3, #16]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	f241 131c 	movw	r3, #4380	; 0x111c
 8003b78:	4413      	add	r3, r2
 8003b7a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	f241 1328 	movw	r3, #4392	; 0x1128
 8003b8c:	4413      	add	r3, r2
 8003b8e:	6019      	str	r1, [r3, #0]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b089      	sub	sp, #36	; 0x24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003baa:	4b89      	ldr	r3, [pc, #548]	; (8003dd0 <HAL_GPIO_Init+0x234>)
 8003bac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bae:	e194      	b.n	8003eda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 8186 	beq.w	8003ed4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d00b      	beq.n	8003be8 <HAL_GPIO_Init+0x4c>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d007      	beq.n	8003be8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bdc:	2b11      	cmp	r3, #17
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b12      	cmp	r3, #18
 8003be6:	d130      	bne.n	8003c4a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c1e:	2201      	movs	r2, #1
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43db      	mvns	r3, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	f003 0201 	and.w	r2, r3, #1
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0xee>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b12      	cmp	r3, #18
 8003c88:	d123      	bne.n	8003cd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	08da      	lsrs	r2, r3, #3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3208      	adds	r2, #8
 8003c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	220f      	movs	r2, #15
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4013      	ands	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	08da      	lsrs	r2, r3, #3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3208      	adds	r2, #8
 8003ccc:	69b9      	ldr	r1, [r7, #24]
 8003cce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	2203      	movs	r2, #3
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0203 	and.w	r2, r3, #3
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 80e0 	beq.w	8003ed4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d14:	4b2f      	ldr	r3, [pc, #188]	; (8003dd4 <HAL_GPIO_Init+0x238>)
 8003d16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d1a:	4a2e      	ldr	r2, [pc, #184]	; (8003dd4 <HAL_GPIO_Init+0x238>)
 8003d1c:	f043 0302 	orr.w	r3, r3, #2
 8003d20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003d24:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <HAL_GPIO_Init+0x238>)
 8003d26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d32:	4a29      	ldr	r2, [pc, #164]	; (8003dd8 <HAL_GPIO_Init+0x23c>)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	3302      	adds	r3, #2
 8003d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	220f      	movs	r2, #15
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <HAL_GPIO_Init+0x240>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d052      	beq.n	8003e04 <HAL_GPIO_Init+0x268>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <HAL_GPIO_Init+0x244>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d031      	beq.n	8003dca <HAL_GPIO_Init+0x22e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <HAL_GPIO_Init+0x248>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d02b      	beq.n	8003dc6 <HAL_GPIO_Init+0x22a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <HAL_GPIO_Init+0x24c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d025      	beq.n	8003dc2 <HAL_GPIO_Init+0x226>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <HAL_GPIO_Init+0x250>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01f      	beq.n	8003dbe <HAL_GPIO_Init+0x222>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a1b      	ldr	r2, [pc, #108]	; (8003df0 <HAL_GPIO_Init+0x254>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d019      	beq.n	8003dba <HAL_GPIO_Init+0x21e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a1a      	ldr	r2, [pc, #104]	; (8003df4 <HAL_GPIO_Init+0x258>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d013      	beq.n	8003db6 <HAL_GPIO_Init+0x21a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <HAL_GPIO_Init+0x25c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d00d      	beq.n	8003db2 <HAL_GPIO_Init+0x216>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <HAL_GPIO_Init+0x260>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d007      	beq.n	8003dae <HAL_GPIO_Init+0x212>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <HAL_GPIO_Init+0x264>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d101      	bne.n	8003daa <HAL_GPIO_Init+0x20e>
 8003da6:	2309      	movs	r3, #9
 8003da8:	e02d      	b.n	8003e06 <HAL_GPIO_Init+0x26a>
 8003daa:	230a      	movs	r3, #10
 8003dac:	e02b      	b.n	8003e06 <HAL_GPIO_Init+0x26a>
 8003dae:	2308      	movs	r3, #8
 8003db0:	e029      	b.n	8003e06 <HAL_GPIO_Init+0x26a>
 8003db2:	2307      	movs	r3, #7
 8003db4:	e027      	b.n	8003e06 <HAL_GPIO_Init+0x26a>
 8003db6:	2306      	movs	r3, #6
 8003db8:	e025      	b.n	8003e06 <HAL_GPIO_Init+0x26a>
 8003dba:	2305      	movs	r3, #5
 8003dbc:	e023      	b.n	8003e06 <HAL_GPIO_Init+0x26a>
 8003dbe:	2304      	movs	r3, #4
 8003dc0:	e021      	b.n	8003e06 <HAL_GPIO_Init+0x26a>
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e01f      	b.n	8003e06 <HAL_GPIO_Init+0x26a>
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	e01d      	b.n	8003e06 <HAL_GPIO_Init+0x26a>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e01b      	b.n	8003e06 <HAL_GPIO_Init+0x26a>
 8003dce:	bf00      	nop
 8003dd0:	58000080 	.word	0x58000080
 8003dd4:	58024400 	.word	0x58024400
 8003dd8:	58000400 	.word	0x58000400
 8003ddc:	58020000 	.word	0x58020000
 8003de0:	58020400 	.word	0x58020400
 8003de4:	58020800 	.word	0x58020800
 8003de8:	58020c00 	.word	0x58020c00
 8003dec:	58021000 	.word	0x58021000
 8003df0:	58021400 	.word	0x58021400
 8003df4:	58021800 	.word	0x58021800
 8003df8:	58021c00 	.word	0x58021c00
 8003dfc:	58022000 	.word	0x58022000
 8003e00:	58022400 	.word	0x58022400
 8003e04:	2300      	movs	r3, #0
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	f002 0203 	and.w	r2, r2, #3
 8003e0c:	0092      	lsls	r2, r2, #2
 8003e0e:	4093      	lsls	r3, r2
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e16:	4938      	ldr	r1, [pc, #224]	; (8003ef8 <HAL_GPIO_Init+0x35c>)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	089b      	lsrs	r3, r3, #2
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	69ba      	ldr	r2, [r7, #24]
 8003e4c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003e9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f47f ae63 	bne.w	8003bb0 <HAL_GPIO_Init+0x14>
  }
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	3724      	adds	r7, #36	; 0x24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	58000400 	.word	0x58000400

08003efc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003f04:	4a08      	ldr	r2, [pc, #32]	; (8003f28 <HAL_HSEM_FastTake+0x2c>)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3320      	adds	r3, #32
 8003f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0e:	4a07      	ldr	r2, [pc, #28]	; (8003f2c <HAL_HSEM_FastTake+0x30>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d101      	bne.n	8003f18 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	e000      	b.n	8003f1a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	58026400 	.word	0x58026400
 8003f2c:	80000300 	.word	0x80000300

08003f30 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003f3a:	4906      	ldr	r1, [pc, #24]	; (8003f54 <HAL_HSEM_Release+0x24>)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	58026400 	.word	0x58026400

08003f58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5a:	b08f      	sub	sp, #60	; 0x3c
 8003f5c:	af0a      	add	r7, sp, #40	; 0x28
 8003f5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e116      	b.n	8004198 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d106      	bne.n	8003f8a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f7fe ff5b 	bl	8002e40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d102      	bne.n	8003fa4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f004 fa23 	bl	80083f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	687e      	ldr	r6, [r7, #4]
 8003fb6:	466d      	mov	r5, sp
 8003fb8:	f106 0410 	add.w	r4, r6, #16
 8003fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003fcc:	1d33      	adds	r3, r6, #4
 8003fce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003fd0:	6838      	ldr	r0, [r7, #0]
 8003fd2:	f004 f9a1 	bl	8008318 <USB_CoreInit>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2202      	movs	r2, #2
 8003fe0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e0d7      	b.n	8004198 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f004 fa11 	bl	8008416 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e04a      	b.n	8004090 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ffa:	7bfa      	ldrb	r2, [r7, #15]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	333d      	adds	r3, #61	; 0x3d
 800400a:	2201      	movs	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800400e:	7bfa      	ldrb	r2, [r7, #15]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	333c      	adds	r3, #60	; 0x3c
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004022:	7bfa      	ldrb	r2, [r7, #15]
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	b298      	uxth	r0, r3
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	3342      	adds	r3, #66	; 0x42
 8004036:	4602      	mov	r2, r0
 8004038:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	333f      	adds	r3, #63	; 0x3f
 800404a:	2200      	movs	r2, #0
 800404c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	3344      	adds	r3, #68	; 0x44
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004062:	7bfa      	ldrb	r2, [r7, #15]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	3348      	adds	r3, #72	; 0x48
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	3350      	adds	r3, #80	; 0x50
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	3301      	adds	r3, #1
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	7bfa      	ldrb	r2, [r7, #15]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	429a      	cmp	r2, r3
 8004098:	d3af      	bcc.n	8003ffa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800409a:	2300      	movs	r3, #0
 800409c:	73fb      	strb	r3, [r7, #15]
 800409e:	e044      	b.n	800412a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040a0:	7bfa      	ldrb	r2, [r7, #15]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040b6:	7bfa      	ldrb	r2, [r7, #15]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80040c8:	7bfa      	ldrb	r2, [r7, #15]
 80040ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040cc:	7bfa      	ldrb	r2, [r7, #15]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040e2:	7bfa      	ldrb	r2, [r7, #15]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040f8:	7bfa      	ldrb	r2, [r7, #15]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	1a9b      	subs	r3, r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	3301      	adds	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d3b5      	bcc.n	80040a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	603b      	str	r3, [r7, #0]
 800413a:	687e      	ldr	r6, [r7, #4]
 800413c:	466d      	mov	r5, sp
 800413e:	f106 0410 	add.w	r4, r6, #16
 8004142:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004144:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800414a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800414e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004152:	1d33      	adds	r3, r6, #4
 8004154:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004156:	6838      	ldr	r0, [r7, #0]
 8004158:	f004 f988 	bl	800846c <USB_DevInit>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2202      	movs	r2, #2
 8004166:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e014      	b.n	8004198 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	2b01      	cmp	r3, #1
 8004184:	d102      	bne.n	800418c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f80a 	bl	80041a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f004 fb2a 	bl	80087ea <USB_DevDisconnect>

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	10000003 	.word	0x10000003

080041e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80041f0:	4b29      	ldr	r3, [pc, #164]	; (8004298 <HAL_PWREx_ConfigSupply+0xb0>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	2b06      	cmp	r3, #6
 80041fa:	d00a      	beq.n	8004212 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80041fc:	4b26      	ldr	r3, [pc, #152]	; (8004298 <HAL_PWREx_ConfigSupply+0xb0>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d001      	beq.n	800420e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e040      	b.n	8004290 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	e03e      	b.n	8004290 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004212:	4b21      	ldr	r3, [pc, #132]	; (8004298 <HAL_PWREx_ConfigSupply+0xb0>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800421a:	491f      	ldr	r1, [pc, #124]	; (8004298 <HAL_PWREx_ConfigSupply+0xb0>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4313      	orrs	r3, r2
 8004220:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004222:	f7fe ff45 	bl	80030b0 <HAL_GetTick>
 8004226:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004228:	e009      	b.n	800423e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800422a:	f7fe ff41 	bl	80030b0 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004238:	d901      	bls.n	800423e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e028      	b.n	8004290 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800423e:	4b16      	ldr	r3, [pc, #88]	; (8004298 <HAL_PWREx_ConfigSupply+0xb0>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800424a:	d1ee      	bne.n	800422a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b1e      	cmp	r3, #30
 8004250:	d008      	beq.n	8004264 <HAL_PWREx_ConfigSupply+0x7c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b2e      	cmp	r3, #46	; 0x2e
 8004256:	d005      	beq.n	8004264 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b1d      	cmp	r3, #29
 800425c:	d002      	beq.n	8004264 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b2d      	cmp	r3, #45	; 0x2d
 8004262:	d114      	bne.n	800428e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004264:	f7fe ff24 	bl	80030b0 <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800426a:	e009      	b.n	8004280 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800426c:	f7fe ff20 	bl	80030b0 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800427a:	d901      	bls.n	8004280 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e007      	b.n	8004290 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_PWREx_ConfigSupply+0xb0>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428c:	d1ee      	bne.n	800426c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	58024800 	.word	0x58024800

0800429c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80042a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042aa:	60d3      	str	r3, [r2, #12]
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	58024800 	.word	0x58024800

080042bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	; 0x30
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e3ff      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 8087 	beq.w	80043ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042dc:	4b99      	ldr	r3, [pc, #612]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042e6:	4b97      	ldr	r3, [pc, #604]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80042ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d007      	beq.n	8004302 <HAL_RCC_OscConfig+0x46>
 80042f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f4:	2b18      	cmp	r3, #24
 80042f6:	d110      	bne.n	800431a <HAL_RCC_OscConfig+0x5e>
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d10b      	bne.n	800431a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004302:	4b90      	ldr	r3, [pc, #576]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d06c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x12c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d168      	bne.n	80043e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e3d9      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004322:	d106      	bne.n	8004332 <HAL_RCC_OscConfig+0x76>
 8004324:	4b87      	ldr	r3, [pc, #540]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a86      	ldr	r2, [pc, #536]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800432a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	e02e      	b.n	8004390 <HAL_RCC_OscConfig+0xd4>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x98>
 800433a:	4b82      	ldr	r3, [pc, #520]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a81      	ldr	r2, [pc, #516]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b7f      	ldr	r3, [pc, #508]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a7e      	ldr	r2, [pc, #504]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800434c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e01d      	b.n	8004390 <HAL_RCC_OscConfig+0xd4>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0xbc>
 800435e:	4b79      	ldr	r3, [pc, #484]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a78      	ldr	r2, [pc, #480]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a75      	ldr	r2, [pc, #468]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e00b      	b.n	8004390 <HAL_RCC_OscConfig+0xd4>
 8004378:	4b72      	ldr	r3, [pc, #456]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a71      	ldr	r2, [pc, #452]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800437e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4b6f      	ldr	r3, [pc, #444]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a6e      	ldr	r2, [pc, #440]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800438a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800438e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d013      	beq.n	80043c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7fe fe8a 	bl	80030b0 <HAL_GetTick>
 800439c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a0:	f7fe fe86 	bl	80030b0 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	; 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e38d      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043b2:	4b64      	ldr	r3, [pc, #400]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0xe4>
 80043be:	e014      	b.n	80043ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fe fe76 	bl	80030b0 <HAL_GetTick>
 80043c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fe fe72 	bl	80030b0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e379      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80043da:	4b5a      	ldr	r3, [pc, #360]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x10c>
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80ae 	beq.w	8004554 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f8:	4b52      	ldr	r3, [pc, #328]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004400:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004402:	4b50      	ldr	r3, [pc, #320]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <HAL_RCC_OscConfig+0x162>
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	2b18      	cmp	r3, #24
 8004412:	d13a      	bne.n	800448a <HAL_RCC_OscConfig+0x1ce>
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f003 0303 	and.w	r3, r3, #3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d135      	bne.n	800448a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800441e:	4b49      	ldr	r3, [pc, #292]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <HAL_RCC_OscConfig+0x17a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e34b      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004436:	f7fe fe6b 	bl	8003110 <HAL_GetREVID>
 800443a:	4603      	mov	r3, r0
 800443c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004440:	4293      	cmp	r3, r2
 8004442:	d817      	bhi.n	8004474 <HAL_RCC_OscConfig+0x1b8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d108      	bne.n	800445e <HAL_RCC_OscConfig+0x1a2>
 800444c:	4b3d      	ldr	r3, [pc, #244]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004454:	4a3b      	ldr	r2, [pc, #236]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800445a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800445c:	e07a      	b.n	8004554 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445e:	4b39      	ldr	r3, [pc, #228]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	031b      	lsls	r3, r3, #12
 800446c:	4935      	ldr	r1, [pc, #212]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800446e:	4313      	orrs	r3, r2
 8004470:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004472:	e06f      	b.n	8004554 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004474:	4b33      	ldr	r3, [pc, #204]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	4930      	ldr	r1, [pc, #192]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004488:	e064      	b.n	8004554 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d045      	beq.n	800451e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004492:	4b2c      	ldr	r3, [pc, #176]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 0219 	bic.w	r2, r3, #25
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	4929      	ldr	r1, [pc, #164]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fe fe04 	bl	80030b0 <HAL_GetTick>
 80044a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044ac:	f7fe fe00 	bl	80030b0 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e307      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044be:	4b21      	ldr	r3, [pc, #132]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ca:	f7fe fe21 	bl	8003110 <HAL_GetREVID>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d817      	bhi.n	8004508 <HAL_RCC_OscConfig+0x24c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d108      	bne.n	80044f2 <HAL_RCC_OscConfig+0x236>
 80044e0:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80044e8:	4a16      	ldr	r2, [pc, #88]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80044ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ee:	6053      	str	r3, [r2, #4]
 80044f0:	e030      	b.n	8004554 <HAL_RCC_OscConfig+0x298>
 80044f2:	4b14      	ldr	r3, [pc, #80]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	031b      	lsls	r3, r3, #12
 8004500:	4910      	ldr	r1, [pc, #64]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004502:	4313      	orrs	r3, r2
 8004504:	604b      	str	r3, [r1, #4]
 8004506:	e025      	b.n	8004554 <HAL_RCC_OscConfig+0x298>
 8004508:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	061b      	lsls	r3, r3, #24
 8004516:	490b      	ldr	r1, [pc, #44]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004518:	4313      	orrs	r3, r2
 800451a:	604b      	str	r3, [r1, #4]
 800451c:	e01a      	b.n	8004554 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a08      	ldr	r2, [pc, #32]	; (8004544 <HAL_RCC_OscConfig+0x288>)
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452a:	f7fe fdc1 	bl	80030b0 <HAL_GetTick>
 800452e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004530:	e00a      	b.n	8004548 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004532:	f7fe fdbd 	bl	80030b0 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d903      	bls.n	8004548 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e2c4      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
 8004544:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004548:	4ba4      	ldr	r3, [pc, #656]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1ee      	bne.n	8004532 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80a9 	beq.w	80046b4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004562:	4b9e      	ldr	r3, [pc, #632]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800456a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800456c:	4b9b      	ldr	r3, [pc, #620]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b08      	cmp	r3, #8
 8004576:	d007      	beq.n	8004588 <HAL_RCC_OscConfig+0x2cc>
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	2b18      	cmp	r3, #24
 800457c:	d13a      	bne.n	80045f4 <HAL_RCC_OscConfig+0x338>
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	2b01      	cmp	r3, #1
 8004586:	d135      	bne.n	80045f4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004588:	4b94      	ldr	r3, [pc, #592]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_OscConfig+0x2e4>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	2b80      	cmp	r3, #128	; 0x80
 800459a:	d001      	beq.n	80045a0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e296      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045a0:	f7fe fdb6 	bl	8003110 <HAL_GetREVID>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d817      	bhi.n	80045de <HAL_RCC_OscConfig+0x322>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d108      	bne.n	80045c8 <HAL_RCC_OscConfig+0x30c>
 80045b6:	4b89      	ldr	r3, [pc, #548]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80045be:	4a87      	ldr	r2, [pc, #540]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 80045c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045c6:	e075      	b.n	80046b4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045c8:	4b84      	ldr	r3, [pc, #528]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	069b      	lsls	r3, r3, #26
 80045d6:	4981      	ldr	r1, [pc, #516]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045dc:	e06a      	b.n	80046b4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045de:	4b7f      	ldr	r3, [pc, #508]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	061b      	lsls	r3, r3, #24
 80045ec:	497b      	ldr	r1, [pc, #492]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045f2:	e05f      	b.n	80046b4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d042      	beq.n	8004682 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045fc:	4b77      	ldr	r3, [pc, #476]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a76      	ldr	r2, [pc, #472]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 8004602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fe fd52 	bl	80030b0 <HAL_GetTick>
 800460c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004610:	f7fe fd4e 	bl	80030b0 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e255      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004622:	4b6e      	ldr	r3, [pc, #440]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800462e:	f7fe fd6f 	bl	8003110 <HAL_GetREVID>
 8004632:	4603      	mov	r3, r0
 8004634:	f241 0203 	movw	r2, #4099	; 0x1003
 8004638:	4293      	cmp	r3, r2
 800463a:	d817      	bhi.n	800466c <HAL_RCC_OscConfig+0x3b0>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	2b20      	cmp	r3, #32
 8004642:	d108      	bne.n	8004656 <HAL_RCC_OscConfig+0x39a>
 8004644:	4b65      	ldr	r3, [pc, #404]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800464c:	4a63      	ldr	r2, [pc, #396]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 800464e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004652:	6053      	str	r3, [r2, #4]
 8004654:	e02e      	b.n	80046b4 <HAL_RCC_OscConfig+0x3f8>
 8004656:	4b61      	ldr	r3, [pc, #388]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	069b      	lsls	r3, r3, #26
 8004664:	495d      	ldr	r1, [pc, #372]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 8004666:	4313      	orrs	r3, r2
 8004668:	604b      	str	r3, [r1, #4]
 800466a:	e023      	b.n	80046b4 <HAL_RCC_OscConfig+0x3f8>
 800466c:	4b5b      	ldr	r3, [pc, #364]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	061b      	lsls	r3, r3, #24
 800467a:	4958      	ldr	r1, [pc, #352]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 800467c:	4313      	orrs	r3, r2
 800467e:	60cb      	str	r3, [r1, #12]
 8004680:	e018      	b.n	80046b4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004682:	4b56      	ldr	r3, [pc, #344]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a55      	ldr	r2, [pc, #340]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 8004688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800468c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468e:	f7fe fd0f 	bl	80030b0 <HAL_GetTick>
 8004692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004696:	f7fe fd0b 	bl	80030b0 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e212      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80046a8:	4b4c      	ldr	r3, [pc, #304]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f0      	bne.n	8004696 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d036      	beq.n	800472e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d019      	beq.n	80046fc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c8:	4b44      	ldr	r3, [pc, #272]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 80046ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046cc:	4a43      	ldr	r2, [pc, #268]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d4:	f7fe fcec 	bl	80030b0 <HAL_GetTick>
 80046d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046dc:	f7fe fce8 	bl	80030b0 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e1ef      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046ee:	4b3b      	ldr	r3, [pc, #236]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 80046f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x420>
 80046fa:	e018      	b.n	800472e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fc:	4b37      	ldr	r3, [pc, #220]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 80046fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004700:	4a36      	ldr	r2, [pc, #216]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 8004702:	f023 0301 	bic.w	r3, r3, #1
 8004706:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004708:	f7fe fcd2 	bl	80030b0 <HAL_GetTick>
 800470c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004710:	f7fe fcce 	bl	80030b0 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e1d5      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004722:	4b2e      	ldr	r3, [pc, #184]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 8004724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b00      	cmp	r3, #0
 8004738:	d036      	beq.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d019      	beq.n	8004776 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004742:	4b26      	ldr	r3, [pc, #152]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a25      	ldr	r2, [pc, #148]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 8004748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800474c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800474e:	f7fe fcaf 	bl	80030b0 <HAL_GetTick>
 8004752:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004756:	f7fe fcab 	bl	80030b0 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e1b2      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004768:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCC_OscConfig+0x49a>
 8004774:	e018      	b.n	80047a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004776:	4b19      	ldr	r3, [pc, #100]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a18      	ldr	r2, [pc, #96]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 800477c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004780:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004782:	f7fe fc95 	bl	80030b0 <HAL_GetTick>
 8004786:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800478a:	f7fe fc91 	bl	80030b0 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e198      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800479c:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <HAL_RCC_OscConfig+0x520>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8085 	beq.w	80048c0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047b6:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <HAL_RCC_OscConfig+0x524>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a09      	ldr	r2, [pc, #36]	; (80047e0 <HAL_RCC_OscConfig+0x524>)
 80047bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047c2:	f7fe fc75 	bl	80030b0 <HAL_GetTick>
 80047c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047c8:	e00c      	b.n	80047e4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fe fc71 	bl	80030b0 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b64      	cmp	r3, #100	; 0x64
 80047d6:	d905      	bls.n	80047e4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e178      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
 80047dc:	58024400 	.word	0x58024400
 80047e0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047e4:	4b96      	ldr	r3, [pc, #600]	; (8004a40 <HAL_RCC_OscConfig+0x784>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0ec      	beq.n	80047ca <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d106      	bne.n	8004806 <HAL_RCC_OscConfig+0x54a>
 80047f8:	4b92      	ldr	r3, [pc, #584]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80047fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fc:	4a91      	ldr	r2, [pc, #580]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	6713      	str	r3, [r2, #112]	; 0x70
 8004804:	e02d      	b.n	8004862 <HAL_RCC_OscConfig+0x5a6>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10c      	bne.n	8004828 <HAL_RCC_OscConfig+0x56c>
 800480e:	4b8d      	ldr	r3, [pc, #564]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004812:	4a8c      	ldr	r2, [pc, #560]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004814:	f023 0301 	bic.w	r3, r3, #1
 8004818:	6713      	str	r3, [r2, #112]	; 0x70
 800481a:	4b8a      	ldr	r3, [pc, #552]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	4a89      	ldr	r2, [pc, #548]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004820:	f023 0304 	bic.w	r3, r3, #4
 8004824:	6713      	str	r3, [r2, #112]	; 0x70
 8004826:	e01c      	b.n	8004862 <HAL_RCC_OscConfig+0x5a6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b05      	cmp	r3, #5
 800482e:	d10c      	bne.n	800484a <HAL_RCC_OscConfig+0x58e>
 8004830:	4b84      	ldr	r3, [pc, #528]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	4a83      	ldr	r2, [pc, #524]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004836:	f043 0304 	orr.w	r3, r3, #4
 800483a:	6713      	str	r3, [r2, #112]	; 0x70
 800483c:	4b81      	ldr	r3, [pc, #516]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	4a80      	ldr	r2, [pc, #512]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	; 0x70
 8004848:	e00b      	b.n	8004862 <HAL_RCC_OscConfig+0x5a6>
 800484a:	4b7e      	ldr	r3, [pc, #504]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	4a7d      	ldr	r2, [pc, #500]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004850:	f023 0301 	bic.w	r3, r3, #1
 8004854:	6713      	str	r3, [r2, #112]	; 0x70
 8004856:	4b7b      	ldr	r3, [pc, #492]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485a:	4a7a      	ldr	r2, [pc, #488]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 800485c:	f023 0304 	bic.w	r3, r3, #4
 8004860:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d015      	beq.n	8004896 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486a:	f7fe fc21 	bl	80030b0 <HAL_GetTick>
 800486e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004870:	e00a      	b.n	8004888 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fe fc1d 	bl	80030b0 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e122      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004888:	4b6e      	ldr	r3, [pc, #440]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ee      	beq.n	8004872 <HAL_RCC_OscConfig+0x5b6>
 8004894:	e014      	b.n	80048c0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004896:	f7fe fc0b 	bl	80030b0 <HAL_GetTick>
 800489a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800489c:	e00a      	b.n	80048b4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800489e:	f7fe fc07 	bl	80030b0 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e10c      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048b4:	4b63      	ldr	r3, [pc, #396]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1ee      	bne.n	800489e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8101 	beq.w	8004acc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80048ca:	4b5e      	ldr	r3, [pc, #376]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048d2:	2b18      	cmp	r3, #24
 80048d4:	f000 80bc 	beq.w	8004a50 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	2b02      	cmp	r3, #2
 80048de:	f040 8095 	bne.w	8004a0c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e2:	4b58      	ldr	r3, [pc, #352]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a57      	ldr	r2, [pc, #348]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80048e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ee:	f7fe fbdf 	bl	80030b0 <HAL_GetTick>
 80048f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f6:	f7fe fbdb 	bl	80030b0 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e0e2      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004908:	4b4e      	ldr	r3, [pc, #312]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f0      	bne.n	80048f6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004914:	4b4b      	ldr	r3, [pc, #300]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004916:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004918:	4b4b      	ldr	r3, [pc, #300]	; (8004a48 <HAL_RCC_OscConfig+0x78c>)
 800491a:	4013      	ands	r3, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004924:	0112      	lsls	r2, r2, #4
 8004926:	430a      	orrs	r2, r1
 8004928:	4946      	ldr	r1, [pc, #280]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 800492a:	4313      	orrs	r3, r2
 800492c:	628b      	str	r3, [r1, #40]	; 0x28
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	3b01      	subs	r3, #1
 8004934:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493c:	3b01      	subs	r3, #1
 800493e:	025b      	lsls	r3, r3, #9
 8004940:	b29b      	uxth	r3, r3
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004948:	3b01      	subs	r3, #1
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	3b01      	subs	r3, #1
 8004958:	061b      	lsls	r3, r3, #24
 800495a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800495e:	4939      	ldr	r1, [pc, #228]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004960:	4313      	orrs	r3, r2
 8004962:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004964:	4b37      	ldr	r3, [pc, #220]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	4a36      	ldr	r2, [pc, #216]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004970:	4b34      	ldr	r3, [pc, #208]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004974:	4b35      	ldr	r3, [pc, #212]	; (8004a4c <HAL_RCC_OscConfig+0x790>)
 8004976:	4013      	ands	r3, r2
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800497c:	00d2      	lsls	r2, r2, #3
 800497e:	4931      	ldr	r1, [pc, #196]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004980:	4313      	orrs	r3, r2
 8004982:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004984:	4b2f      	ldr	r3, [pc, #188]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	f023 020c 	bic.w	r2, r3, #12
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	492c      	ldr	r1, [pc, #176]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004992:	4313      	orrs	r3, r2
 8004994:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004996:	4b2b      	ldr	r3, [pc, #172]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	f023 0202 	bic.w	r2, r3, #2
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	4928      	ldr	r1, [pc, #160]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80049a8:	4b26      	ldr	r3, [pc, #152]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	4a25      	ldr	r2, [pc, #148]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80049ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b4:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	4a22      	ldr	r2, [pc, #136]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80049ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049c0:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	4a1f      	ldr	r2, [pc, #124]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80049c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80049cc:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	4a1c      	ldr	r2, [pc, #112]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049d8:	4b1a      	ldr	r3, [pc, #104]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a19      	ldr	r2, [pc, #100]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 80049de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fe fb64 	bl	80030b0 <HAL_GetTick>
 80049e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ec:	f7fe fb60 	bl	80030b0 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e067      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049fe:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0x730>
 8004a0a:	e05f      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0c      	ldr	r2, [pc, #48]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fe fb4a 	bl	80030b0 <HAL_GetTick>
 8004a1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fe fb46 	bl	80030b0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e04d      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a32:	4b04      	ldr	r3, [pc, #16]	; (8004a44 <HAL_RCC_OscConfig+0x788>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x764>
 8004a3e:	e045      	b.n	8004acc <HAL_RCC_OscConfig+0x810>
 8004a40:	58024800 	.word	0x58024800
 8004a44:	58024400 	.word	0x58024400
 8004a48:	fffffc0c 	.word	0xfffffc0c
 8004a4c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a50:	4b21      	ldr	r3, [pc, #132]	; (8004ad8 <HAL_RCC_OscConfig+0x81c>)
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a56:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <HAL_RCC_OscConfig+0x81c>)
 8004a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d031      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f003 0203 	and.w	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d12a      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d122      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d11a      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	0a5b      	lsrs	r3, r3, #9
 8004a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d111      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	0c1b      	lsrs	r3, r3, #16
 8004aa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d108      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	0e1b      	lsrs	r3, r3, #24
 8004aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d001      	beq.n	8004acc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3730      	adds	r7, #48	; 0x30
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	58024400 	.word	0x58024400

08004adc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e19c      	b.n	8004e2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004af0:	4b8a      	ldr	r3, [pc, #552]	; (8004d1c <HAL_RCC_ClockConfig+0x240>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d910      	bls.n	8004b20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afe:	4b87      	ldr	r3, [pc, #540]	; (8004d1c <HAL_RCC_ClockConfig+0x240>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 020f 	bic.w	r2, r3, #15
 8004b06:	4985      	ldr	r1, [pc, #532]	; (8004d1c <HAL_RCC_ClockConfig+0x240>)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0e:	4b83      	ldr	r3, [pc, #524]	; (8004d1c <HAL_RCC_ClockConfig+0x240>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e184      	b.n	8004e2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d010      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	4b7b      	ldr	r3, [pc, #492]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d908      	bls.n	8004b4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b3c:	4b78      	ldr	r3, [pc, #480]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	4975      	ldr	r1, [pc, #468]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d010      	beq.n	8004b7c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	4b70      	ldr	r3, [pc, #448]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d908      	bls.n	8004b7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b6a:	4b6d      	ldr	r3, [pc, #436]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	496a      	ldr	r1, [pc, #424]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d010      	beq.n	8004baa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699a      	ldr	r2, [r3, #24]
 8004b8c:	4b64      	ldr	r3, [pc, #400]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d908      	bls.n	8004baa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004b98:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	495e      	ldr	r1, [pc, #376]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d010      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	4b59      	ldr	r3, [pc, #356]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d908      	bls.n	8004bd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004bc6:	4b56      	ldr	r3, [pc, #344]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	4953      	ldr	r1, [pc, #332]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d010      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	4b4d      	ldr	r3, [pc, #308]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d908      	bls.n	8004c06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf4:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	f023 020f 	bic.w	r2, r3, #15
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	4947      	ldr	r1, [pc, #284]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d055      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c12:	4b43      	ldr	r3, [pc, #268]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	4940      	ldr	r1, [pc, #256]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d107      	bne.n	8004c3c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c2c:	4b3c      	ldr	r3, [pc, #240]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d121      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0f6      	b.n	8004e2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d107      	bne.n	8004c54 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c44:	4b36      	ldr	r3, [pc, #216]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d115      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0ea      	b.n	8004e2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d107      	bne.n	8004c6c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c5c:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d109      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0de      	b.n	8004e2a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004c6c:	4b2c      	ldr	r3, [pc, #176]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0d6      	b.n	8004e2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c7c:	4b28      	ldr	r3, [pc, #160]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f023 0207 	bic.w	r2, r3, #7
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	4925      	ldr	r1, [pc, #148]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8e:	f7fe fa0f 	bl	80030b0 <HAL_GetTick>
 8004c92:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c94:	e00a      	b.n	8004cac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c96:	f7fe fa0b 	bl	80030b0 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0be      	b.n	8004e2a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cac:	4b1c      	ldr	r3, [pc, #112]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d1eb      	bne.n	8004c96 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d010      	beq.n	8004cec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d208      	bcs.n	8004cec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cda:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	f023 020f 	bic.w	r2, r3, #15
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	490e      	ldr	r1, [pc, #56]	; (8004d20 <HAL_RCC_ClockConfig+0x244>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cec:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCC_ClockConfig+0x240>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d214      	bcs.n	8004d24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <HAL_RCC_ClockConfig+0x240>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 020f 	bic.w	r2, r3, #15
 8004d02:	4906      	ldr	r1, [pc, #24]	; (8004d1c <HAL_RCC_ClockConfig+0x240>)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <HAL_RCC_ClockConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d005      	beq.n	8004d24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e086      	b.n	8004e2a <HAL_RCC_ClockConfig+0x34e>
 8004d1c:	52002000 	.word	0x52002000
 8004d20:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d010      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	691a      	ldr	r2, [r3, #16]
 8004d34:	4b3f      	ldr	r3, [pc, #252]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d208      	bcs.n	8004d52 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d40:	4b3c      	ldr	r3, [pc, #240]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	4939      	ldr	r1, [pc, #228]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d010      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	4b34      	ldr	r3, [pc, #208]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d208      	bcs.n	8004d80 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d6e:	4b31      	ldr	r3, [pc, #196]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	492e      	ldr	r1, [pc, #184]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d010      	beq.n	8004dae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699a      	ldr	r2, [r3, #24]
 8004d90:	4b28      	ldr	r3, [pc, #160]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d208      	bcs.n	8004dae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d9c:	4b25      	ldr	r3, [pc, #148]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	4922      	ldr	r1, [pc, #136]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d010      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69da      	ldr	r2, [r3, #28]
 8004dbe:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d208      	bcs.n	8004ddc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004dca:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	4917      	ldr	r1, [pc, #92]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ddc:	f000 f834 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 8004de0:	4602      	mov	r2, r0
 8004de2:	4b14      	ldr	r3, [pc, #80]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	0a1b      	lsrs	r3, r3, #8
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	4912      	ldr	r1, [pc, #72]	; (8004e38 <HAL_RCC_ClockConfig+0x35c>)
 8004dee:	5ccb      	ldrb	r3, [r1, r3]
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
 8004df8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004dfa:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <HAL_RCC_ClockConfig+0x358>)
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	4a0d      	ldr	r2, [pc, #52]	; (8004e38 <HAL_RCC_ClockConfig+0x35c>)
 8004e04:	5cd3      	ldrb	r3, [r2, r3]
 8004e06:	f003 031f 	and.w	r3, r3, #31
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e10:	4a0a      	ldr	r2, [pc, #40]	; (8004e3c <HAL_RCC_ClockConfig+0x360>)
 8004e12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e14:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <HAL_RCC_ClockConfig+0x364>)
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004e1a:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <HAL_RCC_ClockConfig+0x368>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fe f8fc 	bl	800301c <HAL_InitTick>
 8004e24:	4603      	mov	r3, r0
 8004e26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	58024400 	.word	0x58024400
 8004e38:	0800d15c 	.word	0x0800d15c
 8004e3c:	24000004 	.word	0x24000004
 8004e40:	24000000 	.word	0x24000000
 8004e44:	24000008 	.word	0x24000008

08004e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b089      	sub	sp, #36	; 0x24
 8004e4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e4e:	4bb3      	ldr	r3, [pc, #716]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e56:	2b18      	cmp	r3, #24
 8004e58:	f200 8155 	bhi.w	8005106 <HAL_RCC_GetSysClockFreq+0x2be>
 8004e5c:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e62:	bf00      	nop
 8004e64:	08004ec9 	.word	0x08004ec9
 8004e68:	08005107 	.word	0x08005107
 8004e6c:	08005107 	.word	0x08005107
 8004e70:	08005107 	.word	0x08005107
 8004e74:	08005107 	.word	0x08005107
 8004e78:	08005107 	.word	0x08005107
 8004e7c:	08005107 	.word	0x08005107
 8004e80:	08005107 	.word	0x08005107
 8004e84:	08004eef 	.word	0x08004eef
 8004e88:	08005107 	.word	0x08005107
 8004e8c:	08005107 	.word	0x08005107
 8004e90:	08005107 	.word	0x08005107
 8004e94:	08005107 	.word	0x08005107
 8004e98:	08005107 	.word	0x08005107
 8004e9c:	08005107 	.word	0x08005107
 8004ea0:	08005107 	.word	0x08005107
 8004ea4:	08004ef5 	.word	0x08004ef5
 8004ea8:	08005107 	.word	0x08005107
 8004eac:	08005107 	.word	0x08005107
 8004eb0:	08005107 	.word	0x08005107
 8004eb4:	08005107 	.word	0x08005107
 8004eb8:	08005107 	.word	0x08005107
 8004ebc:	08005107 	.word	0x08005107
 8004ec0:	08005107 	.word	0x08005107
 8004ec4:	08004efb 	.word	0x08004efb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ec8:	4b94      	ldr	r3, [pc, #592]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0320 	and.w	r3, r3, #32
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d009      	beq.n	8004ee8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ed4:	4b91      	ldr	r3, [pc, #580]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	08db      	lsrs	r3, r3, #3
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	4a90      	ldr	r2, [pc, #576]	; (8005120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004ee6:	e111      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004ee8:	4b8d      	ldr	r3, [pc, #564]	; (8005120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004eea:	61bb      	str	r3, [r7, #24]
    break;
 8004eec:	e10e      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004eee:	4b8d      	ldr	r3, [pc, #564]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004ef0:	61bb      	str	r3, [r7, #24]
    break;
 8004ef2:	e10b      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004ef4:	4b8c      	ldr	r3, [pc, #560]	; (8005128 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004ef6:	61bb      	str	r3, [r7, #24]
    break;
 8004ef8:	e108      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004efa:	4b88      	ldr	r3, [pc, #544]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004f04:	4b85      	ldr	r3, [pc, #532]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f0e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f10:	4b82      	ldr	r3, [pc, #520]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004f1a:	4b80      	ldr	r3, [pc, #512]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1e:	08db      	lsrs	r3, r3, #3
 8004f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	fb02 f303 	mul.w	r3, r2, r3
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f32:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80e1 	beq.w	8005100 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	f000 8083 	beq.w	800504c <HAL_RCC_GetSysClockFreq+0x204>
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	f200 80a1 	bhi.w	8005090 <HAL_RCC_GetSysClockFreq+0x248>
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x114>
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d056      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004f5a:	e099      	b.n	8005090 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f5c:	4b6f      	ldr	r3, [pc, #444]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d02d      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004f68:	4b6c      	ldr	r3, [pc, #432]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	08db      	lsrs	r3, r3, #3
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	4a6b      	ldr	r2, [pc, #428]	; (8005120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f74:	fa22 f303 	lsr.w	r3, r2, r3
 8004f78:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	ee07 3a90 	vmov	s15, r3
 8004f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	ee07 3a90 	vmov	s15, r3
 8004f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f92:	4b62      	ldr	r3, [pc, #392]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9a:	ee07 3a90 	vmov	s15, r3
 8004f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fa6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800512c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004fc2:	e087      	b.n	80050d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005130 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fd6:	4b51      	ldr	r3, [pc, #324]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800512c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005006:	e065      	b.n	80050d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	ee07 3a90 	vmov	s15, r3
 800500e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005012:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005134 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501a:	4b40      	ldr	r3, [pc, #256]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005022:	ee07 3a90 	vmov	s15, r3
 8005026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502a:	ed97 6a02 	vldr	s12, [r7, #8]
 800502e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800512c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800503e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800504a:	e043      	b.n	80050d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005056:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005138 <HAL_RCC_GetSysClockFreq+0x2f0>
 800505a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800505e:	4b2f      	ldr	r3, [pc, #188]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005072:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800512c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800507e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800508e:	e021      	b.n	80050d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800509a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005134 <HAL_RCC_GetSysClockFreq+0x2ec>
 800509e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050a2:	4b1e      	ldr	r3, [pc, #120]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800512c <HAL_RCC_GetSysClockFreq+0x2e4>
 80050ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80050d4:	4b11      	ldr	r3, [pc, #68]	; (800511c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	0a5b      	lsrs	r3, r3, #9
 80050da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050de:	3301      	adds	r3, #1
 80050e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	ee07 3a90 	vmov	s15, r3
 80050e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80050ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80050f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050f8:	ee17 3a90 	vmov	r3, s15
 80050fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80050fe:	e005      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	61bb      	str	r3, [r7, #24]
    break;
 8005104:	e002      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005106:	4b07      	ldr	r3, [pc, #28]	; (8005124 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005108:	61bb      	str	r3, [r7, #24]
    break;
 800510a:	bf00      	nop
  }

  return sysclockfreq;
 800510c:	69bb      	ldr	r3, [r7, #24]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3724      	adds	r7, #36	; 0x24
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	58024400 	.word	0x58024400
 8005120:	03d09000 	.word	0x03d09000
 8005124:	003d0900 	.word	0x003d0900
 8005128:	007a1200 	.word	0x007a1200
 800512c:	46000000 	.word	0x46000000
 8005130:	4c742400 	.word	0x4c742400
 8005134:	4a742400 	.word	0x4a742400
 8005138:	4af42400 	.word	0x4af42400

0800513c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005142:	f7ff fe81 	bl	8004e48 <HAL_RCC_GetSysClockFreq>
 8005146:	4602      	mov	r2, r0
 8005148:	4b10      	ldr	r3, [pc, #64]	; (800518c <HAL_RCC_GetHCLKFreq+0x50>)
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	0a1b      	lsrs	r3, r3, #8
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	490f      	ldr	r1, [pc, #60]	; (8005190 <HAL_RCC_GetHCLKFreq+0x54>)
 8005154:	5ccb      	ldrb	r3, [r1, r3]
 8005156:	f003 031f 	and.w	r3, r3, #31
 800515a:	fa22 f303 	lsr.w	r3, r2, r3
 800515e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005160:	4b0a      	ldr	r3, [pc, #40]	; (800518c <HAL_RCC_GetHCLKFreq+0x50>)
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	4a09      	ldr	r2, [pc, #36]	; (8005190 <HAL_RCC_GetHCLKFreq+0x54>)
 800516a:	5cd3      	ldrb	r3, [r2, r3]
 800516c:	f003 031f 	and.w	r3, r3, #31
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	fa22 f303 	lsr.w	r3, r2, r3
 8005176:	4a07      	ldr	r2, [pc, #28]	; (8005194 <HAL_RCC_GetHCLKFreq+0x58>)
 8005178:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800517a:	4a07      	ldr	r2, [pc, #28]	; (8005198 <HAL_RCC_GetHCLKFreq+0x5c>)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005180:	4b04      	ldr	r3, [pc, #16]	; (8005194 <HAL_RCC_GetHCLKFreq+0x58>)
 8005182:	681b      	ldr	r3, [r3, #0]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	58024400 	.word	0x58024400
 8005190:	0800d15c 	.word	0x0800d15c
 8005194:	24000004 	.word	0x24000004
 8005198:	24000000 	.word	0x24000000

0800519c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051a0:	f7ff ffcc 	bl	800513c <HAL_RCC_GetHCLKFreq>
 80051a4:	4602      	mov	r2, r0
 80051a6:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051a8:	69db      	ldr	r3, [r3, #28]
 80051aa:	091b      	lsrs	r3, r3, #4
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	4904      	ldr	r1, [pc, #16]	; (80051c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051b2:	5ccb      	ldrb	r3, [r1, r3]
 80051b4:	f003 031f 	and.w	r3, r3, #31
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80051bc:	4618      	mov	r0, r3
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	58024400 	.word	0x58024400
 80051c4:	0800d15c 	.word	0x0800d15c

080051c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80051cc:	f7ff ffb6 	bl	800513c <HAL_RCC_GetHCLKFreq>
 80051d0:	4602      	mov	r2, r0
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	0a1b      	lsrs	r3, r3, #8
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	4904      	ldr	r1, [pc, #16]	; (80051f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051de:	5ccb      	ldrb	r3, [r1, r3]
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	58024400 	.word	0x58024400
 80051f0:	0800d15c 	.word	0x0800d15c

080051f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051fc:	2300      	movs	r3, #0
 80051fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005200:	2300      	movs	r3, #0
 8005202:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d03f      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005214:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005218:	d02a      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800521a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800521e:	d824      	bhi.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005224:	d018      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800522a:	d81e      	bhi.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005234:	d007      	beq.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005236:	e018      	b.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005238:	4bab      	ldr	r3, [pc, #684]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	4aaa      	ldr	r2, [pc, #680]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800523e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005244:	e015      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3304      	adds	r3, #4
 800524a:	2102      	movs	r1, #2
 800524c:	4618      	mov	r0, r3
 800524e:	f001 f9cf 	bl	80065f0 <RCCEx_PLL2_Config>
 8005252:	4603      	mov	r3, r0
 8005254:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005256:	e00c      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3324      	adds	r3, #36	; 0x24
 800525c:	2102      	movs	r1, #2
 800525e:	4618      	mov	r0, r3
 8005260:	f001 fa78 	bl	8006754 <RCCEx_PLL3_Config>
 8005264:	4603      	mov	r3, r0
 8005266:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005268:	e003      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	75fb      	strb	r3, [r7, #23]
      break;
 800526e:	e000      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005272:	7dfb      	ldrb	r3, [r7, #23]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d109      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005278:	4b9b      	ldr	r3, [pc, #620]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800527a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005284:	4998      	ldr	r1, [pc, #608]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005286:	4313      	orrs	r3, r2
 8005288:	650b      	str	r3, [r1, #80]	; 0x50
 800528a:	e001      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005298:	2b00      	cmp	r3, #0
 800529a:	d03d      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d826      	bhi.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80052a4:	a201      	add	r2, pc, #4	; (adr r2, 80052ac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052c1 	.word	0x080052c1
 80052b0:	080052cf 	.word	0x080052cf
 80052b4:	080052e1 	.word	0x080052e1
 80052b8:	080052f9 	.word	0x080052f9
 80052bc:	080052f9 	.word	0x080052f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c0:	4b89      	ldr	r3, [pc, #548]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	4a88      	ldr	r2, [pc, #544]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80052c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052cc:	e015      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3304      	adds	r3, #4
 80052d2:	2100      	movs	r1, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f001 f98b 	bl	80065f0 <RCCEx_PLL2_Config>
 80052da:	4603      	mov	r3, r0
 80052dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052de:	e00c      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3324      	adds	r3, #36	; 0x24
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f001 fa34 	bl	8006754 <RCCEx_PLL3_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80052f0:	e003      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	75fb      	strb	r3, [r7, #23]
      break;
 80052f6:	e000      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80052f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052fa:	7dfb      	ldrb	r3, [r7, #23]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d109      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005300:	4b79      	ldr	r3, [pc, #484]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005304:	f023 0207 	bic.w	r2, r3, #7
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530c:	4976      	ldr	r1, [pc, #472]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800530e:	4313      	orrs	r3, r2
 8005310:	650b      	str	r3, [r1, #80]	; 0x50
 8005312:	e001      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005320:	2b00      	cmp	r3, #0
 8005322:	d042      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532c:	d02b      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800532e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005332:	d825      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005334:	2bc0      	cmp	r3, #192	; 0xc0
 8005336:	d028      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005338:	2bc0      	cmp	r3, #192	; 0xc0
 800533a:	d821      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800533c:	2b80      	cmp	r3, #128	; 0x80
 800533e:	d016      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005340:	2b80      	cmp	r3, #128	; 0x80
 8005342:	d81d      	bhi.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005348:	2b40      	cmp	r3, #64	; 0x40
 800534a:	d007      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800534c:	e018      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800534e:	4b66      	ldr	r3, [pc, #408]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	4a65      	ldr	r2, [pc, #404]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005358:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800535a:	e017      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3304      	adds	r3, #4
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f001 f944 	bl	80065f0 <RCCEx_PLL2_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800536c:	e00e      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	3324      	adds	r3, #36	; 0x24
 8005372:	2100      	movs	r1, #0
 8005374:	4618      	mov	r0, r3
 8005376:	f001 f9ed 	bl	8006754 <RCCEx_PLL3_Config>
 800537a:	4603      	mov	r3, r0
 800537c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800537e:	e005      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	75fb      	strb	r3, [r7, #23]
      break;
 8005384:	e002      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005386:	bf00      	nop
 8005388:	e000      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800538a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005392:	4b55      	ldr	r3, [pc, #340]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005396:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539e:	4952      	ldr	r1, [pc, #328]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	650b      	str	r3, [r1, #80]	; 0x50
 80053a4:	e001      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
 80053a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d049      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053c0:	d030      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80053c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053c6:	d82a      	bhi.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80053c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053cc:	d02c      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80053ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053d2:	d824      	bhi.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80053d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053d8:	d018      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80053da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053de:	d81e      	bhi.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d003      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80053e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053e8:	d007      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x206>
 80053ea:	e018      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ec:	4b3e      	ldr	r3, [pc, #248]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	4a3d      	ldr	r2, [pc, #244]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80053f8:	e017      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3304      	adds	r3, #4
 80053fe:	2100      	movs	r1, #0
 8005400:	4618      	mov	r0, r3
 8005402:	f001 f8f5 	bl	80065f0 <RCCEx_PLL2_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800540a:	e00e      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3324      	adds	r3, #36	; 0x24
 8005410:	2100      	movs	r1, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f001 f99e 	bl	8006754 <RCCEx_PLL3_Config>
 8005418:	4603      	mov	r3, r0
 800541a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800541c:	e005      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	75fb      	strb	r3, [r7, #23]
      break;
 8005422:	e002      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005424:	bf00      	nop
 8005426:	e000      	b.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800542a:	7dfb      	ldrb	r3, [r7, #23]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10a      	bne.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005430:	4b2d      	ldr	r3, [pc, #180]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005434:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800543e:	492a      	ldr	r1, [pc, #168]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005440:	4313      	orrs	r3, r2
 8005442:	658b      	str	r3, [r1, #88]	; 0x58
 8005444:	e001      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005446:	7dfb      	ldrb	r3, [r7, #23]
 8005448:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005452:	2b00      	cmp	r3, #0
 8005454:	d04c      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800545c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005460:	d030      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005462:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005466:	d82a      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005468:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800546c:	d02c      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800546e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005472:	d824      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005474:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005478:	d018      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800547a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800547e:	d81e      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005488:	d007      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800548a:	e018      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800548c:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005496:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005498:	e017      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3304      	adds	r3, #4
 800549e:	2100      	movs	r1, #0
 80054a0:	4618      	mov	r0, r3
 80054a2:	f001 f8a5 	bl	80065f0 <RCCEx_PLL2_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80054aa:	e00e      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3324      	adds	r3, #36	; 0x24
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f001 f94e 	bl	8006754 <RCCEx_PLL3_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80054bc:	e005      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	75fb      	strb	r3, [r7, #23]
      break;
 80054c2:	e002      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80054c4:	bf00      	nop
 80054c6:	e000      	b.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80054c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054ca:	7dfb      	ldrb	r3, [r7, #23]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10d      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80054de:	4902      	ldr	r1, [pc, #8]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	658b      	str	r3, [r1, #88]	; 0x58
 80054e4:	e004      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80054e6:	bf00      	nop
 80054e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
 80054ee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d032      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005500:	2b30      	cmp	r3, #48	; 0x30
 8005502:	d01c      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005504:	2b30      	cmp	r3, #48	; 0x30
 8005506:	d817      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005508:	2b20      	cmp	r3, #32
 800550a:	d00c      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800550c:	2b20      	cmp	r3, #32
 800550e:	d813      	bhi.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005510:	2b00      	cmp	r3, #0
 8005512:	d016      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005514:	2b10      	cmp	r3, #16
 8005516:	d10f      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005518:	4baf      	ldr	r3, [pc, #700]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800551a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551c:	4aae      	ldr	r2, [pc, #696]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800551e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005522:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005524:	e00e      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3304      	adds	r3, #4
 800552a:	2102      	movs	r1, #2
 800552c:	4618      	mov	r0, r3
 800552e:	f001 f85f 	bl	80065f0 <RCCEx_PLL2_Config>
 8005532:	4603      	mov	r3, r0
 8005534:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005536:	e005      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	75fb      	strb	r3, [r7, #23]
      break;
 800553c:	e002      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800553e:	bf00      	nop
 8005540:	e000      	b.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005542:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005544:	7dfb      	ldrb	r3, [r7, #23]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800554a:	4ba3      	ldr	r3, [pc, #652]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800554c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005556:	49a0      	ldr	r1, [pc, #640]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005558:	4313      	orrs	r3, r2
 800555a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800555c:	e001      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555e:	7dfb      	ldrb	r3, [r7, #23]
 8005560:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d047      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005576:	d030      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800557c:	d82a      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800557e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005582:	d02c      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005584:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005588:	d824      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800558a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800558e:	d018      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005594:	d81e      	bhi.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559e:	d007      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80055a0:	e018      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055a2:	4b8d      	ldr	r3, [pc, #564]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	4a8c      	ldr	r2, [pc, #560]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055ae:	e017      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3304      	adds	r3, #4
 80055b4:	2100      	movs	r1, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 f81a 	bl	80065f0 <RCCEx_PLL2_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055c0:	e00e      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3324      	adds	r3, #36	; 0x24
 80055c6:	2100      	movs	r1, #0
 80055c8:	4618      	mov	r0, r3
 80055ca:	f001 f8c3 	bl	8006754 <RCCEx_PLL3_Config>
 80055ce:	4603      	mov	r3, r0
 80055d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80055d2:	e005      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	75fb      	strb	r3, [r7, #23]
      break;
 80055d8:	e002      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80055da:	bf00      	nop
 80055dc:	e000      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80055de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d109      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80055e6:	4b7c      	ldr	r3, [pc, #496]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f2:	4979      	ldr	r1, [pc, #484]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	650b      	str	r3, [r1, #80]	; 0x50
 80055f8:	e001      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fa:	7dfb      	ldrb	r3, [r7, #23]
 80055fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d049      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005612:	d02e      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005618:	d828      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800561a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800561e:	d02a      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005620:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005624:	d822      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005626:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800562a:	d026      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800562c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005630:	d81c      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005632:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005636:	d010      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005638:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800563c:	d816      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01d      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005646:	d111      	bne.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	2101      	movs	r1, #1
 800564e:	4618      	mov	r0, r3
 8005650:	f000 ffce 	bl	80065f0 <RCCEx_PLL2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005658:	e012      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3324      	adds	r3, #36	; 0x24
 800565e:	2101      	movs	r1, #1
 8005660:	4618      	mov	r0, r3
 8005662:	f001 f877 	bl	8006754 <RCCEx_PLL3_Config>
 8005666:	4603      	mov	r3, r0
 8005668:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800566a:	e009      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	75fb      	strb	r3, [r7, #23]
      break;
 8005670:	e006      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005672:	bf00      	nop
 8005674:	e004      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005676:	bf00      	nop
 8005678:	e002      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800567a:	bf00      	nop
 800567c:	e000      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800567e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005680:	7dfb      	ldrb	r3, [r7, #23]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005686:	4b54      	ldr	r3, [pc, #336]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005692:	4951      	ldr	r1, [pc, #324]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005694:	4313      	orrs	r3, r2
 8005696:	650b      	str	r3, [r1, #80]	; 0x50
 8005698:	e001      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569a:	7dfb      	ldrb	r3, [r7, #23]
 800569c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d04b      	beq.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80056b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056b4:	d02e      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80056b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80056ba:	d828      	bhi.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80056bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c0:	d02a      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80056c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c6:	d822      	bhi.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80056c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056cc:	d026      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80056ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056d2:	d81c      	bhi.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80056d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056d8:	d010      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80056da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056de:	d816      	bhi.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01d      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80056e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056e8:	d111      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3304      	adds	r3, #4
 80056ee:	2101      	movs	r1, #1
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 ff7d 	bl	80065f0 <RCCEx_PLL2_Config>
 80056f6:	4603      	mov	r3, r0
 80056f8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80056fa:	e012      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3324      	adds	r3, #36	; 0x24
 8005700:	2101      	movs	r1, #1
 8005702:	4618      	mov	r0, r3
 8005704:	f001 f826 	bl	8006754 <RCCEx_PLL3_Config>
 8005708:	4603      	mov	r3, r0
 800570a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800570c:	e009      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	75fb      	strb	r3, [r7, #23]
      break;
 8005712:	e006      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005714:	bf00      	nop
 8005716:	e004      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005718:	bf00      	nop
 800571a:	e002      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800571c:	bf00      	nop
 800571e:	e000      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005722:	7dfb      	ldrb	r3, [r7, #23]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005728:	4b2b      	ldr	r3, [pc, #172]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800572a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005736:	4928      	ldr	r1, [pc, #160]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005738:	4313      	orrs	r3, r2
 800573a:	658b      	str	r3, [r1, #88]	; 0x58
 800573c:	e001      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573e:	7dfb      	ldrb	r3, [r7, #23]
 8005740:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d02f      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005756:	d00e      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800575c:	d814      	bhi.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d015      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005762:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005766:	d10f      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005768:	4b1b      	ldr	r3, [pc, #108]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	4a1a      	ldr	r2, [pc, #104]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800576e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005772:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005774:	e00c      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3304      	adds	r3, #4
 800577a:	2101      	movs	r1, #1
 800577c:	4618      	mov	r0, r3
 800577e:	f000 ff37 	bl	80065f0 <RCCEx_PLL2_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005786:	e003      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	75fb      	strb	r3, [r7, #23]
      break;
 800578c:	e000      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800578e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005790:	7dfb      	ldrb	r3, [r7, #23]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d109      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005796:	4b10      	ldr	r3, [pc, #64]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a2:	490d      	ldr	r1, [pc, #52]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	650b      	str	r3, [r1, #80]	; 0x50
 80057a8:	e001      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
 80057ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d033      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d81c      	bhi.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80057c2:	a201      	add	r2, pc, #4	; (adr r2, 80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	08005803 	.word	0x08005803
 80057cc:	080057dd 	.word	0x080057dd
 80057d0:	080057eb 	.word	0x080057eb
 80057d4:	08005803 	.word	0x08005803
 80057d8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057dc:	4bb8      	ldr	r3, [pc, #736]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	4ab7      	ldr	r2, [pc, #732]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80057e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80057e8:	e00c      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3304      	adds	r3, #4
 80057ee:	2102      	movs	r1, #2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fefd 	bl	80065f0 <RCCEx_PLL2_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80057fa:	e003      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005800:	e000      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d109      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800580a:	4bad      	ldr	r3, [pc, #692]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800580c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580e:	f023 0203 	bic.w	r2, r3, #3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005816:	49aa      	ldr	r1, [pc, #680]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005818:	4313      	orrs	r3, r2
 800581a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800581c:	e001      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581e:	7dfb      	ldrb	r3, [r7, #23]
 8005820:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 8086 	beq.w	800593c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005830:	4ba4      	ldr	r3, [pc, #656]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4aa3      	ldr	r2, [pc, #652]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800583c:	f7fd fc38 	bl	80030b0 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005842:	e009      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005844:	f7fd fc34 	bl	80030b0 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b64      	cmp	r3, #100	; 0x64
 8005850:	d902      	bls.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	75fb      	strb	r3, [r7, #23]
        break;
 8005856:	e005      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005858:	4b9a      	ldr	r3, [pc, #616]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0ef      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d166      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800586a:	4b95      	ldr	r3, [pc, #596]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800586c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005874:	4053      	eors	r3, r2
 8005876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800587a:	2b00      	cmp	r3, #0
 800587c:	d013      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800587e:	4b90      	ldr	r3, [pc, #576]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005886:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005888:	4b8d      	ldr	r3, [pc, #564]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800588a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588c:	4a8c      	ldr	r2, [pc, #560]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800588e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005892:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005894:	4b8a      	ldr	r3, [pc, #552]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005898:	4a89      	ldr	r2, [pc, #548]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800589a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800589e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80058a0:	4a87      	ldr	r2, [pc, #540]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b0:	d115      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b2:	f7fd fbfd 	bl	80030b0 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058b8:	e00b      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ba:	f7fd fbf9 	bl	80030b0 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d902      	bls.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	75fb      	strb	r3, [r7, #23]
            break;
 80058d0:	e005      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058d2:	4b7b      	ldr	r3, [pc, #492]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0ed      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80058de:	7dfb      	ldrb	r3, [r7, #23]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d126      	bne.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80058ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058f2:	d10d      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80058f4:	4b72      	ldr	r3, [pc, #456]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005902:	0919      	lsrs	r1, r3, #4
 8005904:	4b70      	ldr	r3, [pc, #448]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005906:	400b      	ands	r3, r1
 8005908:	496d      	ldr	r1, [pc, #436]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800590a:	4313      	orrs	r3, r2
 800590c:	610b      	str	r3, [r1, #16]
 800590e:	e005      	b.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005910:	4b6b      	ldr	r3, [pc, #428]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	4a6a      	ldr	r2, [pc, #424]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005916:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800591a:	6113      	str	r3, [r2, #16]
 800591c:	4b68      	ldr	r3, [pc, #416]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800591e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800592a:	4965      	ldr	r1, [pc, #404]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800592c:	4313      	orrs	r3, r2
 800592e:	670b      	str	r3, [r1, #112]	; 0x70
 8005930:	e004      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005932:	7dfb      	ldrb	r3, [r7, #23]
 8005934:	75bb      	strb	r3, [r7, #22]
 8005936:	e001      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005938:	7dfb      	ldrb	r3, [r7, #23]
 800593a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d07e      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800594c:	2b28      	cmp	r3, #40	; 0x28
 800594e:	d867      	bhi.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	08005a27 	.word	0x08005a27
 800595c:	08005a21 	.word	0x08005a21
 8005960:	08005a21 	.word	0x08005a21
 8005964:	08005a21 	.word	0x08005a21
 8005968:	08005a21 	.word	0x08005a21
 800596c:	08005a21 	.word	0x08005a21
 8005970:	08005a21 	.word	0x08005a21
 8005974:	08005a21 	.word	0x08005a21
 8005978:	080059fd 	.word	0x080059fd
 800597c:	08005a21 	.word	0x08005a21
 8005980:	08005a21 	.word	0x08005a21
 8005984:	08005a21 	.word	0x08005a21
 8005988:	08005a21 	.word	0x08005a21
 800598c:	08005a21 	.word	0x08005a21
 8005990:	08005a21 	.word	0x08005a21
 8005994:	08005a21 	.word	0x08005a21
 8005998:	08005a0f 	.word	0x08005a0f
 800599c:	08005a21 	.word	0x08005a21
 80059a0:	08005a21 	.word	0x08005a21
 80059a4:	08005a21 	.word	0x08005a21
 80059a8:	08005a21 	.word	0x08005a21
 80059ac:	08005a21 	.word	0x08005a21
 80059b0:	08005a21 	.word	0x08005a21
 80059b4:	08005a21 	.word	0x08005a21
 80059b8:	08005a27 	.word	0x08005a27
 80059bc:	08005a21 	.word	0x08005a21
 80059c0:	08005a21 	.word	0x08005a21
 80059c4:	08005a21 	.word	0x08005a21
 80059c8:	08005a21 	.word	0x08005a21
 80059cc:	08005a21 	.word	0x08005a21
 80059d0:	08005a21 	.word	0x08005a21
 80059d4:	08005a21 	.word	0x08005a21
 80059d8:	08005a27 	.word	0x08005a27
 80059dc:	08005a21 	.word	0x08005a21
 80059e0:	08005a21 	.word	0x08005a21
 80059e4:	08005a21 	.word	0x08005a21
 80059e8:	08005a21 	.word	0x08005a21
 80059ec:	08005a21 	.word	0x08005a21
 80059f0:	08005a21 	.word	0x08005a21
 80059f4:	08005a21 	.word	0x08005a21
 80059f8:	08005a27 	.word	0x08005a27
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3304      	adds	r3, #4
 8005a00:	2101      	movs	r1, #1
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fdf4 	bl	80065f0 <RCCEx_PLL2_Config>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a0c:	e00c      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3324      	adds	r3, #36	; 0x24
 8005a12:	2101      	movs	r1, #1
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fe9d 	bl	8006754 <RCCEx_PLL3_Config>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005a1e:	e003      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	75fb      	strb	r3, [r7, #23]
      break;
 8005a24:	e000      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8005a26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a2e:	4b24      	ldr	r3, [pc, #144]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a3a:	4921      	ldr	r1, [pc, #132]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	654b      	str	r3, [r1, #84]	; 0x54
 8005a40:	e001      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d03e      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a56:	2b05      	cmp	r3, #5
 8005a58:	d820      	bhi.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8005a5a:	a201      	add	r2, pc, #4	; (adr r2, 8005a60 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8005a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a60:	08005aa3 	.word	0x08005aa3
 8005a64:	08005a79 	.word	0x08005a79
 8005a68:	08005a8b 	.word	0x08005a8b
 8005a6c:	08005aa3 	.word	0x08005aa3
 8005a70:	08005aa3 	.word	0x08005aa3
 8005a74:	08005aa3 	.word	0x08005aa3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 fdb6 	bl	80065f0 <RCCEx_PLL2_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a88:	e00c      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3324      	adds	r3, #36	; 0x24
 8005a8e:	2101      	movs	r1, #1
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fe5f 	bl	8006754 <RCCEx_PLL3_Config>
 8005a96:	4603      	mov	r3, r0
 8005a98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005a9a:	e003      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa0:	e000      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8005aa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aa4:	7dfb      	ldrb	r3, [r7, #23]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d110      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005aaa:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	f023 0207 	bic.w	r2, r3, #7
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ab6:	4902      	ldr	r1, [pc, #8]	; (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	654b      	str	r3, [r1, #84]	; 0x54
 8005abc:	e008      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8005abe:	bf00      	nop
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	58024800 	.word	0x58024800
 8005ac8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005acc:	7dfb      	ldrb	r3, [r7, #23]
 8005ace:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d039      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae2:	2b05      	cmp	r3, #5
 8005ae4:	d820      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005ae6:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aec:	08005b2f 	.word	0x08005b2f
 8005af0:	08005b05 	.word	0x08005b05
 8005af4:	08005b17 	.word	0x08005b17
 8005af8:	08005b2f 	.word	0x08005b2f
 8005afc:	08005b2f 	.word	0x08005b2f
 8005b00:	08005b2f 	.word	0x08005b2f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3304      	adds	r3, #4
 8005b08:	2101      	movs	r1, #1
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 fd70 	bl	80065f0 <RCCEx_PLL2_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b14:	e00c      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	3324      	adds	r3, #36	; 0x24
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 fe19 	bl	8006754 <RCCEx_PLL3_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005b26:	e003      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b2c:	e000      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8005b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b36:	4bb7      	ldr	r3, [pc, #732]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3a:	f023 0207 	bic.w	r2, r3, #7
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b44:	49b3      	ldr	r1, [pc, #716]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	658b      	str	r3, [r1, #88]	; 0x58
 8005b4a:	e001      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
 8005b4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d04b      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b66:	d02e      	beq.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8005b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b6c:	d828      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b72:	d02a      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b78:	d822      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005b7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b7e:	d026      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005b80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b84:	d81c      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b8a:	d010      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b90:	d816      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d01d      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b9a:	d111      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fd24 	bl	80065f0 <RCCEx_PLL2_Config>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005bac:	e012      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	3324      	adds	r3, #36	; 0x24
 8005bb2:	2102      	movs	r1, #2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 fdcd 	bl	8006754 <RCCEx_PLL3_Config>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005bbe:	e009      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	75fb      	strb	r3, [r7, #23]
      break;
 8005bc4:	e006      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005bc6:	bf00      	nop
 8005bc8:	e004      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005bca:	bf00      	nop
 8005bcc:	e002      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005bce:	bf00      	nop
 8005bd0:	e000      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10a      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bda:	4b8e      	ldr	r3, [pc, #568]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bde:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be8:	498a      	ldr	r1, [pc, #552]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	654b      	str	r3, [r1, #84]	; 0x54
 8005bee:	e001      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
 8005bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d04b      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c0a:	d02e      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005c0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005c10:	d828      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c16:	d02a      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1c:	d822      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005c1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c22:	d026      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005c24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c28:	d81c      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c2e:	d010      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8005c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c34:	d816      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d01d      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c3e:	d111      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	2100      	movs	r1, #0
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fcd2 	bl	80065f0 <RCCEx_PLL2_Config>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c50:	e012      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3324      	adds	r3, #36	; 0x24
 8005c56:	2102      	movs	r1, #2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fd7b 	bl	8006754 <RCCEx_PLL3_Config>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005c62:	e009      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	75fb      	strb	r3, [r7, #23]
      break;
 8005c68:	e006      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005c6a:	bf00      	nop
 8005c6c:	e004      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005c6e:	bf00      	nop
 8005c70:	e002      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005c72:	bf00      	nop
 8005c74:	e000      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c7e:	4b65      	ldr	r3, [pc, #404]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c8c:	4961      	ldr	r1, [pc, #388]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	658b      	str	r3, [r1, #88]	; 0x58
 8005c92:	e001      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d04b      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005caa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cae:	d02e      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8005cb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005cb4:	d828      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cba:	d02a      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc0:	d822      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005cc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005cc6:	d026      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005cc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ccc:	d81c      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005cce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cd2:	d010      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cd8:	d816      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01d      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce2:	d111      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fc80 	bl	80065f0 <RCCEx_PLL2_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005cf4:	e012      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3324      	adds	r3, #36	; 0x24
 8005cfa:	2102      	movs	r1, #2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 fd29 	bl	8006754 <RCCEx_PLL3_Config>
 8005d02:	4603      	mov	r3, r0
 8005d04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005d06:	e009      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0c:	e006      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005d0e:	bf00      	nop
 8005d10:	e004      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8005d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005d22:	4b3c      	ldr	r3, [pc, #240]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d30:	4938      	ldr	r1, [pc, #224]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	658b      	str	r3, [r1, #88]	; 0x58
 8005d36:	e001      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
 8005d3a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0308 	and.w	r3, r3, #8
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01a      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d52:	d10a      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3324      	adds	r3, #36	; 0x24
 8005d58:	2102      	movs	r1, #2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fcfa 	bl	8006754 <RCCEx_PLL3_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005d6a:	4b2a      	ldr	r3, [pc, #168]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d78:	4926      	ldr	r1, [pc, #152]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d01a      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d94:	d10a      	bne.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3324      	adds	r3, #36	; 0x24
 8005d9a:	2102      	movs	r1, #2
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f000 fcd9 	bl	8006754 <RCCEx_PLL3_Config>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dac:	4b19      	ldr	r3, [pc, #100]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dba:	4916      	ldr	r1, [pc, #88]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d036      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dd6:	d01f      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ddc:	d817      	bhi.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8005de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de6:	d009      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005de8:	e011      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	3304      	adds	r3, #4
 8005dee:	2100      	movs	r1, #0
 8005df0:	4618      	mov	r0, r3
 8005df2:	f000 fbfd 	bl	80065f0 <RCCEx_PLL2_Config>
 8005df6:	4603      	mov	r3, r0
 8005df8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005dfa:	e00e      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3324      	adds	r3, #36	; 0x24
 8005e00:	2102      	movs	r1, #2
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 fca6 	bl	8006754 <RCCEx_PLL3_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005e0c:	e005      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	75fb      	strb	r3, [r7, #23]
      break;
 8005e12:	e002      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8005e14:	58024400 	.word	0x58024400
      break;
 8005e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10a      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e20:	4b93      	ldr	r3, [pc, #588]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e2e:	4990      	ldr	r1, [pc, #576]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	658b      	str	r3, [r1, #88]	; 0x58
 8005e34:	e001      	b.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
 8005e38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d033      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e50:	d01c      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8005e52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e56:	d816      	bhi.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8005e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e5c:	d003      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8005e5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e62:	d007      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8005e64:	e00f      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e66:	4b82      	ldr	r3, [pc, #520]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	4a81      	ldr	r2, [pc, #516]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e72:	e00c      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3324      	adds	r3, #36	; 0x24
 8005e78:	2101      	movs	r1, #1
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fc6a 	bl	8006754 <RCCEx_PLL3_Config>
 8005e80:	4603      	mov	r3, r0
 8005e82:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005e84:	e003      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	75fb      	strb	r3, [r7, #23]
      break;
 8005e8a:	e000      	b.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10a      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e94:	4b76      	ldr	r3, [pc, #472]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea2:	4973      	ldr	r1, [pc, #460]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	654b      	str	r3, [r1, #84]	; 0x54
 8005ea8:	e001      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
 8005eac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d029      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8005ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec6:	d007      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005ec8:	e00f      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eca:	4b69      	ldr	r3, [pc, #420]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	4a68      	ldr	r2, [pc, #416]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ed6:	e00b      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3304      	adds	r3, #4
 8005edc:	2102      	movs	r1, #2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fb86 	bl	80065f0 <RCCEx_PLL2_Config>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005ee8:	e002      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	75fb      	strb	r3, [r7, #23]
      break;
 8005eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d109      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005ef6:	4b5e      	ldr	r3, [pc, #376]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005efa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f02:	495b      	ldr	r1, [pc, #364]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f08:	e001      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
 8005f0c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3324      	adds	r3, #36	; 0x24
 8005f1e:	2102      	movs	r1, #2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 fc17 	bl	8006754 <RCCEx_PLL3_Config>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d030      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f44:	d017      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8005f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f4a:	d811      	bhi.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f50:	d013      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f56:	d80b      	bhi.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d010      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f60:	d106      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f62:	4b43      	ldr	r3, [pc, #268]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	4a42      	ldr	r2, [pc, #264]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005f6e:	e007      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	75fb      	strb	r3, [r7, #23]
      break;
 8005f74:	e004      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005f76:	bf00      	nop
 8005f78:	e002      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005f7a:	bf00      	nop
 8005f7c:	e000      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005f7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f80:	7dfb      	ldrb	r3, [r7, #23]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f86:	4b3a      	ldr	r3, [pc, #232]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f92:	4937      	ldr	r1, [pc, #220]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	654b      	str	r3, [r1, #84]	; 0x54
 8005f98:	e001      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f9a:	7dfb      	ldrb	r3, [r7, #23]
 8005f9c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d008      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005faa:	4b31      	ldr	r3, [pc, #196]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	492e      	ldr	r1, [pc, #184]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d009      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005fc8:	4b29      	ldr	r3, [pc, #164]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fd6:	4926      	ldr	r1, [pc, #152]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d008      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fe8:	4b21      	ldr	r3, [pc, #132]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ff4:	491e      	ldr	r1, [pc, #120]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00d      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006006:	4b1a      	ldr	r3, [pc, #104]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	4a19      	ldr	r2, [pc, #100]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800600c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006010:	6113      	str	r3, [r2, #16]
 8006012:	4b17      	ldr	r3, [pc, #92]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800601c:	4914      	ldr	r1, [pc, #80]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800601e:	4313      	orrs	r3, r2
 8006020:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	da08      	bge.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800602a:	4b11      	ldr	r3, [pc, #68]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800602c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006036:	490e      	ldr	r1, [pc, #56]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006038:	4313      	orrs	r3, r2
 800603a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d009      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006048:	4b09      	ldr	r3, [pc, #36]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800604a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006056:	4906      	ldr	r1, [pc, #24]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006058:	4313      	orrs	r3, r2
 800605a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800605c:	7dbb      	ldrb	r3, [r7, #22]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	e000      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	58024400 	.word	0x58024400

08006074 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006078:	f7ff f860 	bl	800513c <HAL_RCC_GetHCLKFreq>
 800607c:	4602      	mov	r2, r0
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	091b      	lsrs	r3, r3, #4
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	4904      	ldr	r1, [pc, #16]	; (800609c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800608a:	5ccb      	ldrb	r3, [r1, r3]
 800608c:	f003 031f 	and.w	r3, r3, #31
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006094:	4618      	mov	r0, r3
 8006096:	bd80      	pop	{r7, pc}
 8006098:	58024400 	.word	0x58024400
 800609c:	0800d15c 	.word	0x0800d15c

080060a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b089      	sub	sp, #36	; 0x24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060a8:	4ba1      	ldr	r3, [pc, #644]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80060b2:	4b9f      	ldr	r3, [pc, #636]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	0b1b      	lsrs	r3, r3, #12
 80060b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80060be:	4b9c      	ldr	r3, [pc, #624]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80060ca:	4b99      	ldr	r3, [pc, #612]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	08db      	lsrs	r3, r3, #3
 80060d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	fb02 f303 	mul.w	r3, r2, r3
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 8111 	beq.w	8006310 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	f000 8083 	beq.w	80061fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	f200 80a1 	bhi.w	8006240 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d056      	beq.n	80061b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800610a:	e099      	b.n	8006240 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800610c:	4b88      	ldr	r3, [pc, #544]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d02d      	beq.n	8006174 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006118:	4b85      	ldr	r3, [pc, #532]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	08db      	lsrs	r3, r3, #3
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	4a84      	ldr	r2, [pc, #528]	; (8006334 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006124:	fa22 f303 	lsr.w	r3, r2, r3
 8006128:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	ee07 3a90 	vmov	s15, r3
 8006130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006142:	4b7b      	ldr	r3, [pc, #492]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006152:	ed97 6a03 	vldr	s12, [r7, #12]
 8006156:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800615a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006172:	e087      	b.n	8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800617e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800633c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006186:	4b6a      	ldr	r3, [pc, #424]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006196:	ed97 6a03 	vldr	s12, [r7, #12]
 800619a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800619e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061b6:	e065      	b.n	8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80061c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061ca:	4b59      	ldr	r3, [pc, #356]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d2:	ee07 3a90 	vmov	s15, r3
 80061d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061da:	ed97 6a03 	vldr	s12, [r7, #12]
 80061de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061fa:	e043      	b.n	8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006206:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006344 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800620a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620e:	4b48      	ldr	r3, [pc, #288]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800621e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006222:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800622a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800622e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800623e:	e021      	b.n	8006284 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800624e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006252:	4b37      	ldr	r3, [pc, #220]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625a:	ee07 3a90 	vmov	s15, r3
 800625e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006262:	ed97 6a03 	vldr	s12, [r7, #12]
 8006266:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006338 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800626a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800626e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800627a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006282:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006284:	4b2a      	ldr	r3, [pc, #168]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006288:	0a5b      	lsrs	r3, r3, #9
 800628a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006296:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800629a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800629e:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062aa:	ee17 2a90 	vmov	r2, s15
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80062b2:	4b1f      	ldr	r3, [pc, #124]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	0c1b      	lsrs	r3, r3, #16
 80062b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062bc:	ee07 3a90 	vmov	s15, r3
 80062c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80062d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062d8:	ee17 2a90 	vmov	r2, s15
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80062e0:	4b13      	ldr	r3, [pc, #76]	; (8006330 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e4:	0e1b      	lsrs	r3, r3, #24
 80062e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ea:	ee07 3a90 	vmov	s15, r3
 80062ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80062fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006306:	ee17 2a90 	vmov	r2, s15
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800630e:	e008      	b.n	8006322 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	609a      	str	r2, [r3, #8]
}
 8006322:	bf00      	nop
 8006324:	3724      	adds	r7, #36	; 0x24
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	58024400 	.word	0x58024400
 8006334:	03d09000 	.word	0x03d09000
 8006338:	46000000 	.word	0x46000000
 800633c:	4c742400 	.word	0x4c742400
 8006340:	4a742400 	.word	0x4a742400
 8006344:	4af42400 	.word	0x4af42400

08006348 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006348:	b480      	push	{r7}
 800634a:	b089      	sub	sp, #36	; 0x24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006350:	4ba1      	ldr	r3, [pc, #644]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800635a:	4b9f      	ldr	r3, [pc, #636]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	0d1b      	lsrs	r3, r3, #20
 8006360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006364:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006366:	4b9c      	ldr	r3, [pc, #624]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	0a1b      	lsrs	r3, r3, #8
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006372:	4b99      	ldr	r3, [pc, #612]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006376:	08db      	lsrs	r3, r3, #3
 8006378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8111 	beq.w	80065b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	2b02      	cmp	r3, #2
 800639a:	f000 8083 	beq.w	80064a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	f200 80a1 	bhi.w	80064e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d056      	beq.n	8006460 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80063b2:	e099      	b.n	80064e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063b4:	4b88      	ldr	r3, [pc, #544]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d02d      	beq.n	800641c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063c0:	4b85      	ldr	r3, [pc, #532]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	08db      	lsrs	r3, r3, #3
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	4a84      	ldr	r2, [pc, #528]	; (80065dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
 80063d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	ee07 3a90 	vmov	s15, r3
 80063d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ea:	4b7b      	ldr	r3, [pc, #492]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80063fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800640e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006416:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800641a:	e087      	b.n	800652c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80065e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800642a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642e:	4b6a      	ldr	r3, [pc, #424]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006442:	eddf 5a67 	vldr	s11, [pc, #412]	; 80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800645e:	e065      	b.n	800652c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800646e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006472:	4b59      	ldr	r3, [pc, #356]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006482:	ed97 6a03 	vldr	s12, [r7, #12]
 8006486:	eddf 5a56 	vldr	s11, [pc, #344]	; 80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800648a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006492:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064a2:	e043      	b.n	800652c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80065ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80064b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b6:	4b48      	ldr	r3, [pc, #288]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064e6:	e021      	b.n	800652c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80065e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80064f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064fa:	4b37      	ldr	r3, [pc, #220]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650a:	ed97 6a03 	vldr	s12, [r7, #12]
 800650e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80065e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800651e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006526:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800652a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800652c:	4b2a      	ldr	r3, [pc, #168]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	0a5b      	lsrs	r3, r3, #9
 8006532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800653e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006542:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006546:	edd7 6a07 	vldr	s13, [r7, #28]
 800654a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800654e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006552:	ee17 2a90 	vmov	r2, s15
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800655a:	4b1f      	ldr	r3, [pc, #124]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	0c1b      	lsrs	r3, r3, #16
 8006560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006564:	ee07 3a90 	vmov	s15, r3
 8006568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006570:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006574:	edd7 6a07 	vldr	s13, [r7, #28]
 8006578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800657c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006580:	ee17 2a90 	vmov	r2, s15
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006588:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	0e1b      	lsrs	r3, r3, #24
 800658e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800659a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800659e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80065a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ae:	ee17 2a90 	vmov	r2, s15
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065b6:	e008      	b.n	80065ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
}
 80065ca:	bf00      	nop
 80065cc:	3724      	adds	r7, #36	; 0x24
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	58024400 	.word	0x58024400
 80065dc:	03d09000 	.word	0x03d09000
 80065e0:	46000000 	.word	0x46000000
 80065e4:	4c742400 	.word	0x4c742400
 80065e8:	4a742400 	.word	0x4a742400
 80065ec:	4af42400 	.word	0x4af42400

080065f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065fe:	4b53      	ldr	r3, [pc, #332]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 8006600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b03      	cmp	r3, #3
 8006608:	d101      	bne.n	800660e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e099      	b.n	8006742 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800660e:	4b4f      	ldr	r3, [pc, #316]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a4e      	ldr	r2, [pc, #312]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 8006614:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800661a:	f7fc fd49 	bl	80030b0 <HAL_GetTick>
 800661e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006620:	e008      	b.n	8006634 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006622:	f7fc fd45 	bl	80030b0 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e086      	b.n	8006742 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006634:	4b45      	ldr	r3, [pc, #276]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1f0      	bne.n	8006622 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006640:	4b42      	ldr	r3, [pc, #264]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	031b      	lsls	r3, r3, #12
 800664e:	493f      	ldr	r1, [pc, #252]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 8006650:	4313      	orrs	r3, r2
 8006652:	628b      	str	r3, [r1, #40]	; 0x28
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	3b01      	subs	r3, #1
 800665a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	3b01      	subs	r3, #1
 8006664:	025b      	lsls	r3, r3, #9
 8006666:	b29b      	uxth	r3, r3
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	3b01      	subs	r3, #1
 8006670:	041b      	lsls	r3, r3, #16
 8006672:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	3b01      	subs	r3, #1
 800667e:	061b      	lsls	r3, r3, #24
 8006680:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006684:	4931      	ldr	r1, [pc, #196]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 8006686:	4313      	orrs	r3, r2
 8006688:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800668a:	4b30      	ldr	r3, [pc, #192]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 800668c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	492d      	ldr	r1, [pc, #180]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 8006698:	4313      	orrs	r3, r2
 800669a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800669c:	4b2b      	ldr	r3, [pc, #172]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	f023 0220 	bic.w	r2, r3, #32
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	4928      	ldr	r1, [pc, #160]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80066ae:	4b27      	ldr	r3, [pc, #156]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	4a26      	ldr	r2, [pc, #152]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 80066b4:	f023 0310 	bic.w	r3, r3, #16
 80066b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80066ba:	4b24      	ldr	r3, [pc, #144]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 80066bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066be:	4b24      	ldr	r3, [pc, #144]	; (8006750 <RCCEx_PLL2_Config+0x160>)
 80066c0:	4013      	ands	r3, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	69d2      	ldr	r2, [r2, #28]
 80066c6:	00d2      	lsls	r2, r2, #3
 80066c8:	4920      	ldr	r1, [pc, #128]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80066ce:	4b1f      	ldr	r3, [pc, #124]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	4a1e      	ldr	r2, [pc, #120]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 80066d4:	f043 0310 	orr.w	r3, r3, #16
 80066d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d106      	bne.n	80066ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80066e0:	4b1a      	ldr	r3, [pc, #104]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	4a19      	ldr	r2, [pc, #100]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 80066e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066ec:	e00f      	b.n	800670e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d106      	bne.n	8006702 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80066f4:	4b15      	ldr	r3, [pc, #84]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	4a14      	ldr	r2, [pc, #80]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 80066fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006700:	e005      	b.n	800670e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006702:	4b12      	ldr	r3, [pc, #72]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	4a11      	ldr	r2, [pc, #68]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 8006708:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800670c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800670e:	4b0f      	ldr	r3, [pc, #60]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a0e      	ldr	r2, [pc, #56]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 8006714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006718:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800671a:	f7fc fcc9 	bl	80030b0 <HAL_GetTick>
 800671e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006720:	e008      	b.n	8006734 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006722:	f7fc fcc5 	bl	80030b0 <HAL_GetTick>
 8006726:	4602      	mov	r2, r0
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	2b02      	cmp	r3, #2
 800672e:	d901      	bls.n	8006734 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e006      	b.n	8006742 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006734:	4b05      	ldr	r3, [pc, #20]	; (800674c <RCCEx_PLL2_Config+0x15c>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0f0      	beq.n	8006722 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	58024400 	.word	0x58024400
 8006750:	ffff0007 	.word	0xffff0007

08006754 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006762:	4b53      	ldr	r3, [pc, #332]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	2b03      	cmp	r3, #3
 800676c:	d101      	bne.n	8006772 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e099      	b.n	80068a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006772:	4b4f      	ldr	r3, [pc, #316]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a4e      	ldr	r2, [pc, #312]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 8006778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800677c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800677e:	f7fc fc97 	bl	80030b0 <HAL_GetTick>
 8006782:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006784:	e008      	b.n	8006798 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006786:	f7fc fc93 	bl	80030b0 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e086      	b.n	80068a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006798:	4b45      	ldr	r3, [pc, #276]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1f0      	bne.n	8006786 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80067a4:	4b42      	ldr	r3, [pc, #264]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	051b      	lsls	r3, r3, #20
 80067b2:	493f      	ldr	r1, [pc, #252]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	628b      	str	r3, [r1, #40]	; 0x28
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	3b01      	subs	r3, #1
 80067be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	025b      	lsls	r3, r3, #9
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	431a      	orrs	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	041b      	lsls	r3, r3, #16
 80067d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	061b      	lsls	r3, r3, #24
 80067e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067e8:	4931      	ldr	r1, [pc, #196]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80067ee:	4b30      	ldr	r3, [pc, #192]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 80067f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	492d      	ldr	r1, [pc, #180]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006800:	4b2b      	ldr	r3, [pc, #172]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	4928      	ldr	r1, [pc, #160]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 800680e:	4313      	orrs	r3, r2
 8006810:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006812:	4b27      	ldr	r3, [pc, #156]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 8006814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006816:	4a26      	ldr	r2, [pc, #152]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 8006818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800681c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800681e:	4b24      	ldr	r3, [pc, #144]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 8006820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006822:	4b24      	ldr	r3, [pc, #144]	; (80068b4 <RCCEx_PLL3_Config+0x160>)
 8006824:	4013      	ands	r3, r2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	69d2      	ldr	r2, [r2, #28]
 800682a:	00d2      	lsls	r2, r2, #3
 800682c:	4920      	ldr	r1, [pc, #128]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 800682e:	4313      	orrs	r3, r2
 8006830:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006832:	4b1f      	ldr	r3, [pc, #124]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	4a1e      	ldr	r2, [pc, #120]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 8006838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800683c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d106      	bne.n	8006852 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006844:	4b1a      	ldr	r3, [pc, #104]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	4a19      	ldr	r2, [pc, #100]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 800684a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800684e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006850:	e00f      	b.n	8006872 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d106      	bne.n	8006866 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006858:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	4a14      	ldr	r2, [pc, #80]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 800685e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006862:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006864:	e005      	b.n	8006872 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006866:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 8006868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686a:	4a11      	ldr	r2, [pc, #68]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 800686c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006870:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006872:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a0e      	ldr	r2, [pc, #56]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 8006878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800687c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800687e:	f7fc fc17 	bl	80030b0 <HAL_GetTick>
 8006882:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006884:	e008      	b.n	8006898 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006886:	f7fc fc13 	bl	80030b0 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d901      	bls.n	8006898 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e006      	b.n	80068a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006898:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <RCCEx_PLL3_Config+0x15c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0f0      	beq.n	8006886 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	58024400 	.word	0x58024400
 80068b4:	ffff0007 	.word	0xffff0007

080068b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e049      	b.n	800695e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f7fc f9a4 	bl	8002c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2202      	movs	r2, #2
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3304      	adds	r3, #4
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f000 fa7a 	bl	8006df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b02      	cmp	r3, #2
 800697a:	d122      	bne.n	80069c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b02      	cmp	r3, #2
 8006988:	d11b      	bne.n	80069c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f06f 0202 	mvn.w	r2, #2
 8006992:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	f003 0303 	and.w	r3, r3, #3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fa03 	bl	8006db4 <HAL_TIM_IC_CaptureCallback>
 80069ae:	e005      	b.n	80069bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f9f5 	bl	8006da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa06 	bl	8006dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b04      	cmp	r3, #4
 80069ce:	d122      	bne.n	8006a16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0304 	and.w	r3, r3, #4
 80069da:	2b04      	cmp	r3, #4
 80069dc:	d11b      	bne.n	8006a16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f06f 0204 	mvn.w	r2, #4
 80069e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f9d9 	bl	8006db4 <HAL_TIM_IC_CaptureCallback>
 8006a02:	e005      	b.n	8006a10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f9cb 	bl	8006da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f9dc 	bl	8006dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d122      	bne.n	8006a6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	2b08      	cmp	r3, #8
 8006a30:	d11b      	bne.n	8006a6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f06f 0208 	mvn.w	r2, #8
 8006a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2204      	movs	r2, #4
 8006a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69db      	ldr	r3, [r3, #28]
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f9af 	bl	8006db4 <HAL_TIM_IC_CaptureCallback>
 8006a56:	e005      	b.n	8006a64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f9a1 	bl	8006da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f9b2 	bl	8006dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f003 0310 	and.w	r3, r3, #16
 8006a74:	2b10      	cmp	r3, #16
 8006a76:	d122      	bne.n	8006abe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b10      	cmp	r3, #16
 8006a84:	d11b      	bne.n	8006abe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f06f 0210 	mvn.w	r2, #16
 8006a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2208      	movs	r2, #8
 8006a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 f985 	bl	8006db4 <HAL_TIM_IC_CaptureCallback>
 8006aaa:	e005      	b.n	8006ab8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f977 	bl	8006da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f988 	bl	8006dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d10e      	bne.n	8006aea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d107      	bne.n	8006aea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f06f 0201 	mvn.w	r2, #1
 8006ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f951 	bl	8006d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af4:	2b80      	cmp	r3, #128	; 0x80
 8006af6:	d10e      	bne.n	8006b16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b02:	2b80      	cmp	r3, #128	; 0x80
 8006b04:	d107      	bne.n	8006b16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fb37 	bl	8007184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b24:	d10e      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b30:	2b80      	cmp	r3, #128	; 0x80
 8006b32:	d107      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fb2a 	bl	8007198 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b40      	cmp	r3, #64	; 0x40
 8006b50:	d10e      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5c:	2b40      	cmp	r3, #64	; 0x40
 8006b5e:	d107      	bne.n	8006b70 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f936 	bl	8006ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b20      	cmp	r3, #32
 8006b7c:	d10e      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	d107      	bne.n	8006b9c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f06f 0220 	mvn.w	r2, #32
 8006b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 faea 	bl	8007170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d101      	bne.n	8006bbc <HAL_TIM_ConfigClockSource+0x18>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e0db      	b.n	8006d74 <HAL_TIM_ConfigClockSource+0x1d0>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4b69      	ldr	r3, [pc, #420]	; (8006d7c <HAL_TIM_ConfigClockSource+0x1d8>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006be2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a63      	ldr	r2, [pc, #396]	; (8006d80 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	f000 80a9 	beq.w	8006d4a <HAL_TIM_ConfigClockSource+0x1a6>
 8006bf8:	4a61      	ldr	r2, [pc, #388]	; (8006d80 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	f200 80ae 	bhi.w	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
 8006c00:	4a60      	ldr	r2, [pc, #384]	; (8006d84 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	f000 80a1 	beq.w	8006d4a <HAL_TIM_ConfigClockSource+0x1a6>
 8006c08:	4a5e      	ldr	r2, [pc, #376]	; (8006d84 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	f200 80a6 	bhi.w	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
 8006c10:	4a5d      	ldr	r2, [pc, #372]	; (8006d88 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	f000 8099 	beq.w	8006d4a <HAL_TIM_ConfigClockSource+0x1a6>
 8006c18:	4a5b      	ldr	r2, [pc, #364]	; (8006d88 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	f200 809e 	bhi.w	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
 8006c20:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c24:	f000 8091 	beq.w	8006d4a <HAL_TIM_ConfigClockSource+0x1a6>
 8006c28:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c2c:	f200 8096 	bhi.w	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
 8006c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c34:	f000 8089 	beq.w	8006d4a <HAL_TIM_ConfigClockSource+0x1a6>
 8006c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c3c:	f200 808e 	bhi.w	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
 8006c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c44:	d03e      	beq.n	8006cc4 <HAL_TIM_ConfigClockSource+0x120>
 8006c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c4a:	f200 8087 	bhi.w	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
 8006c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c52:	f000 8085 	beq.w	8006d60 <HAL_TIM_ConfigClockSource+0x1bc>
 8006c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5a:	d87f      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
 8006c5c:	2b70      	cmp	r3, #112	; 0x70
 8006c5e:	d01a      	beq.n	8006c96 <HAL_TIM_ConfigClockSource+0xf2>
 8006c60:	2b70      	cmp	r3, #112	; 0x70
 8006c62:	d87b      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
 8006c64:	2b60      	cmp	r3, #96	; 0x60
 8006c66:	d050      	beq.n	8006d0a <HAL_TIM_ConfigClockSource+0x166>
 8006c68:	2b60      	cmp	r3, #96	; 0x60
 8006c6a:	d877      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
 8006c6c:	2b50      	cmp	r3, #80	; 0x50
 8006c6e:	d03c      	beq.n	8006cea <HAL_TIM_ConfigClockSource+0x146>
 8006c70:	2b50      	cmp	r3, #80	; 0x50
 8006c72:	d873      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	d058      	beq.n	8006d2a <HAL_TIM_ConfigClockSource+0x186>
 8006c78:	2b40      	cmp	r3, #64	; 0x40
 8006c7a:	d86f      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
 8006c7c:	2b30      	cmp	r3, #48	; 0x30
 8006c7e:	d064      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x1a6>
 8006c80:	2b30      	cmp	r3, #48	; 0x30
 8006c82:	d86b      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
 8006c84:	2b20      	cmp	r3, #32
 8006c86:	d060      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x1a6>
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d867      	bhi.n	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d05c      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x1a6>
 8006c90:	2b10      	cmp	r3, #16
 8006c92:	d05a      	beq.n	8006d4a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006c94:	e062      	b.n	8006d5c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6818      	ldr	r0, [r3, #0]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	6899      	ldr	r1, [r3, #8]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f000 f9bb 	bl	8007020 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cb8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	609a      	str	r2, [r3, #8]
      break;
 8006cc2:	e04e      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6818      	ldr	r0, [r3, #0]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	6899      	ldr	r1, [r3, #8]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f000 f9a4 	bl	8007020 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ce6:	609a      	str	r2, [r3, #8]
      break;
 8006ce8:	e03b      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6818      	ldr	r0, [r3, #0]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	6859      	ldr	r1, [r3, #4]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f000 f914 	bl	8006f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2150      	movs	r1, #80	; 0x50
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 f96e 	bl	8006fe4 <TIM_ITRx_SetConfig>
      break;
 8006d08:	e02b      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	6859      	ldr	r1, [r3, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	461a      	mov	r2, r3
 8006d18:	f000 f933 	bl	8006f82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2160      	movs	r1, #96	; 0x60
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 f95e 	bl	8006fe4 <TIM_ITRx_SetConfig>
      break;
 8006d28:	e01b      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6818      	ldr	r0, [r3, #0]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	6859      	ldr	r1, [r3, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	461a      	mov	r2, r3
 8006d38:	f000 f8f4 	bl	8006f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2140      	movs	r1, #64	; 0x40
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 f94e 	bl	8006fe4 <TIM_ITRx_SetConfig>
      break;
 8006d48:	e00b      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4619      	mov	r1, r3
 8006d54:	4610      	mov	r0, r2
 8006d56:	f000 f945 	bl	8006fe4 <TIM_ITRx_SetConfig>
        break;
 8006d5a:	e002      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8006d5c:	bf00      	nop
 8006d5e:	e000      	b.n	8006d62 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8006d60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	ffceff88 	.word	0xffceff88
 8006d80:	00100040 	.word	0x00100040
 8006d84:	00100030 	.word	0x00100030
 8006d88:	00100020 	.word	0x00100020

08006d8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a40      	ldr	r2, [pc, #256]	; (8006f04 <TIM_Base_SetConfig+0x114>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d013      	beq.n	8006e30 <TIM_Base_SetConfig+0x40>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e0e:	d00f      	beq.n	8006e30 <TIM_Base_SetConfig+0x40>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a3d      	ldr	r2, [pc, #244]	; (8006f08 <TIM_Base_SetConfig+0x118>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00b      	beq.n	8006e30 <TIM_Base_SetConfig+0x40>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a3c      	ldr	r2, [pc, #240]	; (8006f0c <TIM_Base_SetConfig+0x11c>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d007      	beq.n	8006e30 <TIM_Base_SetConfig+0x40>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a3b      	ldr	r2, [pc, #236]	; (8006f10 <TIM_Base_SetConfig+0x120>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_Base_SetConfig+0x40>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a3a      	ldr	r2, [pc, #232]	; (8006f14 <TIM_Base_SetConfig+0x124>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d108      	bne.n	8006e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a2f      	ldr	r2, [pc, #188]	; (8006f04 <TIM_Base_SetConfig+0x114>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d01f      	beq.n	8006e8a <TIM_Base_SetConfig+0x9a>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e50:	d01b      	beq.n	8006e8a <TIM_Base_SetConfig+0x9a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a2c      	ldr	r2, [pc, #176]	; (8006f08 <TIM_Base_SetConfig+0x118>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d017      	beq.n	8006e8a <TIM_Base_SetConfig+0x9a>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a2b      	ldr	r2, [pc, #172]	; (8006f0c <TIM_Base_SetConfig+0x11c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <TIM_Base_SetConfig+0x9a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a2a      	ldr	r2, [pc, #168]	; (8006f10 <TIM_Base_SetConfig+0x120>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d00f      	beq.n	8006e8a <TIM_Base_SetConfig+0x9a>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a29      	ldr	r2, [pc, #164]	; (8006f14 <TIM_Base_SetConfig+0x124>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00b      	beq.n	8006e8a <TIM_Base_SetConfig+0x9a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a28      	ldr	r2, [pc, #160]	; (8006f18 <TIM_Base_SetConfig+0x128>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d007      	beq.n	8006e8a <TIM_Base_SetConfig+0x9a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a27      	ldr	r2, [pc, #156]	; (8006f1c <TIM_Base_SetConfig+0x12c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_Base_SetConfig+0x9a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a26      	ldr	r2, [pc, #152]	; (8006f20 <TIM_Base_SetConfig+0x130>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d108      	bne.n	8006e9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	68fa      	ldr	r2, [r7, #12]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	689a      	ldr	r2, [r3, #8]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a10      	ldr	r2, [pc, #64]	; (8006f04 <TIM_Base_SetConfig+0x114>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00f      	beq.n	8006ee8 <TIM_Base_SetConfig+0xf8>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a12      	ldr	r2, [pc, #72]	; (8006f14 <TIM_Base_SetConfig+0x124>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00b      	beq.n	8006ee8 <TIM_Base_SetConfig+0xf8>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a11      	ldr	r2, [pc, #68]	; (8006f18 <TIM_Base_SetConfig+0x128>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d007      	beq.n	8006ee8 <TIM_Base_SetConfig+0xf8>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a10      	ldr	r2, [pc, #64]	; (8006f1c <TIM_Base_SetConfig+0x12c>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d003      	beq.n	8006ee8 <TIM_Base_SetConfig+0xf8>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a0f      	ldr	r2, [pc, #60]	; (8006f20 <TIM_Base_SetConfig+0x130>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d103      	bne.n	8006ef0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	691a      	ldr	r2, [r3, #16]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	615a      	str	r2, [r3, #20]
}
 8006ef6:	bf00      	nop
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40000400 	.word	0x40000400
 8006f0c:	40000800 	.word	0x40000800
 8006f10:	40000c00 	.word	0x40000c00
 8006f14:	40010400 	.word	0x40010400
 8006f18:	40014000 	.word	0x40014000
 8006f1c:	40014400 	.word	0x40014400
 8006f20:	40014800 	.word	0x40014800

08006f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f023 0201 	bic.w	r2, r3, #1
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	011b      	lsls	r3, r3, #4
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f023 030a 	bic.w	r3, r3, #10
 8006f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b087      	sub	sp, #28
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	60b9      	str	r1, [r7, #8]
 8006f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0210 	bic.w	r2, r3, #16
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	031b      	lsls	r3, r3, #12
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	621a      	str	r2, [r3, #32]
}
 8006fd6:	bf00      	nop
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
	...

08006fe4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	4b09      	ldr	r3, [pc, #36]	; (800701c <TIM_ITRx_SetConfig+0x38>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	f043 0307 	orr.w	r3, r3, #7
 8007006:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	609a      	str	r2, [r3, #8]
}
 800700e:	bf00      	nop
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	ffcfff8f 	.word	0xffcfff8f

08007020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
 800702c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800703a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	021a      	lsls	r2, r3, #8
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	431a      	orrs	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4313      	orrs	r3, r2
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	609a      	str	r2, [r3, #8]
}
 8007054:	bf00      	nop
 8007056:	371c      	adds	r7, #28
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007070:	2b01      	cmp	r3, #1
 8007072:	d101      	bne.n	8007078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007074:	2302      	movs	r3, #2
 8007076:	e068      	b.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a2e      	ldr	r2, [pc, #184]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d004      	beq.n	80070ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a2d      	ldr	r2, [pc, #180]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d108      	bne.n	80070be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a1e      	ldr	r2, [pc, #120]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d01d      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ea:	d018      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1b      	ldr	r2, [pc, #108]	; (8007160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d013      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1a      	ldr	r2, [pc, #104]	; (8007164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d00e      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a18      	ldr	r2, [pc, #96]	; (8007168 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d009      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a13      	ldr	r2, [pc, #76]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d004      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a14      	ldr	r2, [pc, #80]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d10c      	bne.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4313      	orrs	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40010000 	.word	0x40010000
 800715c:	40010400 	.word	0x40010400
 8007160:	40000400 	.word	0x40000400
 8007164:	40000800 	.word	0x40000800
 8007168:	40000c00 	.word	0x40000c00
 800716c:	40001800 	.word	0x40001800

08007170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e042      	b.n	8007244 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d106      	bne.n	80071d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7fb fd9d 	bl	8002d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2224      	movs	r2, #36	; 0x24
 80071da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0201 	bic.w	r2, r2, #1
 80071ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f8c2 	bl	8007378 <UART_SetConfig>
 80071f4:	4603      	mov	r3, r0
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d101      	bne.n	80071fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e022      	b.n	8007244 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fe16 	bl	8007e38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800721a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689a      	ldr	r2, [r3, #8]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800722a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0201 	orr.w	r2, r2, #1
 800723a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fe9d 	bl	8007f7c <UART_CheckIdleState>
 8007242:	4603      	mov	r3, r0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	; 0x28
 8007250:	af02      	add	r7, sp, #8
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	603b      	str	r3, [r7, #0]
 8007258:	4613      	mov	r3, r2
 800725a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007262:	2b20      	cmp	r3, #32
 8007264:	f040 8083 	bne.w	800736e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_UART_Transmit+0x28>
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e07b      	b.n	8007370 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800727e:	2b01      	cmp	r3, #1
 8007280:	d101      	bne.n	8007286 <HAL_UART_Transmit+0x3a>
 8007282:	2302      	movs	r3, #2
 8007284:	e074      	b.n	8007370 <HAL_UART_Transmit+0x124>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2221      	movs	r2, #33	; 0x21
 800729a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800729e:	f7fb ff07 	bl	80030b0 <HAL_GetTick>
 80072a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	88fa      	ldrh	r2, [r7, #6]
 80072a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	88fa      	ldrh	r2, [r7, #6]
 80072b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072bc:	d108      	bne.n	80072d0 <HAL_UART_Transmit+0x84>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d104      	bne.n	80072d0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	e003      	b.n	80072d8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072d4:	2300      	movs	r3, #0
 80072d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80072e0:	e02c      	b.n	800733c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2200      	movs	r2, #0
 80072ea:	2180      	movs	r1, #128	; 0x80
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 fe90 	bl	8008012 <UART_WaitOnFlagUntilTimeout>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e039      	b.n	8007370 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10b      	bne.n	800731a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007310:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	3302      	adds	r3, #2
 8007316:	61bb      	str	r3, [r7, #24]
 8007318:	e007      	b.n	800732a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	781a      	ldrb	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	3301      	adds	r3, #1
 8007328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007342:	b29b      	uxth	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1cc      	bne.n	80072e2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2200      	movs	r2, #0
 8007350:	2140      	movs	r1, #64	; 0x40
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 fe5d 	bl	8008012 <UART_WaitOnFlagUntilTimeout>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e006      	b.n	8007370 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2220      	movs	r2, #32
 8007366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800736a:	2300      	movs	r3, #0
 800736c:	e000      	b.n	8007370 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800736e:	2302      	movs	r3, #2
  }
}
 8007370:	4618      	mov	r0, r3
 8007372:	3720      	adds	r7, #32
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007378:	b5b0      	push	{r4, r5, r7, lr}
 800737a:	b08e      	sub	sp, #56	; 0x38
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689a      	ldr	r2, [r3, #8]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	431a      	orrs	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	69db      	ldr	r3, [r3, #28]
 800739a:	4313      	orrs	r3, r2
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	4bbf      	ldr	r3, [pc, #764]	; (80076a4 <UART_SetConfig+0x32c>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073ae:	430b      	orrs	r3, r1
 80073b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	68da      	ldr	r2, [r3, #12]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4ab5      	ldr	r2, [pc, #724]	; (80076a8 <UART_SetConfig+0x330>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d004      	beq.n	80073e2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073de:	4313      	orrs	r3, r2
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	689a      	ldr	r2, [r3, #8]
 80073e8:	4bb0      	ldr	r3, [pc, #704]	; (80076ac <UART_SetConfig+0x334>)
 80073ea:	4013      	ands	r3, r2
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	6812      	ldr	r2, [r2, #0]
 80073f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80073f2:	430b      	orrs	r3, r1
 80073f4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	f023 010f 	bic.w	r1, r3, #15
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4aa7      	ldr	r2, [pc, #668]	; (80076b0 <UART_SetConfig+0x338>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d176      	bne.n	8007504 <UART_SetConfig+0x18c>
 8007416:	4ba7      	ldr	r3, [pc, #668]	; (80076b4 <UART_SetConfig+0x33c>)
 8007418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800741e:	2b28      	cmp	r3, #40	; 0x28
 8007420:	d86c      	bhi.n	80074fc <UART_SetConfig+0x184>
 8007422:	a201      	add	r2, pc, #4	; (adr r2, 8007428 <UART_SetConfig+0xb0>)
 8007424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007428:	080074cd 	.word	0x080074cd
 800742c:	080074fd 	.word	0x080074fd
 8007430:	080074fd 	.word	0x080074fd
 8007434:	080074fd 	.word	0x080074fd
 8007438:	080074fd 	.word	0x080074fd
 800743c:	080074fd 	.word	0x080074fd
 8007440:	080074fd 	.word	0x080074fd
 8007444:	080074fd 	.word	0x080074fd
 8007448:	080074d5 	.word	0x080074d5
 800744c:	080074fd 	.word	0x080074fd
 8007450:	080074fd 	.word	0x080074fd
 8007454:	080074fd 	.word	0x080074fd
 8007458:	080074fd 	.word	0x080074fd
 800745c:	080074fd 	.word	0x080074fd
 8007460:	080074fd 	.word	0x080074fd
 8007464:	080074fd 	.word	0x080074fd
 8007468:	080074dd 	.word	0x080074dd
 800746c:	080074fd 	.word	0x080074fd
 8007470:	080074fd 	.word	0x080074fd
 8007474:	080074fd 	.word	0x080074fd
 8007478:	080074fd 	.word	0x080074fd
 800747c:	080074fd 	.word	0x080074fd
 8007480:	080074fd 	.word	0x080074fd
 8007484:	080074fd 	.word	0x080074fd
 8007488:	080074e5 	.word	0x080074e5
 800748c:	080074fd 	.word	0x080074fd
 8007490:	080074fd 	.word	0x080074fd
 8007494:	080074fd 	.word	0x080074fd
 8007498:	080074fd 	.word	0x080074fd
 800749c:	080074fd 	.word	0x080074fd
 80074a0:	080074fd 	.word	0x080074fd
 80074a4:	080074fd 	.word	0x080074fd
 80074a8:	080074ed 	.word	0x080074ed
 80074ac:	080074fd 	.word	0x080074fd
 80074b0:	080074fd 	.word	0x080074fd
 80074b4:	080074fd 	.word	0x080074fd
 80074b8:	080074fd 	.word	0x080074fd
 80074bc:	080074fd 	.word	0x080074fd
 80074c0:	080074fd 	.word	0x080074fd
 80074c4:	080074fd 	.word	0x080074fd
 80074c8:	080074f5 	.word	0x080074f5
 80074cc:	2301      	movs	r3, #1
 80074ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074d2:	e222      	b.n	800791a <UART_SetConfig+0x5a2>
 80074d4:	2304      	movs	r3, #4
 80074d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074da:	e21e      	b.n	800791a <UART_SetConfig+0x5a2>
 80074dc:	2308      	movs	r3, #8
 80074de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074e2:	e21a      	b.n	800791a <UART_SetConfig+0x5a2>
 80074e4:	2310      	movs	r3, #16
 80074e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074ea:	e216      	b.n	800791a <UART_SetConfig+0x5a2>
 80074ec:	2320      	movs	r3, #32
 80074ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074f2:	e212      	b.n	800791a <UART_SetConfig+0x5a2>
 80074f4:	2340      	movs	r3, #64	; 0x40
 80074f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80074fa:	e20e      	b.n	800791a <UART_SetConfig+0x5a2>
 80074fc:	2380      	movs	r3, #128	; 0x80
 80074fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007502:	e20a      	b.n	800791a <UART_SetConfig+0x5a2>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a6b      	ldr	r2, [pc, #428]	; (80076b8 <UART_SetConfig+0x340>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d130      	bne.n	8007570 <UART_SetConfig+0x1f8>
 800750e:	4b69      	ldr	r3, [pc, #420]	; (80076b4 <UART_SetConfig+0x33c>)
 8007510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	2b05      	cmp	r3, #5
 8007518:	d826      	bhi.n	8007568 <UART_SetConfig+0x1f0>
 800751a:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <UART_SetConfig+0x1a8>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	08007539 	.word	0x08007539
 8007524:	08007541 	.word	0x08007541
 8007528:	08007549 	.word	0x08007549
 800752c:	08007551 	.word	0x08007551
 8007530:	08007559 	.word	0x08007559
 8007534:	08007561 	.word	0x08007561
 8007538:	2300      	movs	r3, #0
 800753a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800753e:	e1ec      	b.n	800791a <UART_SetConfig+0x5a2>
 8007540:	2304      	movs	r3, #4
 8007542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007546:	e1e8      	b.n	800791a <UART_SetConfig+0x5a2>
 8007548:	2308      	movs	r3, #8
 800754a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800754e:	e1e4      	b.n	800791a <UART_SetConfig+0x5a2>
 8007550:	2310      	movs	r3, #16
 8007552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007556:	e1e0      	b.n	800791a <UART_SetConfig+0x5a2>
 8007558:	2320      	movs	r3, #32
 800755a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800755e:	e1dc      	b.n	800791a <UART_SetConfig+0x5a2>
 8007560:	2340      	movs	r3, #64	; 0x40
 8007562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007566:	e1d8      	b.n	800791a <UART_SetConfig+0x5a2>
 8007568:	2380      	movs	r3, #128	; 0x80
 800756a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800756e:	e1d4      	b.n	800791a <UART_SetConfig+0x5a2>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a51      	ldr	r2, [pc, #324]	; (80076bc <UART_SetConfig+0x344>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d130      	bne.n	80075dc <UART_SetConfig+0x264>
 800757a:	4b4e      	ldr	r3, [pc, #312]	; (80076b4 <UART_SetConfig+0x33c>)
 800757c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757e:	f003 0307 	and.w	r3, r3, #7
 8007582:	2b05      	cmp	r3, #5
 8007584:	d826      	bhi.n	80075d4 <UART_SetConfig+0x25c>
 8007586:	a201      	add	r2, pc, #4	; (adr r2, 800758c <UART_SetConfig+0x214>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	080075a5 	.word	0x080075a5
 8007590:	080075ad 	.word	0x080075ad
 8007594:	080075b5 	.word	0x080075b5
 8007598:	080075bd 	.word	0x080075bd
 800759c:	080075c5 	.word	0x080075c5
 80075a0:	080075cd 	.word	0x080075cd
 80075a4:	2300      	movs	r3, #0
 80075a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075aa:	e1b6      	b.n	800791a <UART_SetConfig+0x5a2>
 80075ac:	2304      	movs	r3, #4
 80075ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075b2:	e1b2      	b.n	800791a <UART_SetConfig+0x5a2>
 80075b4:	2308      	movs	r3, #8
 80075b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ba:	e1ae      	b.n	800791a <UART_SetConfig+0x5a2>
 80075bc:	2310      	movs	r3, #16
 80075be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075c2:	e1aa      	b.n	800791a <UART_SetConfig+0x5a2>
 80075c4:	2320      	movs	r3, #32
 80075c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075ca:	e1a6      	b.n	800791a <UART_SetConfig+0x5a2>
 80075cc:	2340      	movs	r3, #64	; 0x40
 80075ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075d2:	e1a2      	b.n	800791a <UART_SetConfig+0x5a2>
 80075d4:	2380      	movs	r3, #128	; 0x80
 80075d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075da:	e19e      	b.n	800791a <UART_SetConfig+0x5a2>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a37      	ldr	r2, [pc, #220]	; (80076c0 <UART_SetConfig+0x348>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d130      	bne.n	8007648 <UART_SetConfig+0x2d0>
 80075e6:	4b33      	ldr	r3, [pc, #204]	; (80076b4 <UART_SetConfig+0x33c>)
 80075e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ea:	f003 0307 	and.w	r3, r3, #7
 80075ee:	2b05      	cmp	r3, #5
 80075f0:	d826      	bhi.n	8007640 <UART_SetConfig+0x2c8>
 80075f2:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <UART_SetConfig+0x280>)
 80075f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f8:	08007611 	.word	0x08007611
 80075fc:	08007619 	.word	0x08007619
 8007600:	08007621 	.word	0x08007621
 8007604:	08007629 	.word	0x08007629
 8007608:	08007631 	.word	0x08007631
 800760c:	08007639 	.word	0x08007639
 8007610:	2300      	movs	r3, #0
 8007612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007616:	e180      	b.n	800791a <UART_SetConfig+0x5a2>
 8007618:	2304      	movs	r3, #4
 800761a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800761e:	e17c      	b.n	800791a <UART_SetConfig+0x5a2>
 8007620:	2308      	movs	r3, #8
 8007622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007626:	e178      	b.n	800791a <UART_SetConfig+0x5a2>
 8007628:	2310      	movs	r3, #16
 800762a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800762e:	e174      	b.n	800791a <UART_SetConfig+0x5a2>
 8007630:	2320      	movs	r3, #32
 8007632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007636:	e170      	b.n	800791a <UART_SetConfig+0x5a2>
 8007638:	2340      	movs	r3, #64	; 0x40
 800763a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800763e:	e16c      	b.n	800791a <UART_SetConfig+0x5a2>
 8007640:	2380      	movs	r3, #128	; 0x80
 8007642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007646:	e168      	b.n	800791a <UART_SetConfig+0x5a2>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <UART_SetConfig+0x34c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d142      	bne.n	80076d8 <UART_SetConfig+0x360>
 8007652:	4b18      	ldr	r3, [pc, #96]	; (80076b4 <UART_SetConfig+0x33c>)
 8007654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	2b05      	cmp	r3, #5
 800765c:	d838      	bhi.n	80076d0 <UART_SetConfig+0x358>
 800765e:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <UART_SetConfig+0x2ec>)
 8007660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007664:	0800767d 	.word	0x0800767d
 8007668:	08007685 	.word	0x08007685
 800766c:	0800768d 	.word	0x0800768d
 8007670:	08007695 	.word	0x08007695
 8007674:	0800769d 	.word	0x0800769d
 8007678:	080076c9 	.word	0x080076c9
 800767c:	2300      	movs	r3, #0
 800767e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007682:	e14a      	b.n	800791a <UART_SetConfig+0x5a2>
 8007684:	2304      	movs	r3, #4
 8007686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800768a:	e146      	b.n	800791a <UART_SetConfig+0x5a2>
 800768c:	2308      	movs	r3, #8
 800768e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007692:	e142      	b.n	800791a <UART_SetConfig+0x5a2>
 8007694:	2310      	movs	r3, #16
 8007696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800769a:	e13e      	b.n	800791a <UART_SetConfig+0x5a2>
 800769c:	2320      	movs	r3, #32
 800769e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076a2:	e13a      	b.n	800791a <UART_SetConfig+0x5a2>
 80076a4:	cfff69f3 	.word	0xcfff69f3
 80076a8:	58000c00 	.word	0x58000c00
 80076ac:	11fff4ff 	.word	0x11fff4ff
 80076b0:	40011000 	.word	0x40011000
 80076b4:	58024400 	.word	0x58024400
 80076b8:	40004400 	.word	0x40004400
 80076bc:	40004800 	.word	0x40004800
 80076c0:	40004c00 	.word	0x40004c00
 80076c4:	40005000 	.word	0x40005000
 80076c8:	2340      	movs	r3, #64	; 0x40
 80076ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076ce:	e124      	b.n	800791a <UART_SetConfig+0x5a2>
 80076d0:	2380      	movs	r3, #128	; 0x80
 80076d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80076d6:	e120      	b.n	800791a <UART_SetConfig+0x5a2>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4acc      	ldr	r2, [pc, #816]	; (8007a10 <UART_SetConfig+0x698>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d176      	bne.n	80077d0 <UART_SetConfig+0x458>
 80076e2:	4bcc      	ldr	r3, [pc, #816]	; (8007a14 <UART_SetConfig+0x69c>)
 80076e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076ea:	2b28      	cmp	r3, #40	; 0x28
 80076ec:	d86c      	bhi.n	80077c8 <UART_SetConfig+0x450>
 80076ee:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <UART_SetConfig+0x37c>)
 80076f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f4:	08007799 	.word	0x08007799
 80076f8:	080077c9 	.word	0x080077c9
 80076fc:	080077c9 	.word	0x080077c9
 8007700:	080077c9 	.word	0x080077c9
 8007704:	080077c9 	.word	0x080077c9
 8007708:	080077c9 	.word	0x080077c9
 800770c:	080077c9 	.word	0x080077c9
 8007710:	080077c9 	.word	0x080077c9
 8007714:	080077a1 	.word	0x080077a1
 8007718:	080077c9 	.word	0x080077c9
 800771c:	080077c9 	.word	0x080077c9
 8007720:	080077c9 	.word	0x080077c9
 8007724:	080077c9 	.word	0x080077c9
 8007728:	080077c9 	.word	0x080077c9
 800772c:	080077c9 	.word	0x080077c9
 8007730:	080077c9 	.word	0x080077c9
 8007734:	080077a9 	.word	0x080077a9
 8007738:	080077c9 	.word	0x080077c9
 800773c:	080077c9 	.word	0x080077c9
 8007740:	080077c9 	.word	0x080077c9
 8007744:	080077c9 	.word	0x080077c9
 8007748:	080077c9 	.word	0x080077c9
 800774c:	080077c9 	.word	0x080077c9
 8007750:	080077c9 	.word	0x080077c9
 8007754:	080077b1 	.word	0x080077b1
 8007758:	080077c9 	.word	0x080077c9
 800775c:	080077c9 	.word	0x080077c9
 8007760:	080077c9 	.word	0x080077c9
 8007764:	080077c9 	.word	0x080077c9
 8007768:	080077c9 	.word	0x080077c9
 800776c:	080077c9 	.word	0x080077c9
 8007770:	080077c9 	.word	0x080077c9
 8007774:	080077b9 	.word	0x080077b9
 8007778:	080077c9 	.word	0x080077c9
 800777c:	080077c9 	.word	0x080077c9
 8007780:	080077c9 	.word	0x080077c9
 8007784:	080077c9 	.word	0x080077c9
 8007788:	080077c9 	.word	0x080077c9
 800778c:	080077c9 	.word	0x080077c9
 8007790:	080077c9 	.word	0x080077c9
 8007794:	080077c1 	.word	0x080077c1
 8007798:	2301      	movs	r3, #1
 800779a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800779e:	e0bc      	b.n	800791a <UART_SetConfig+0x5a2>
 80077a0:	2304      	movs	r3, #4
 80077a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077a6:	e0b8      	b.n	800791a <UART_SetConfig+0x5a2>
 80077a8:	2308      	movs	r3, #8
 80077aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ae:	e0b4      	b.n	800791a <UART_SetConfig+0x5a2>
 80077b0:	2310      	movs	r3, #16
 80077b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077b6:	e0b0      	b.n	800791a <UART_SetConfig+0x5a2>
 80077b8:	2320      	movs	r3, #32
 80077ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077be:	e0ac      	b.n	800791a <UART_SetConfig+0x5a2>
 80077c0:	2340      	movs	r3, #64	; 0x40
 80077c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077c6:	e0a8      	b.n	800791a <UART_SetConfig+0x5a2>
 80077c8:	2380      	movs	r3, #128	; 0x80
 80077ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077ce:	e0a4      	b.n	800791a <UART_SetConfig+0x5a2>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a90      	ldr	r2, [pc, #576]	; (8007a18 <UART_SetConfig+0x6a0>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d130      	bne.n	800783c <UART_SetConfig+0x4c4>
 80077da:	4b8e      	ldr	r3, [pc, #568]	; (8007a14 <UART_SetConfig+0x69c>)
 80077dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077de:	f003 0307 	and.w	r3, r3, #7
 80077e2:	2b05      	cmp	r3, #5
 80077e4:	d826      	bhi.n	8007834 <UART_SetConfig+0x4bc>
 80077e6:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <UART_SetConfig+0x474>)
 80077e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ec:	08007805 	.word	0x08007805
 80077f0:	0800780d 	.word	0x0800780d
 80077f4:	08007815 	.word	0x08007815
 80077f8:	0800781d 	.word	0x0800781d
 80077fc:	08007825 	.word	0x08007825
 8007800:	0800782d 	.word	0x0800782d
 8007804:	2300      	movs	r3, #0
 8007806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800780a:	e086      	b.n	800791a <UART_SetConfig+0x5a2>
 800780c:	2304      	movs	r3, #4
 800780e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007812:	e082      	b.n	800791a <UART_SetConfig+0x5a2>
 8007814:	2308      	movs	r3, #8
 8007816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800781a:	e07e      	b.n	800791a <UART_SetConfig+0x5a2>
 800781c:	2310      	movs	r3, #16
 800781e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007822:	e07a      	b.n	800791a <UART_SetConfig+0x5a2>
 8007824:	2320      	movs	r3, #32
 8007826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800782a:	e076      	b.n	800791a <UART_SetConfig+0x5a2>
 800782c:	2340      	movs	r3, #64	; 0x40
 800782e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007832:	e072      	b.n	800791a <UART_SetConfig+0x5a2>
 8007834:	2380      	movs	r3, #128	; 0x80
 8007836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800783a:	e06e      	b.n	800791a <UART_SetConfig+0x5a2>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a76      	ldr	r2, [pc, #472]	; (8007a1c <UART_SetConfig+0x6a4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d130      	bne.n	80078a8 <UART_SetConfig+0x530>
 8007846:	4b73      	ldr	r3, [pc, #460]	; (8007a14 <UART_SetConfig+0x69c>)
 8007848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784a:	f003 0307 	and.w	r3, r3, #7
 800784e:	2b05      	cmp	r3, #5
 8007850:	d826      	bhi.n	80078a0 <UART_SetConfig+0x528>
 8007852:	a201      	add	r2, pc, #4	; (adr r2, 8007858 <UART_SetConfig+0x4e0>)
 8007854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007858:	08007871 	.word	0x08007871
 800785c:	08007879 	.word	0x08007879
 8007860:	08007881 	.word	0x08007881
 8007864:	08007889 	.word	0x08007889
 8007868:	08007891 	.word	0x08007891
 800786c:	08007899 	.word	0x08007899
 8007870:	2300      	movs	r3, #0
 8007872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007876:	e050      	b.n	800791a <UART_SetConfig+0x5a2>
 8007878:	2304      	movs	r3, #4
 800787a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800787e:	e04c      	b.n	800791a <UART_SetConfig+0x5a2>
 8007880:	2308      	movs	r3, #8
 8007882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007886:	e048      	b.n	800791a <UART_SetConfig+0x5a2>
 8007888:	2310      	movs	r3, #16
 800788a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800788e:	e044      	b.n	800791a <UART_SetConfig+0x5a2>
 8007890:	2320      	movs	r3, #32
 8007892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007896:	e040      	b.n	800791a <UART_SetConfig+0x5a2>
 8007898:	2340      	movs	r3, #64	; 0x40
 800789a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800789e:	e03c      	b.n	800791a <UART_SetConfig+0x5a2>
 80078a0:	2380      	movs	r3, #128	; 0x80
 80078a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078a6:	e038      	b.n	800791a <UART_SetConfig+0x5a2>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a5c      	ldr	r2, [pc, #368]	; (8007a20 <UART_SetConfig+0x6a8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d130      	bne.n	8007914 <UART_SetConfig+0x59c>
 80078b2:	4b58      	ldr	r3, [pc, #352]	; (8007a14 <UART_SetConfig+0x69c>)
 80078b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b6:	f003 0307 	and.w	r3, r3, #7
 80078ba:	2b05      	cmp	r3, #5
 80078bc:	d826      	bhi.n	800790c <UART_SetConfig+0x594>
 80078be:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <UART_SetConfig+0x54c>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	080078dd 	.word	0x080078dd
 80078c8:	080078e5 	.word	0x080078e5
 80078cc:	080078ed 	.word	0x080078ed
 80078d0:	080078f5 	.word	0x080078f5
 80078d4:	080078fd 	.word	0x080078fd
 80078d8:	08007905 	.word	0x08007905
 80078dc:	2302      	movs	r3, #2
 80078de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078e2:	e01a      	b.n	800791a <UART_SetConfig+0x5a2>
 80078e4:	2304      	movs	r3, #4
 80078e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078ea:	e016      	b.n	800791a <UART_SetConfig+0x5a2>
 80078ec:	2308      	movs	r3, #8
 80078ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078f2:	e012      	b.n	800791a <UART_SetConfig+0x5a2>
 80078f4:	2310      	movs	r3, #16
 80078f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80078fa:	e00e      	b.n	800791a <UART_SetConfig+0x5a2>
 80078fc:	2320      	movs	r3, #32
 80078fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007902:	e00a      	b.n	800791a <UART_SetConfig+0x5a2>
 8007904:	2340      	movs	r3, #64	; 0x40
 8007906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800790a:	e006      	b.n	800791a <UART_SetConfig+0x5a2>
 800790c:	2380      	movs	r3, #128	; 0x80
 800790e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007912:	e002      	b.n	800791a <UART_SetConfig+0x5a2>
 8007914:	2380      	movs	r3, #128	; 0x80
 8007916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a40      	ldr	r2, [pc, #256]	; (8007a20 <UART_SetConfig+0x6a8>)
 8007920:	4293      	cmp	r3, r2
 8007922:	f040 80ef 	bne.w	8007b04 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007926:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800792a:	2b20      	cmp	r3, #32
 800792c:	dc46      	bgt.n	80079bc <UART_SetConfig+0x644>
 800792e:	2b02      	cmp	r3, #2
 8007930:	f2c0 8081 	blt.w	8007a36 <UART_SetConfig+0x6be>
 8007934:	3b02      	subs	r3, #2
 8007936:	2b1e      	cmp	r3, #30
 8007938:	d87d      	bhi.n	8007a36 <UART_SetConfig+0x6be>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <UART_SetConfig+0x5c8>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	080079c3 	.word	0x080079c3
 8007944:	08007a37 	.word	0x08007a37
 8007948:	080079cb 	.word	0x080079cb
 800794c:	08007a37 	.word	0x08007a37
 8007950:	08007a37 	.word	0x08007a37
 8007954:	08007a37 	.word	0x08007a37
 8007958:	080079db 	.word	0x080079db
 800795c:	08007a37 	.word	0x08007a37
 8007960:	08007a37 	.word	0x08007a37
 8007964:	08007a37 	.word	0x08007a37
 8007968:	08007a37 	.word	0x08007a37
 800796c:	08007a37 	.word	0x08007a37
 8007970:	08007a37 	.word	0x08007a37
 8007974:	08007a37 	.word	0x08007a37
 8007978:	080079eb 	.word	0x080079eb
 800797c:	08007a37 	.word	0x08007a37
 8007980:	08007a37 	.word	0x08007a37
 8007984:	08007a37 	.word	0x08007a37
 8007988:	08007a37 	.word	0x08007a37
 800798c:	08007a37 	.word	0x08007a37
 8007990:	08007a37 	.word	0x08007a37
 8007994:	08007a37 	.word	0x08007a37
 8007998:	08007a37 	.word	0x08007a37
 800799c:	08007a37 	.word	0x08007a37
 80079a0:	08007a37 	.word	0x08007a37
 80079a4:	08007a37 	.word	0x08007a37
 80079a8:	08007a37 	.word	0x08007a37
 80079ac:	08007a37 	.word	0x08007a37
 80079b0:	08007a37 	.word	0x08007a37
 80079b4:	08007a37 	.word	0x08007a37
 80079b8:	08007a29 	.word	0x08007a29
 80079bc:	2b40      	cmp	r3, #64	; 0x40
 80079be:	d036      	beq.n	8007a2e <UART_SetConfig+0x6b6>
 80079c0:	e039      	b.n	8007a36 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80079c2:	f7fe fb57 	bl	8006074 <HAL_RCCEx_GetD3PCLK1Freq>
 80079c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80079c8:	e03b      	b.n	8007a42 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ca:	f107 0314 	add.w	r3, r7, #20
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fe fb66 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079d8:	e033      	b.n	8007a42 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079da:	f107 0308 	add.w	r3, r7, #8
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fe fcb2 	bl	8006348 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80079e8:	e02b      	b.n	8007a42 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079ea:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <UART_SetConfig+0x69c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0320 	and.w	r3, r3, #32
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d009      	beq.n	8007a0a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80079f6:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <UART_SetConfig+0x69c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	08db      	lsrs	r3, r3, #3
 80079fc:	f003 0303 	and.w	r3, r3, #3
 8007a00:	4a08      	ldr	r2, [pc, #32]	; (8007a24 <UART_SetConfig+0x6ac>)
 8007a02:	fa22 f303 	lsr.w	r3, r2, r3
 8007a06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a08:	e01b      	b.n	8007a42 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8007a0a:	4b06      	ldr	r3, [pc, #24]	; (8007a24 <UART_SetConfig+0x6ac>)
 8007a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a0e:	e018      	b.n	8007a42 <UART_SetConfig+0x6ca>
 8007a10:	40011400 	.word	0x40011400
 8007a14:	58024400 	.word	0x58024400
 8007a18:	40007800 	.word	0x40007800
 8007a1c:	40007c00 	.word	0x40007c00
 8007a20:	58000c00 	.word	0x58000c00
 8007a24:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007a28:	4bc4      	ldr	r3, [pc, #784]	; (8007d3c <UART_SetConfig+0x9c4>)
 8007a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a2c:	e009      	b.n	8007a42 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a34:	e005      	b.n	8007a42 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8007a36:	2300      	movs	r3, #0
 8007a38:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007a40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 81da 	beq.w	8007dfe <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	4abc      	ldr	r2, [pc, #752]	; (8007d40 <UART_SetConfig+0x9c8>)
 8007a50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a54:	461a      	mov	r2, r3
 8007a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a5c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	4613      	mov	r3, r2
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	4413      	add	r3, r2
 8007a68:	6a3a      	ldr	r2, [r7, #32]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d305      	bcc.n	8007a7a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a74:	6a3a      	ldr	r2, [r7, #32]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d903      	bls.n	8007a82 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007a80:	e1bd      	b.n	8007dfe <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	4618      	mov	r0, r3
 8007a86:	f04f 0100 	mov.w	r1, #0
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	4aac      	ldr	r2, [pc, #688]	; (8007d40 <UART_SetConfig+0x9c8>)
 8007a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	f7f8 fe35 	bl	8000708 <__aeabi_uldivmod>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f04f 0200 	mov.w	r2, #0
 8007aaa:	f04f 0300 	mov.w	r3, #0
 8007aae:	020b      	lsls	r3, r1, #8
 8007ab0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ab4:	0202      	lsls	r2, r0, #8
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	6849      	ldr	r1, [r1, #4]
 8007aba:	0849      	lsrs	r1, r1, #1
 8007abc:	4608      	mov	r0, r1
 8007abe:	f04f 0100 	mov.w	r1, #0
 8007ac2:	1814      	adds	r4, r2, r0
 8007ac4:	eb43 0501 	adc.w	r5, r3, r1
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	461a      	mov	r2, r3
 8007ace:	f04f 0300 	mov.w	r3, #0
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	f7f8 fe17 	bl	8000708 <__aeabi_uldivmod>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4613      	mov	r3, r2
 8007ae0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ae8:	d308      	bcc.n	8007afc <UART_SetConfig+0x784>
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007af0:	d204      	bcs.n	8007afc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007af8:	60da      	str	r2, [r3, #12]
 8007afa:	e180      	b.n	8007dfe <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007b02:	e17c      	b.n	8007dfe <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b0c:	f040 80bf 	bne.w	8007c8e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8007b10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b14:	2b20      	cmp	r3, #32
 8007b16:	dc49      	bgt.n	8007bac <UART_SetConfig+0x834>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	db7c      	blt.n	8007c16 <UART_SetConfig+0x89e>
 8007b1c:	2b20      	cmp	r3, #32
 8007b1e:	d87a      	bhi.n	8007c16 <UART_SetConfig+0x89e>
 8007b20:	a201      	add	r2, pc, #4	; (adr r2, 8007b28 <UART_SetConfig+0x7b0>)
 8007b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b26:	bf00      	nop
 8007b28:	08007bb3 	.word	0x08007bb3
 8007b2c:	08007bbb 	.word	0x08007bbb
 8007b30:	08007c17 	.word	0x08007c17
 8007b34:	08007c17 	.word	0x08007c17
 8007b38:	08007bc3 	.word	0x08007bc3
 8007b3c:	08007c17 	.word	0x08007c17
 8007b40:	08007c17 	.word	0x08007c17
 8007b44:	08007c17 	.word	0x08007c17
 8007b48:	08007bd3 	.word	0x08007bd3
 8007b4c:	08007c17 	.word	0x08007c17
 8007b50:	08007c17 	.word	0x08007c17
 8007b54:	08007c17 	.word	0x08007c17
 8007b58:	08007c17 	.word	0x08007c17
 8007b5c:	08007c17 	.word	0x08007c17
 8007b60:	08007c17 	.word	0x08007c17
 8007b64:	08007c17 	.word	0x08007c17
 8007b68:	08007be3 	.word	0x08007be3
 8007b6c:	08007c17 	.word	0x08007c17
 8007b70:	08007c17 	.word	0x08007c17
 8007b74:	08007c17 	.word	0x08007c17
 8007b78:	08007c17 	.word	0x08007c17
 8007b7c:	08007c17 	.word	0x08007c17
 8007b80:	08007c17 	.word	0x08007c17
 8007b84:	08007c17 	.word	0x08007c17
 8007b88:	08007c17 	.word	0x08007c17
 8007b8c:	08007c17 	.word	0x08007c17
 8007b90:	08007c17 	.word	0x08007c17
 8007b94:	08007c17 	.word	0x08007c17
 8007b98:	08007c17 	.word	0x08007c17
 8007b9c:	08007c17 	.word	0x08007c17
 8007ba0:	08007c17 	.word	0x08007c17
 8007ba4:	08007c17 	.word	0x08007c17
 8007ba8:	08007c09 	.word	0x08007c09
 8007bac:	2b40      	cmp	r3, #64	; 0x40
 8007bae:	d02e      	beq.n	8007c0e <UART_SetConfig+0x896>
 8007bb0:	e031      	b.n	8007c16 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bb2:	f7fd faf3 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 8007bb6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007bb8:	e033      	b.n	8007c22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bba:	f7fd fb05 	bl	80051c8 <HAL_RCC_GetPCLK2Freq>
 8007bbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007bc0:	e02f      	b.n	8007c22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bc2:	f107 0314 	add.w	r3, r7, #20
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe fa6a 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007bcc:	69bb      	ldr	r3, [r7, #24]
 8007bce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007bd0:	e027      	b.n	8007c22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bd2:	f107 0308 	add.w	r3, r7, #8
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fbb6 	bl	8006348 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007be0:	e01f      	b.n	8007c22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007be2:	4b58      	ldr	r3, [pc, #352]	; (8007d44 <UART_SetConfig+0x9cc>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d009      	beq.n	8007c02 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007bee:	4b55      	ldr	r3, [pc, #340]	; (8007d44 <UART_SetConfig+0x9cc>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	08db      	lsrs	r3, r3, #3
 8007bf4:	f003 0303 	and.w	r3, r3, #3
 8007bf8:	4a53      	ldr	r2, [pc, #332]	; (8007d48 <UART_SetConfig+0x9d0>)
 8007bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c00:	e00f      	b.n	8007c22 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8007c02:	4b51      	ldr	r3, [pc, #324]	; (8007d48 <UART_SetConfig+0x9d0>)
 8007c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c06:	e00c      	b.n	8007c22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007c08:	4b4c      	ldr	r3, [pc, #304]	; (8007d3c <UART_SetConfig+0x9c4>)
 8007c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c0c:	e009      	b.n	8007c22 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c14:	e005      	b.n	8007c22 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007c20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 80ea 	beq.w	8007dfe <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	4a44      	ldr	r2, [pc, #272]	; (8007d40 <UART_SetConfig+0x9c8>)
 8007c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c34:	461a      	mov	r2, r3
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c3c:	005a      	lsls	r2, r3, #1
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	441a      	add	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c54:	2b0f      	cmp	r3, #15
 8007c56:	d916      	bls.n	8007c86 <UART_SetConfig+0x90e>
 8007c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c5e:	d212      	bcs.n	8007c86 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	f023 030f 	bic.w	r3, r3, #15
 8007c68:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	085b      	lsrs	r3, r3, #1
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c82:	60da      	str	r2, [r3, #12]
 8007c84:	e0bb      	b.n	8007dfe <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007c8c:	e0b7      	b.n	8007dfe <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c92:	2b20      	cmp	r3, #32
 8007c94:	dc4a      	bgt.n	8007d2c <UART_SetConfig+0x9b4>
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f2c0 8086 	blt.w	8007da8 <UART_SetConfig+0xa30>
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	f200 8083 	bhi.w	8007da8 <UART_SetConfig+0xa30>
 8007ca2:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <UART_SetConfig+0x930>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007d33 	.word	0x08007d33
 8007cac:	08007d4d 	.word	0x08007d4d
 8007cb0:	08007da9 	.word	0x08007da9
 8007cb4:	08007da9 	.word	0x08007da9
 8007cb8:	08007d55 	.word	0x08007d55
 8007cbc:	08007da9 	.word	0x08007da9
 8007cc0:	08007da9 	.word	0x08007da9
 8007cc4:	08007da9 	.word	0x08007da9
 8007cc8:	08007d65 	.word	0x08007d65
 8007ccc:	08007da9 	.word	0x08007da9
 8007cd0:	08007da9 	.word	0x08007da9
 8007cd4:	08007da9 	.word	0x08007da9
 8007cd8:	08007da9 	.word	0x08007da9
 8007cdc:	08007da9 	.word	0x08007da9
 8007ce0:	08007da9 	.word	0x08007da9
 8007ce4:	08007da9 	.word	0x08007da9
 8007ce8:	08007d75 	.word	0x08007d75
 8007cec:	08007da9 	.word	0x08007da9
 8007cf0:	08007da9 	.word	0x08007da9
 8007cf4:	08007da9 	.word	0x08007da9
 8007cf8:	08007da9 	.word	0x08007da9
 8007cfc:	08007da9 	.word	0x08007da9
 8007d00:	08007da9 	.word	0x08007da9
 8007d04:	08007da9 	.word	0x08007da9
 8007d08:	08007da9 	.word	0x08007da9
 8007d0c:	08007da9 	.word	0x08007da9
 8007d10:	08007da9 	.word	0x08007da9
 8007d14:	08007da9 	.word	0x08007da9
 8007d18:	08007da9 	.word	0x08007da9
 8007d1c:	08007da9 	.word	0x08007da9
 8007d20:	08007da9 	.word	0x08007da9
 8007d24:	08007da9 	.word	0x08007da9
 8007d28:	08007d9b 	.word	0x08007d9b
 8007d2c:	2b40      	cmp	r3, #64	; 0x40
 8007d2e:	d037      	beq.n	8007da0 <UART_SetConfig+0xa28>
 8007d30:	e03a      	b.n	8007da8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d32:	f7fd fa33 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 8007d36:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007d38:	e03c      	b.n	8007db4 <UART_SetConfig+0xa3c>
 8007d3a:	bf00      	nop
 8007d3c:	003d0900 	.word	0x003d0900
 8007d40:	0800d16c 	.word	0x0800d16c
 8007d44:	58024400 	.word	0x58024400
 8007d48:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d4c:	f7fd fa3c 	bl	80051c8 <HAL_RCC_GetPCLK2Freq>
 8007d50:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007d52:	e02f      	b.n	8007db4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d54:	f107 0314 	add.w	r3, r7, #20
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe f9a1 	bl	80060a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d62:	e027      	b.n	8007db4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d64:	f107 0308 	add.w	r3, r7, #8
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fe faed 	bl	8006348 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d72:	e01f      	b.n	8007db4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d74:	4b2c      	ldr	r3, [pc, #176]	; (8007e28 <UART_SetConfig+0xab0>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0320 	and.w	r3, r3, #32
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d009      	beq.n	8007d94 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d80:	4b29      	ldr	r3, [pc, #164]	; (8007e28 <UART_SetConfig+0xab0>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	08db      	lsrs	r3, r3, #3
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	4a28      	ldr	r2, [pc, #160]	; (8007e2c <UART_SetConfig+0xab4>)
 8007d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d92:	e00f      	b.n	8007db4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8007d94:	4b25      	ldr	r3, [pc, #148]	; (8007e2c <UART_SetConfig+0xab4>)
 8007d96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d98:	e00c      	b.n	8007db4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d9a:	4b25      	ldr	r3, [pc, #148]	; (8007e30 <UART_SetConfig+0xab8>)
 8007d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007d9e:	e009      	b.n	8007db4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007da4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007da6:	e005      	b.n	8007db4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007db2:	bf00      	nop
    }

    if (pclk != 0U)
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d021      	beq.n	8007dfe <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	4a1d      	ldr	r2, [pc, #116]	; (8007e34 <UART_SetConfig+0xabc>)
 8007dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc8:	fbb3 f2f2 	udiv	r2, r3, r2
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	085b      	lsrs	r3, r3, #1
 8007dd2:	441a      	add	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	2b0f      	cmp	r3, #15
 8007de4:	d908      	bls.n	8007df8 <UART_SetConfig+0xa80>
 8007de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dec:	d204      	bcs.n	8007df8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007df4:	60da      	str	r2, [r3, #12]
 8007df6:	e002      	b.n	8007dfe <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3738      	adds	r7, #56	; 0x38
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bdb0      	pop	{r4, r5, r7, pc}
 8007e26:	bf00      	nop
 8007e28:	58024400 	.word	0x58024400
 8007e2c:	03d09000 	.word	0x03d09000
 8007e30:	003d0900 	.word	0x003d0900
 8007e34:	0800d16c 	.word	0x0800d16c

08007e38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	430a      	orrs	r2, r1
 8007e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e66:	f003 0302 	and.w	r3, r3, #2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00a      	beq.n	8007ea6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eaa:	f003 0308 	and.w	r3, r3, #8
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00a      	beq.n	8007ec8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00a      	beq.n	8007eea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	430a      	orrs	r2, r1
 8007ee8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eee:	f003 0320 	and.w	r3, r3, #32
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00a      	beq.n	8007f0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01a      	beq.n	8007f4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f36:	d10a      	bne.n	8007f4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	605a      	str	r2, [r3, #4]
  }
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af02      	add	r7, sp, #8
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f8c:	f7fb f890 	bl	80030b0 <HAL_GetTick>
 8007f90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0308 	and.w	r3, r3, #8
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d10e      	bne.n	8007fbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f82f 	bl	8008012 <UART_WaitOnFlagUntilTimeout>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d001      	beq.n	8007fbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e025      	b.n	800800a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d10e      	bne.n	8007fea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f819 	bl	8008012 <UART_WaitOnFlagUntilTimeout>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d001      	beq.n	8007fea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e00f      	b.n	800800a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2220      	movs	r2, #32
 8007ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	603b      	str	r3, [r7, #0]
 800801e:	4613      	mov	r3, r2
 8008020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008022:	e062      	b.n	80080ea <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802a:	d05e      	beq.n	80080ea <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800802c:	f7fb f840 	bl	80030b0 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	69ba      	ldr	r2, [r7, #24]
 8008038:	429a      	cmp	r2, r3
 800803a:	d302      	bcc.n	8008042 <UART_WaitOnFlagUntilTimeout+0x30>
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d11d      	bne.n	800807e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008050:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 0201 	bic.w	r2, r2, #1
 8008060:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2220      	movs	r2, #32
 8008066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2220      	movs	r2, #32
 800806e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e045      	b.n	800810a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0304 	and.w	r3, r3, #4
 8008088:	2b00      	cmp	r3, #0
 800808a:	d02e      	beq.n	80080ea <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800809a:	d126      	bne.n	80080ea <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689a      	ldr	r2, [r3, #8]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0201 	bic.w	r2, r2, #1
 80080c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2220      	movs	r2, #32
 80080d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2220      	movs	r2, #32
 80080da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e00f      	b.n	800810a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69da      	ldr	r2, [r3, #28]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4013      	ands	r3, r2
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	bf0c      	ite	eq
 80080fa:	2301      	moveq	r3, #1
 80080fc:	2300      	movne	r3, #0
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	461a      	mov	r2, r3
 8008102:	79fb      	ldrb	r3, [r7, #7]
 8008104:	429a      	cmp	r2, r3
 8008106:	d08d      	beq.n	8008024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_UARTEx_DisableFifoMode+0x16>
 8008124:	2302      	movs	r3, #2
 8008126:	e027      	b.n	8008178 <HAL_UARTEx_DisableFifoMode+0x66>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2224      	movs	r2, #36	; 0x24
 8008134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 0201 	bic.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008156:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2220      	movs	r2, #32
 800816a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008198:	2302      	movs	r3, #2
 800819a:	e02d      	b.n	80081f8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2224      	movs	r2, #36	; 0x24
 80081a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 0201 	bic.w	r2, r2, #1
 80081c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	430a      	orrs	r2, r1
 80081d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f84f 	bl	800827c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008210:	2b01      	cmp	r3, #1
 8008212:	d101      	bne.n	8008218 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008214:	2302      	movs	r3, #2
 8008216:	e02d      	b.n	8008274 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2224      	movs	r2, #36	; 0x24
 8008224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0201 	bic.w	r2, r2, #1
 800823e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	430a      	orrs	r2, r1
 8008252:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f811 	bl	800827c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2220      	movs	r2, #32
 8008266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008288:	2b00      	cmp	r3, #0
 800828a:	d108      	bne.n	800829e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800829c:	e031      	b.n	8008302 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800829e:	2310      	movs	r3, #16
 80082a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082a2:	2310      	movs	r3, #16
 80082a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	0e5b      	lsrs	r3, r3, #25
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	f003 0307 	and.w	r3, r3, #7
 80082b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	0f5b      	lsrs	r3, r3, #29
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	f003 0307 	and.w	r3, r3, #7
 80082c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082c6:	7bbb      	ldrb	r3, [r7, #14]
 80082c8:	7b3a      	ldrb	r2, [r7, #12]
 80082ca:	4911      	ldr	r1, [pc, #68]	; (8008310 <UARTEx_SetNbDataToProcess+0x94>)
 80082cc:	5c8a      	ldrb	r2, [r1, r2]
 80082ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082d2:	7b3a      	ldrb	r2, [r7, #12]
 80082d4:	490f      	ldr	r1, [pc, #60]	; (8008314 <UARTEx_SetNbDataToProcess+0x98>)
 80082d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80082dc:	b29a      	uxth	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	7b7a      	ldrb	r2, [r7, #13]
 80082e8:	4909      	ldr	r1, [pc, #36]	; (8008310 <UARTEx_SetNbDataToProcess+0x94>)
 80082ea:	5c8a      	ldrb	r2, [r1, r2]
 80082ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082f0:	7b7a      	ldrb	r2, [r7, #13]
 80082f2:	4908      	ldr	r1, [pc, #32]	; (8008314 <UARTEx_SetNbDataToProcess+0x98>)
 80082f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008302:	bf00      	nop
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	0800d184 	.word	0x0800d184
 8008314:	0800d18c 	.word	0x0800d18c

08008318 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008318:	b084      	sub	sp, #16
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
 8008322:	f107 001c 	add.w	r0, r7, #28
 8008326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	2b01      	cmp	r3, #1
 800832e:	d120      	bne.n	8008372 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68da      	ldr	r2, [r3, #12]
 8008340:	4b2a      	ldr	r3, [pc, #168]	; (80083ec <USB_CoreInit+0xd4>)
 8008342:	4013      	ands	r3, r2
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008356:	2b01      	cmp	r3, #1
 8008358:	d105      	bne.n	8008366 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fa60 	bl	800882c <USB_CoreReset>
 800836c:	4603      	mov	r3, r0
 800836e:	73fb      	strb	r3, [r7, #15]
 8008370:	e01a      	b.n	80083a8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa54 	bl	800882c <USB_CoreReset>
 8008384:	4603      	mov	r3, r0
 8008386:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800838a:	2b00      	cmp	r3, #0
 800838c:	d106      	bne.n	800839c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008392:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	639a      	str	r2, [r3, #56]	; 0x38
 800839a:	e005      	b.n	80083a8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d116      	bne.n	80083dc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80083bc:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <USB_CoreInit+0xd8>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f043 0206 	orr.w	r2, r3, #6
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	f043 0220 	orr.w	r2, r3, #32
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083e8:	b004      	add	sp, #16
 80083ea:	4770      	bx	lr
 80083ec:	ffbdffbf 	.word	0xffbdffbf
 80083f0:	03ee0000 	.word	0x03ee0000

080083f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f023 0201 	bic.w	r2, r3, #1
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr

08008416 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b082      	sub	sp, #8
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	460b      	mov	r3, r1
 8008420:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d106      	bne.n	8008442 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	60da      	str	r2, [r3, #12]
 8008440:	e00b      	b.n	800845a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d106      	bne.n	8008456 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60da      	str	r2, [r3, #12]
 8008454:	e001      	b.n	800845a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e003      	b.n	8008462 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800845a:	2032      	movs	r0, #50	; 0x32
 800845c:	f7fa fe34 	bl	80030c8 <HAL_Delay>

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800846c:	b084      	sub	sp, #16
 800846e:	b580      	push	{r7, lr}
 8008470:	b086      	sub	sp, #24
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800847a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008486:	2300      	movs	r3, #0
 8008488:	613b      	str	r3, [r7, #16]
 800848a:	e009      	b.n	80084a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	3340      	adds	r3, #64	; 0x40
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	2200      	movs	r2, #0
 8008498:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	3301      	adds	r3, #1
 800849e:	613b      	str	r3, [r7, #16]
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	2b0e      	cmp	r3, #14
 80084a4:	d9f2      	bls.n	800848c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80084a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d11c      	bne.n	80084e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084ba:	f043 0302 	orr.w	r3, r3, #2
 80084be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	e005      	b.n	80084f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084f8:	461a      	mov	r2, r3
 80084fa:	2300      	movs	r3, #0
 80084fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008504:	4619      	mov	r1, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850c:	461a      	mov	r2, r3
 800850e:	680b      	ldr	r3, [r1, #0]
 8008510:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008514:	2b01      	cmp	r3, #1
 8008516:	d10c      	bne.n	8008532 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	2b00      	cmp	r3, #0
 800851c:	d104      	bne.n	8008528 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800851e:	2100      	movs	r1, #0
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f949 	bl	80087b8 <USB_SetDevSpeed>
 8008526:	e008      	b.n	800853a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008528:	2101      	movs	r1, #1
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f944 	bl	80087b8 <USB_SetDevSpeed>
 8008530:	e003      	b.n	800853a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008532:	2103      	movs	r1, #3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 f93f 	bl	80087b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800853a:	2110      	movs	r1, #16
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f000 f8f3 	bl	8008728 <USB_FlushTxFifo>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 f911 	bl	8008774 <USB_FlushRxFifo>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008562:	461a      	mov	r2, r3
 8008564:	2300      	movs	r3, #0
 8008566:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800856e:	461a      	mov	r2, r3
 8008570:	2300      	movs	r3, #0
 8008572:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800857a:	461a      	mov	r2, r3
 800857c:	2300      	movs	r3, #0
 800857e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008580:	2300      	movs	r3, #0
 8008582:	613b      	str	r3, [r7, #16]
 8008584:	e043      	b.n	800860e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	4413      	add	r3, r2
 800858e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800859c:	d118      	bne.n	80085d0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10a      	bne.n	80085ba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b0:	461a      	mov	r2, r3
 80085b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	e013      	b.n	80085e2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c6:	461a      	mov	r2, r3
 80085c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	e008      	b.n	80085e2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085dc:	461a      	mov	r2, r3
 80085de:	2300      	movs	r3, #0
 80085e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ee:	461a      	mov	r2, r3
 80085f0:	2300      	movs	r3, #0
 80085f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008600:	461a      	mov	r2, r3
 8008602:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008606:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	3301      	adds	r3, #1
 800860c:	613b      	str	r3, [r7, #16]
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	429a      	cmp	r2, r3
 8008614:	d3b7      	bcc.n	8008586 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008616:	2300      	movs	r3, #0
 8008618:	613b      	str	r3, [r7, #16]
 800861a:	e043      	b.n	80086a4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800862e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008632:	d118      	bne.n	8008666 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10a      	bne.n	8008650 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	015a      	lsls	r2, r3, #5
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	4413      	add	r3, r2
 8008642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008646:	461a      	mov	r2, r3
 8008648:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800864c:	6013      	str	r3, [r2, #0]
 800864e:	e013      	b.n	8008678 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865c:	461a      	mov	r2, r3
 800865e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008662:	6013      	str	r3, [r2, #0]
 8008664:	e008      	b.n	8008678 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	4413      	add	r3, r2
 800866e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008672:	461a      	mov	r2, r3
 8008674:	2300      	movs	r3, #0
 8008676:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008684:	461a      	mov	r2, r3
 8008686:	2300      	movs	r3, #0
 8008688:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008696:	461a      	mov	r2, r3
 8008698:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800869c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	3301      	adds	r3, #1
 80086a2:	613b      	str	r3, [r7, #16]
 80086a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d3b7      	bcc.n	800861c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80086cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80086ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d105      	bne.n	80086e0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	f043 0210 	orr.w	r2, r3, #16
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	699a      	ldr	r2, [r3, #24]
 80086e4:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <USB_DevInit+0x2b4>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80086ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	f043 0208 	orr.w	r2, r3, #8
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80086fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008700:	2b01      	cmp	r3, #1
 8008702:	d105      	bne.n	8008710 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	699a      	ldr	r2, [r3, #24]
 8008708:	4b06      	ldr	r3, [pc, #24]	; (8008724 <USB_DevInit+0x2b8>)
 800870a:	4313      	orrs	r3, r2
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008710:	7dfb      	ldrb	r3, [r7, #23]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800871c:	b004      	add	sp, #16
 800871e:	4770      	bx	lr
 8008720:	803c3800 	.word	0x803c3800
 8008724:	40000004 	.word	0x40000004

08008728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	019b      	lsls	r3, r3, #6
 800873a:	f043 0220 	orr.w	r2, r3, #32
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3301      	adds	r3, #1
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4a09      	ldr	r2, [pc, #36]	; (8008770 <USB_FlushTxFifo+0x48>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d901      	bls.n	8008754 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e006      	b.n	8008762 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	691b      	ldr	r3, [r3, #16]
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b20      	cmp	r3, #32
 800875e:	d0f0      	beq.n	8008742 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	00030d40 	.word	0x00030d40

08008774 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2210      	movs	r2, #16
 8008784:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3301      	adds	r3, #1
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4a09      	ldr	r2, [pc, #36]	; (80087b4 <USB_FlushRxFifo+0x40>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d901      	bls.n	8008798 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e006      	b.n	80087a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	f003 0310 	and.w	r3, r3, #16
 80087a0:	2b10      	cmp	r3, #16
 80087a2:	d0f0      	beq.n	8008786 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	00030d40 	.word	0x00030d40

080087b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	78fb      	ldrb	r3, [r7, #3]
 80087d2:	68f9      	ldr	r1, [r7, #12]
 80087d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087d8:	4313      	orrs	r3, r2
 80087da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b085      	sub	sp, #20
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008804:	f023 0303 	bic.w	r3, r3, #3
 8008808:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008818:	f043 0302 	orr.w	r3, r3, #2
 800881c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008834:	2300      	movs	r3, #0
 8008836:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3301      	adds	r3, #1
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4a13      	ldr	r2, [pc, #76]	; (8008890 <USB_CoreReset+0x64>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d901      	bls.n	800884a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e01b      	b.n	8008882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	daf2      	bge.n	8008838 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f043 0201 	orr.w	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3301      	adds	r3, #1
 8008866:	60fb      	str	r3, [r7, #12]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4a09      	ldr	r2, [pc, #36]	; (8008890 <USB_CoreReset+0x64>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d901      	bls.n	8008874 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e006      	b.n	8008882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b01      	cmp	r3, #1
 800887e:	d0f0      	beq.n	8008862 <USB_CoreReset+0x36>

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	00030d40 	.word	0x00030d40

08008894 <__errno>:
 8008894:	4b01      	ldr	r3, [pc, #4]	; (800889c <__errno+0x8>)
 8008896:	6818      	ldr	r0, [r3, #0]
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	24000010 	.word	0x24000010

080088a0 <__libc_init_array>:
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	4d0d      	ldr	r5, [pc, #52]	; (80088d8 <__libc_init_array+0x38>)
 80088a4:	4c0d      	ldr	r4, [pc, #52]	; (80088dc <__libc_init_array+0x3c>)
 80088a6:	1b64      	subs	r4, r4, r5
 80088a8:	10a4      	asrs	r4, r4, #2
 80088aa:	2600      	movs	r6, #0
 80088ac:	42a6      	cmp	r6, r4
 80088ae:	d109      	bne.n	80088c4 <__libc_init_array+0x24>
 80088b0:	4d0b      	ldr	r5, [pc, #44]	; (80088e0 <__libc_init_array+0x40>)
 80088b2:	4c0c      	ldr	r4, [pc, #48]	; (80088e4 <__libc_init_array+0x44>)
 80088b4:	f004 fc18 	bl	800d0e8 <_init>
 80088b8:	1b64      	subs	r4, r4, r5
 80088ba:	10a4      	asrs	r4, r4, #2
 80088bc:	2600      	movs	r6, #0
 80088be:	42a6      	cmp	r6, r4
 80088c0:	d105      	bne.n	80088ce <__libc_init_array+0x2e>
 80088c2:	bd70      	pop	{r4, r5, r6, pc}
 80088c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80088c8:	4798      	blx	r3
 80088ca:	3601      	adds	r6, #1
 80088cc:	e7ee      	b.n	80088ac <__libc_init_array+0xc>
 80088ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80088d2:	4798      	blx	r3
 80088d4:	3601      	adds	r6, #1
 80088d6:	e7f2      	b.n	80088be <__libc_init_array+0x1e>
 80088d8:	0800fb88 	.word	0x0800fb88
 80088dc:	0800fb88 	.word	0x0800fb88
 80088e0:	0800fb88 	.word	0x0800fb88
 80088e4:	0800fb8c 	.word	0x0800fb8c

080088e8 <malloc>:
 80088e8:	4b02      	ldr	r3, [pc, #8]	; (80088f4 <malloc+0xc>)
 80088ea:	4601      	mov	r1, r0
 80088ec:	6818      	ldr	r0, [r3, #0]
 80088ee:	f000 b85b 	b.w	80089a8 <_malloc_r>
 80088f2:	bf00      	nop
 80088f4:	24000010 	.word	0x24000010

080088f8 <memset>:
 80088f8:	4402      	add	r2, r0
 80088fa:	4603      	mov	r3, r0
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d100      	bne.n	8008902 <memset+0xa>
 8008900:	4770      	bx	lr
 8008902:	f803 1b01 	strb.w	r1, [r3], #1
 8008906:	e7f9      	b.n	80088fc <memset+0x4>

08008908 <_free_r>:
 8008908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800890a:	2900      	cmp	r1, #0
 800890c:	d048      	beq.n	80089a0 <_free_r+0x98>
 800890e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008912:	9001      	str	r0, [sp, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	f1a1 0404 	sub.w	r4, r1, #4
 800891a:	bfb8      	it	lt
 800891c:	18e4      	addlt	r4, r4, r3
 800891e:	f001 fef1 	bl	800a704 <__malloc_lock>
 8008922:	4a20      	ldr	r2, [pc, #128]	; (80089a4 <_free_r+0x9c>)
 8008924:	9801      	ldr	r0, [sp, #4]
 8008926:	6813      	ldr	r3, [r2, #0]
 8008928:	4615      	mov	r5, r2
 800892a:	b933      	cbnz	r3, 800893a <_free_r+0x32>
 800892c:	6063      	str	r3, [r4, #4]
 800892e:	6014      	str	r4, [r2, #0]
 8008930:	b003      	add	sp, #12
 8008932:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008936:	f001 beeb 	b.w	800a710 <__malloc_unlock>
 800893a:	42a3      	cmp	r3, r4
 800893c:	d90b      	bls.n	8008956 <_free_r+0x4e>
 800893e:	6821      	ldr	r1, [r4, #0]
 8008940:	1862      	adds	r2, r4, r1
 8008942:	4293      	cmp	r3, r2
 8008944:	bf04      	itt	eq
 8008946:	681a      	ldreq	r2, [r3, #0]
 8008948:	685b      	ldreq	r3, [r3, #4]
 800894a:	6063      	str	r3, [r4, #4]
 800894c:	bf04      	itt	eq
 800894e:	1852      	addeq	r2, r2, r1
 8008950:	6022      	streq	r2, [r4, #0]
 8008952:	602c      	str	r4, [r5, #0]
 8008954:	e7ec      	b.n	8008930 <_free_r+0x28>
 8008956:	461a      	mov	r2, r3
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	b10b      	cbz	r3, 8008960 <_free_r+0x58>
 800895c:	42a3      	cmp	r3, r4
 800895e:	d9fa      	bls.n	8008956 <_free_r+0x4e>
 8008960:	6811      	ldr	r1, [r2, #0]
 8008962:	1855      	adds	r5, r2, r1
 8008964:	42a5      	cmp	r5, r4
 8008966:	d10b      	bne.n	8008980 <_free_r+0x78>
 8008968:	6824      	ldr	r4, [r4, #0]
 800896a:	4421      	add	r1, r4
 800896c:	1854      	adds	r4, r2, r1
 800896e:	42a3      	cmp	r3, r4
 8008970:	6011      	str	r1, [r2, #0]
 8008972:	d1dd      	bne.n	8008930 <_free_r+0x28>
 8008974:	681c      	ldr	r4, [r3, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	6053      	str	r3, [r2, #4]
 800897a:	4421      	add	r1, r4
 800897c:	6011      	str	r1, [r2, #0]
 800897e:	e7d7      	b.n	8008930 <_free_r+0x28>
 8008980:	d902      	bls.n	8008988 <_free_r+0x80>
 8008982:	230c      	movs	r3, #12
 8008984:	6003      	str	r3, [r0, #0]
 8008986:	e7d3      	b.n	8008930 <_free_r+0x28>
 8008988:	6825      	ldr	r5, [r4, #0]
 800898a:	1961      	adds	r1, r4, r5
 800898c:	428b      	cmp	r3, r1
 800898e:	bf04      	itt	eq
 8008990:	6819      	ldreq	r1, [r3, #0]
 8008992:	685b      	ldreq	r3, [r3, #4]
 8008994:	6063      	str	r3, [r4, #4]
 8008996:	bf04      	itt	eq
 8008998:	1949      	addeq	r1, r1, r5
 800899a:	6021      	streq	r1, [r4, #0]
 800899c:	6054      	str	r4, [r2, #4]
 800899e:	e7c7      	b.n	8008930 <_free_r+0x28>
 80089a0:	b003      	add	sp, #12
 80089a2:	bd30      	pop	{r4, r5, pc}
 80089a4:	240002dc 	.word	0x240002dc

080089a8 <_malloc_r>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	1ccd      	adds	r5, r1, #3
 80089ac:	f025 0503 	bic.w	r5, r5, #3
 80089b0:	3508      	adds	r5, #8
 80089b2:	2d0c      	cmp	r5, #12
 80089b4:	bf38      	it	cc
 80089b6:	250c      	movcc	r5, #12
 80089b8:	2d00      	cmp	r5, #0
 80089ba:	4606      	mov	r6, r0
 80089bc:	db01      	blt.n	80089c2 <_malloc_r+0x1a>
 80089be:	42a9      	cmp	r1, r5
 80089c0:	d903      	bls.n	80089ca <_malloc_r+0x22>
 80089c2:	230c      	movs	r3, #12
 80089c4:	6033      	str	r3, [r6, #0]
 80089c6:	2000      	movs	r0, #0
 80089c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ca:	f001 fe9b 	bl	800a704 <__malloc_lock>
 80089ce:	4921      	ldr	r1, [pc, #132]	; (8008a54 <_malloc_r+0xac>)
 80089d0:	680a      	ldr	r2, [r1, #0]
 80089d2:	4614      	mov	r4, r2
 80089d4:	b99c      	cbnz	r4, 80089fe <_malloc_r+0x56>
 80089d6:	4f20      	ldr	r7, [pc, #128]	; (8008a58 <_malloc_r+0xb0>)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	b923      	cbnz	r3, 80089e6 <_malloc_r+0x3e>
 80089dc:	4621      	mov	r1, r4
 80089de:	4630      	mov	r0, r6
 80089e0:	f000 fd4e 	bl	8009480 <_sbrk_r>
 80089e4:	6038      	str	r0, [r7, #0]
 80089e6:	4629      	mov	r1, r5
 80089e8:	4630      	mov	r0, r6
 80089ea:	f000 fd49 	bl	8009480 <_sbrk_r>
 80089ee:	1c43      	adds	r3, r0, #1
 80089f0:	d123      	bne.n	8008a3a <_malloc_r+0x92>
 80089f2:	230c      	movs	r3, #12
 80089f4:	6033      	str	r3, [r6, #0]
 80089f6:	4630      	mov	r0, r6
 80089f8:	f001 fe8a 	bl	800a710 <__malloc_unlock>
 80089fc:	e7e3      	b.n	80089c6 <_malloc_r+0x1e>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	1b5b      	subs	r3, r3, r5
 8008a02:	d417      	bmi.n	8008a34 <_malloc_r+0x8c>
 8008a04:	2b0b      	cmp	r3, #11
 8008a06:	d903      	bls.n	8008a10 <_malloc_r+0x68>
 8008a08:	6023      	str	r3, [r4, #0]
 8008a0a:	441c      	add	r4, r3
 8008a0c:	6025      	str	r5, [r4, #0]
 8008a0e:	e004      	b.n	8008a1a <_malloc_r+0x72>
 8008a10:	6863      	ldr	r3, [r4, #4]
 8008a12:	42a2      	cmp	r2, r4
 8008a14:	bf0c      	ite	eq
 8008a16:	600b      	streq	r3, [r1, #0]
 8008a18:	6053      	strne	r3, [r2, #4]
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f001 fe78 	bl	800a710 <__malloc_unlock>
 8008a20:	f104 000b 	add.w	r0, r4, #11
 8008a24:	1d23      	adds	r3, r4, #4
 8008a26:	f020 0007 	bic.w	r0, r0, #7
 8008a2a:	1ac2      	subs	r2, r0, r3
 8008a2c:	d0cc      	beq.n	80089c8 <_malloc_r+0x20>
 8008a2e:	1a1b      	subs	r3, r3, r0
 8008a30:	50a3      	str	r3, [r4, r2]
 8008a32:	e7c9      	b.n	80089c8 <_malloc_r+0x20>
 8008a34:	4622      	mov	r2, r4
 8008a36:	6864      	ldr	r4, [r4, #4]
 8008a38:	e7cc      	b.n	80089d4 <_malloc_r+0x2c>
 8008a3a:	1cc4      	adds	r4, r0, #3
 8008a3c:	f024 0403 	bic.w	r4, r4, #3
 8008a40:	42a0      	cmp	r0, r4
 8008a42:	d0e3      	beq.n	8008a0c <_malloc_r+0x64>
 8008a44:	1a21      	subs	r1, r4, r0
 8008a46:	4630      	mov	r0, r6
 8008a48:	f000 fd1a 	bl	8009480 <_sbrk_r>
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	d1dd      	bne.n	8008a0c <_malloc_r+0x64>
 8008a50:	e7cf      	b.n	80089f2 <_malloc_r+0x4a>
 8008a52:	bf00      	nop
 8008a54:	240002dc 	.word	0x240002dc
 8008a58:	240002e0 	.word	0x240002e0

08008a5c <__cvt>:
 8008a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a5e:	ed2d 8b02 	vpush	{d8}
 8008a62:	eeb0 8b40 	vmov.f64	d8, d0
 8008a66:	b085      	sub	sp, #20
 8008a68:	4617      	mov	r7, r2
 8008a6a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008a6c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008a6e:	ee18 2a90 	vmov	r2, s17
 8008a72:	f025 0520 	bic.w	r5, r5, #32
 8008a76:	2a00      	cmp	r2, #0
 8008a78:	bfb6      	itet	lt
 8008a7a:	222d      	movlt	r2, #45	; 0x2d
 8008a7c:	2200      	movge	r2, #0
 8008a7e:	eeb1 8b40 	vneglt.f64	d8, d0
 8008a82:	2d46      	cmp	r5, #70	; 0x46
 8008a84:	460c      	mov	r4, r1
 8008a86:	701a      	strb	r2, [r3, #0]
 8008a88:	d004      	beq.n	8008a94 <__cvt+0x38>
 8008a8a:	2d45      	cmp	r5, #69	; 0x45
 8008a8c:	d100      	bne.n	8008a90 <__cvt+0x34>
 8008a8e:	3401      	adds	r4, #1
 8008a90:	2102      	movs	r1, #2
 8008a92:	e000      	b.n	8008a96 <__cvt+0x3a>
 8008a94:	2103      	movs	r1, #3
 8008a96:	ab03      	add	r3, sp, #12
 8008a98:	9301      	str	r3, [sp, #4]
 8008a9a:	ab02      	add	r3, sp, #8
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	4622      	mov	r2, r4
 8008aa0:	4633      	mov	r3, r6
 8008aa2:	eeb0 0b48 	vmov.f64	d0, d8
 8008aa6:	f000 fe67 	bl	8009778 <_dtoa_r>
 8008aaa:	2d47      	cmp	r5, #71	; 0x47
 8008aac:	d109      	bne.n	8008ac2 <__cvt+0x66>
 8008aae:	07fb      	lsls	r3, r7, #31
 8008ab0:	d407      	bmi.n	8008ac2 <__cvt+0x66>
 8008ab2:	9b03      	ldr	r3, [sp, #12]
 8008ab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ab6:	1a1b      	subs	r3, r3, r0
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	b005      	add	sp, #20
 8008abc:	ecbd 8b02 	vpop	{d8}
 8008ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ac2:	2d46      	cmp	r5, #70	; 0x46
 8008ac4:	eb00 0204 	add.w	r2, r0, r4
 8008ac8:	d10c      	bne.n	8008ae4 <__cvt+0x88>
 8008aca:	7803      	ldrb	r3, [r0, #0]
 8008acc:	2b30      	cmp	r3, #48	; 0x30
 8008ace:	d107      	bne.n	8008ae0 <__cvt+0x84>
 8008ad0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad8:	bf1c      	itt	ne
 8008ada:	f1c4 0401 	rsbne	r4, r4, #1
 8008ade:	6034      	strne	r4, [r6, #0]
 8008ae0:	6833      	ldr	r3, [r6, #0]
 8008ae2:	441a      	add	r2, r3
 8008ae4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aec:	bf08      	it	eq
 8008aee:	9203      	streq	r2, [sp, #12]
 8008af0:	2130      	movs	r1, #48	; 0x30
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d2dc      	bcs.n	8008ab2 <__cvt+0x56>
 8008af8:	1c5c      	adds	r4, r3, #1
 8008afa:	9403      	str	r4, [sp, #12]
 8008afc:	7019      	strb	r1, [r3, #0]
 8008afe:	e7f8      	b.n	8008af2 <__cvt+0x96>

08008b00 <__exponent>:
 8008b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b02:	4603      	mov	r3, r0
 8008b04:	2900      	cmp	r1, #0
 8008b06:	bfb8      	it	lt
 8008b08:	4249      	neglt	r1, r1
 8008b0a:	f803 2b02 	strb.w	r2, [r3], #2
 8008b0e:	bfb4      	ite	lt
 8008b10:	222d      	movlt	r2, #45	; 0x2d
 8008b12:	222b      	movge	r2, #43	; 0x2b
 8008b14:	2909      	cmp	r1, #9
 8008b16:	7042      	strb	r2, [r0, #1]
 8008b18:	dd2a      	ble.n	8008b70 <__exponent+0x70>
 8008b1a:	f10d 0407 	add.w	r4, sp, #7
 8008b1e:	46a4      	mov	ip, r4
 8008b20:	270a      	movs	r7, #10
 8008b22:	46a6      	mov	lr, r4
 8008b24:	460a      	mov	r2, r1
 8008b26:	fb91 f6f7 	sdiv	r6, r1, r7
 8008b2a:	fb07 1516 	mls	r5, r7, r6, r1
 8008b2e:	3530      	adds	r5, #48	; 0x30
 8008b30:	2a63      	cmp	r2, #99	; 0x63
 8008b32:	f104 34ff 	add.w	r4, r4, #4294967295
 8008b36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	dcf1      	bgt.n	8008b22 <__exponent+0x22>
 8008b3e:	3130      	adds	r1, #48	; 0x30
 8008b40:	f1ae 0502 	sub.w	r5, lr, #2
 8008b44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008b48:	1c44      	adds	r4, r0, #1
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4561      	cmp	r1, ip
 8008b4e:	d30a      	bcc.n	8008b66 <__exponent+0x66>
 8008b50:	f10d 0209 	add.w	r2, sp, #9
 8008b54:	eba2 020e 	sub.w	r2, r2, lr
 8008b58:	4565      	cmp	r5, ip
 8008b5a:	bf88      	it	hi
 8008b5c:	2200      	movhi	r2, #0
 8008b5e:	4413      	add	r3, r2
 8008b60:	1a18      	subs	r0, r3, r0
 8008b62:	b003      	add	sp, #12
 8008b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008b6e:	e7ed      	b.n	8008b4c <__exponent+0x4c>
 8008b70:	2330      	movs	r3, #48	; 0x30
 8008b72:	3130      	adds	r1, #48	; 0x30
 8008b74:	7083      	strb	r3, [r0, #2]
 8008b76:	70c1      	strb	r1, [r0, #3]
 8008b78:	1d03      	adds	r3, r0, #4
 8008b7a:	e7f1      	b.n	8008b60 <__exponent+0x60>
 8008b7c:	0000      	movs	r0, r0
	...

08008b80 <_printf_float>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	b08b      	sub	sp, #44	; 0x2c
 8008b86:	460c      	mov	r4, r1
 8008b88:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008b8c:	4616      	mov	r6, r2
 8008b8e:	461f      	mov	r7, r3
 8008b90:	4605      	mov	r5, r0
 8008b92:	f001 fd3d 	bl	800a610 <_localeconv_r>
 8008b96:	f8d0 b000 	ldr.w	fp, [r0]
 8008b9a:	4658      	mov	r0, fp
 8008b9c:	f7f7 fba0 	bl	80002e0 <strlen>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	9308      	str	r3, [sp, #32]
 8008ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ba8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008bac:	6822      	ldr	r2, [r4, #0]
 8008bae:	3307      	adds	r3, #7
 8008bb0:	f023 0307 	bic.w	r3, r3, #7
 8008bb4:	f103 0108 	add.w	r1, r3, #8
 8008bb8:	f8c8 1000 	str.w	r1, [r8]
 8008bbc:	4682      	mov	sl, r0
 8008bbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008bc2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008bc6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008e28 <_printf_float+0x2a8>
 8008bca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008bce:	eeb0 6bc0 	vabs.f64	d6, d0
 8008bd2:	eeb4 6b47 	vcmp.f64	d6, d7
 8008bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bda:	dd24      	ble.n	8008c26 <_printf_float+0xa6>
 8008bdc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be4:	d502      	bpl.n	8008bec <_printf_float+0x6c>
 8008be6:	232d      	movs	r3, #45	; 0x2d
 8008be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bec:	4b90      	ldr	r3, [pc, #576]	; (8008e30 <_printf_float+0x2b0>)
 8008bee:	4891      	ldr	r0, [pc, #580]	; (8008e34 <_printf_float+0x2b4>)
 8008bf0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008bf4:	bf94      	ite	ls
 8008bf6:	4698      	movls	r8, r3
 8008bf8:	4680      	movhi	r8, r0
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	6123      	str	r3, [r4, #16]
 8008bfe:	f022 0204 	bic.w	r2, r2, #4
 8008c02:	2300      	movs	r3, #0
 8008c04:	6022      	str	r2, [r4, #0]
 8008c06:	9304      	str	r3, [sp, #16]
 8008c08:	9700      	str	r7, [sp, #0]
 8008c0a:	4633      	mov	r3, r6
 8008c0c:	aa09      	add	r2, sp, #36	; 0x24
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 f9d3 	bl	8008fbc <_printf_common>
 8008c16:	3001      	adds	r0, #1
 8008c18:	f040 808a 	bne.w	8008d30 <_printf_float+0x1b0>
 8008c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c20:	b00b      	add	sp, #44	; 0x2c
 8008c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c26:	eeb4 0b40 	vcmp.f64	d0, d0
 8008c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c2e:	d709      	bvc.n	8008c44 <_printf_float+0xc4>
 8008c30:	ee10 3a90 	vmov	r3, s1
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bfbc      	itt	lt
 8008c38:	232d      	movlt	r3, #45	; 0x2d
 8008c3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c3e:	487e      	ldr	r0, [pc, #504]	; (8008e38 <_printf_float+0x2b8>)
 8008c40:	4b7e      	ldr	r3, [pc, #504]	; (8008e3c <_printf_float+0x2bc>)
 8008c42:	e7d5      	b.n	8008bf0 <_printf_float+0x70>
 8008c44:	6863      	ldr	r3, [r4, #4]
 8008c46:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008c4a:	9104      	str	r1, [sp, #16]
 8008c4c:	1c59      	adds	r1, r3, #1
 8008c4e:	d13c      	bne.n	8008cca <_printf_float+0x14a>
 8008c50:	2306      	movs	r3, #6
 8008c52:	6063      	str	r3, [r4, #4]
 8008c54:	2300      	movs	r3, #0
 8008c56:	9303      	str	r3, [sp, #12]
 8008c58:	ab08      	add	r3, sp, #32
 8008c5a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008c5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c62:	ab07      	add	r3, sp, #28
 8008c64:	6861      	ldr	r1, [r4, #4]
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	6022      	str	r2, [r4, #0]
 8008c6a:	f10d 031b 	add.w	r3, sp, #27
 8008c6e:	4628      	mov	r0, r5
 8008c70:	f7ff fef4 	bl	8008a5c <__cvt>
 8008c74:	9b04      	ldr	r3, [sp, #16]
 8008c76:	9907      	ldr	r1, [sp, #28]
 8008c78:	2b47      	cmp	r3, #71	; 0x47
 8008c7a:	4680      	mov	r8, r0
 8008c7c:	d108      	bne.n	8008c90 <_printf_float+0x110>
 8008c7e:	1cc8      	adds	r0, r1, #3
 8008c80:	db02      	blt.n	8008c88 <_printf_float+0x108>
 8008c82:	6863      	ldr	r3, [r4, #4]
 8008c84:	4299      	cmp	r1, r3
 8008c86:	dd41      	ble.n	8008d0c <_printf_float+0x18c>
 8008c88:	f1a9 0902 	sub.w	r9, r9, #2
 8008c8c:	fa5f f989 	uxtb.w	r9, r9
 8008c90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008c94:	d820      	bhi.n	8008cd8 <_printf_float+0x158>
 8008c96:	3901      	subs	r1, #1
 8008c98:	464a      	mov	r2, r9
 8008c9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c9e:	9107      	str	r1, [sp, #28]
 8008ca0:	f7ff ff2e 	bl	8008b00 <__exponent>
 8008ca4:	9a08      	ldr	r2, [sp, #32]
 8008ca6:	9004      	str	r0, [sp, #16]
 8008ca8:	1813      	adds	r3, r2, r0
 8008caa:	2a01      	cmp	r2, #1
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	dc02      	bgt.n	8008cb6 <_printf_float+0x136>
 8008cb0:	6822      	ldr	r2, [r4, #0]
 8008cb2:	07d2      	lsls	r2, r2, #31
 8008cb4:	d501      	bpl.n	8008cba <_printf_float+0x13a>
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	6123      	str	r3, [r4, #16]
 8008cba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d0a2      	beq.n	8008c08 <_printf_float+0x88>
 8008cc2:	232d      	movs	r3, #45	; 0x2d
 8008cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cc8:	e79e      	b.n	8008c08 <_printf_float+0x88>
 8008cca:	9904      	ldr	r1, [sp, #16]
 8008ccc:	2947      	cmp	r1, #71	; 0x47
 8008cce:	d1c1      	bne.n	8008c54 <_printf_float+0xd4>
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1bf      	bne.n	8008c54 <_printf_float+0xd4>
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e7bc      	b.n	8008c52 <_printf_float+0xd2>
 8008cd8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008cdc:	d118      	bne.n	8008d10 <_printf_float+0x190>
 8008cde:	2900      	cmp	r1, #0
 8008ce0:	6863      	ldr	r3, [r4, #4]
 8008ce2:	dd0b      	ble.n	8008cfc <_printf_float+0x17c>
 8008ce4:	6121      	str	r1, [r4, #16]
 8008ce6:	b913      	cbnz	r3, 8008cee <_printf_float+0x16e>
 8008ce8:	6822      	ldr	r2, [r4, #0]
 8008cea:	07d0      	lsls	r0, r2, #31
 8008cec:	d502      	bpl.n	8008cf4 <_printf_float+0x174>
 8008cee:	3301      	adds	r3, #1
 8008cf0:	440b      	add	r3, r1
 8008cf2:	6123      	str	r3, [r4, #16]
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008cf8:	9304      	str	r3, [sp, #16]
 8008cfa:	e7de      	b.n	8008cba <_printf_float+0x13a>
 8008cfc:	b913      	cbnz	r3, 8008d04 <_printf_float+0x184>
 8008cfe:	6822      	ldr	r2, [r4, #0]
 8008d00:	07d2      	lsls	r2, r2, #31
 8008d02:	d501      	bpl.n	8008d08 <_printf_float+0x188>
 8008d04:	3302      	adds	r3, #2
 8008d06:	e7f4      	b.n	8008cf2 <_printf_float+0x172>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e7f2      	b.n	8008cf2 <_printf_float+0x172>
 8008d0c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008d10:	9b08      	ldr	r3, [sp, #32]
 8008d12:	4299      	cmp	r1, r3
 8008d14:	db05      	blt.n	8008d22 <_printf_float+0x1a2>
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	6121      	str	r1, [r4, #16]
 8008d1a:	07d8      	lsls	r0, r3, #31
 8008d1c:	d5ea      	bpl.n	8008cf4 <_printf_float+0x174>
 8008d1e:	1c4b      	adds	r3, r1, #1
 8008d20:	e7e7      	b.n	8008cf2 <_printf_float+0x172>
 8008d22:	2900      	cmp	r1, #0
 8008d24:	bfd4      	ite	le
 8008d26:	f1c1 0202 	rsble	r2, r1, #2
 8008d2a:	2201      	movgt	r2, #1
 8008d2c:	4413      	add	r3, r2
 8008d2e:	e7e0      	b.n	8008cf2 <_printf_float+0x172>
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	055a      	lsls	r2, r3, #21
 8008d34:	d407      	bmi.n	8008d46 <_printf_float+0x1c6>
 8008d36:	6923      	ldr	r3, [r4, #16]
 8008d38:	4642      	mov	r2, r8
 8008d3a:	4631      	mov	r1, r6
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	47b8      	blx	r7
 8008d40:	3001      	adds	r0, #1
 8008d42:	d12a      	bne.n	8008d9a <_printf_float+0x21a>
 8008d44:	e76a      	b.n	8008c1c <_printf_float+0x9c>
 8008d46:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008d4a:	f240 80e2 	bls.w	8008f12 <_printf_float+0x392>
 8008d4e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008d52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5a:	d133      	bne.n	8008dc4 <_printf_float+0x244>
 8008d5c:	4a38      	ldr	r2, [pc, #224]	; (8008e40 <_printf_float+0x2c0>)
 8008d5e:	2301      	movs	r3, #1
 8008d60:	4631      	mov	r1, r6
 8008d62:	4628      	mov	r0, r5
 8008d64:	47b8      	blx	r7
 8008d66:	3001      	adds	r0, #1
 8008d68:	f43f af58 	beq.w	8008c1c <_printf_float+0x9c>
 8008d6c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	db02      	blt.n	8008d7a <_printf_float+0x1fa>
 8008d74:	6823      	ldr	r3, [r4, #0]
 8008d76:	07d8      	lsls	r0, r3, #31
 8008d78:	d50f      	bpl.n	8008d9a <_printf_float+0x21a>
 8008d7a:	4653      	mov	r3, sl
 8008d7c:	465a      	mov	r2, fp
 8008d7e:	4631      	mov	r1, r6
 8008d80:	4628      	mov	r0, r5
 8008d82:	47b8      	blx	r7
 8008d84:	3001      	adds	r0, #1
 8008d86:	f43f af49 	beq.w	8008c1c <_printf_float+0x9c>
 8008d8a:	f04f 0800 	mov.w	r8, #0
 8008d8e:	f104 091a 	add.w	r9, r4, #26
 8008d92:	9b08      	ldr	r3, [sp, #32]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	4543      	cmp	r3, r8
 8008d98:	dc09      	bgt.n	8008dae <_printf_float+0x22e>
 8008d9a:	6823      	ldr	r3, [r4, #0]
 8008d9c:	079b      	lsls	r3, r3, #30
 8008d9e:	f100 8108 	bmi.w	8008fb2 <_printf_float+0x432>
 8008da2:	68e0      	ldr	r0, [r4, #12]
 8008da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da6:	4298      	cmp	r0, r3
 8008da8:	bfb8      	it	lt
 8008daa:	4618      	movlt	r0, r3
 8008dac:	e738      	b.n	8008c20 <_printf_float+0xa0>
 8008dae:	2301      	movs	r3, #1
 8008db0:	464a      	mov	r2, r9
 8008db2:	4631      	mov	r1, r6
 8008db4:	4628      	mov	r0, r5
 8008db6:	47b8      	blx	r7
 8008db8:	3001      	adds	r0, #1
 8008dba:	f43f af2f 	beq.w	8008c1c <_printf_float+0x9c>
 8008dbe:	f108 0801 	add.w	r8, r8, #1
 8008dc2:	e7e6      	b.n	8008d92 <_printf_float+0x212>
 8008dc4:	9b07      	ldr	r3, [sp, #28]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	dc3c      	bgt.n	8008e44 <_printf_float+0x2c4>
 8008dca:	4a1d      	ldr	r2, [pc, #116]	; (8008e40 <_printf_float+0x2c0>)
 8008dcc:	2301      	movs	r3, #1
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	47b8      	blx	r7
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	f43f af21 	beq.w	8008c1c <_printf_float+0x9c>
 8008dda:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	d102      	bne.n	8008de8 <_printf_float+0x268>
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	07d9      	lsls	r1, r3, #31
 8008de6:	d5d8      	bpl.n	8008d9a <_printf_float+0x21a>
 8008de8:	4653      	mov	r3, sl
 8008dea:	465a      	mov	r2, fp
 8008dec:	4631      	mov	r1, r6
 8008dee:	4628      	mov	r0, r5
 8008df0:	47b8      	blx	r7
 8008df2:	3001      	adds	r0, #1
 8008df4:	f43f af12 	beq.w	8008c1c <_printf_float+0x9c>
 8008df8:	f04f 0900 	mov.w	r9, #0
 8008dfc:	f104 0a1a 	add.w	sl, r4, #26
 8008e00:	9b07      	ldr	r3, [sp, #28]
 8008e02:	425b      	negs	r3, r3
 8008e04:	454b      	cmp	r3, r9
 8008e06:	dc01      	bgt.n	8008e0c <_printf_float+0x28c>
 8008e08:	9b08      	ldr	r3, [sp, #32]
 8008e0a:	e795      	b.n	8008d38 <_printf_float+0x1b8>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	4652      	mov	r2, sl
 8008e10:	4631      	mov	r1, r6
 8008e12:	4628      	mov	r0, r5
 8008e14:	47b8      	blx	r7
 8008e16:	3001      	adds	r0, #1
 8008e18:	f43f af00 	beq.w	8008c1c <_printf_float+0x9c>
 8008e1c:	f109 0901 	add.w	r9, r9, #1
 8008e20:	e7ee      	b.n	8008e00 <_printf_float+0x280>
 8008e22:	bf00      	nop
 8008e24:	f3af 8000 	nop.w
 8008e28:	ffffffff 	.word	0xffffffff
 8008e2c:	7fefffff 	.word	0x7fefffff
 8008e30:	0800d198 	.word	0x0800d198
 8008e34:	0800d19c 	.word	0x0800d19c
 8008e38:	0800d1a4 	.word	0x0800d1a4
 8008e3c:	0800d1a0 	.word	0x0800d1a0
 8008e40:	0800d1a8 	.word	0x0800d1a8
 8008e44:	9a08      	ldr	r2, [sp, #32]
 8008e46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	bfa8      	it	ge
 8008e4c:	461a      	movge	r2, r3
 8008e4e:	2a00      	cmp	r2, #0
 8008e50:	4691      	mov	r9, r2
 8008e52:	dc38      	bgt.n	8008ec6 <_printf_float+0x346>
 8008e54:	2300      	movs	r3, #0
 8008e56:	9305      	str	r3, [sp, #20]
 8008e58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e5c:	f104 021a 	add.w	r2, r4, #26
 8008e60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e62:	9905      	ldr	r1, [sp, #20]
 8008e64:	9304      	str	r3, [sp, #16]
 8008e66:	eba3 0309 	sub.w	r3, r3, r9
 8008e6a:	428b      	cmp	r3, r1
 8008e6c:	dc33      	bgt.n	8008ed6 <_printf_float+0x356>
 8008e6e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	db3c      	blt.n	8008ef0 <_printf_float+0x370>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	07da      	lsls	r2, r3, #31
 8008e7a:	d439      	bmi.n	8008ef0 <_printf_float+0x370>
 8008e7c:	9a08      	ldr	r2, [sp, #32]
 8008e7e:	9b04      	ldr	r3, [sp, #16]
 8008e80:	9907      	ldr	r1, [sp, #28]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	eba2 0901 	sub.w	r9, r2, r1
 8008e88:	4599      	cmp	r9, r3
 8008e8a:	bfa8      	it	ge
 8008e8c:	4699      	movge	r9, r3
 8008e8e:	f1b9 0f00 	cmp.w	r9, #0
 8008e92:	dc35      	bgt.n	8008f00 <_printf_float+0x380>
 8008e94:	f04f 0800 	mov.w	r8, #0
 8008e98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e9c:	f104 0a1a 	add.w	sl, r4, #26
 8008ea0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008ea4:	1a9b      	subs	r3, r3, r2
 8008ea6:	eba3 0309 	sub.w	r3, r3, r9
 8008eaa:	4543      	cmp	r3, r8
 8008eac:	f77f af75 	ble.w	8008d9a <_printf_float+0x21a>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	4652      	mov	r2, sl
 8008eb4:	4631      	mov	r1, r6
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	47b8      	blx	r7
 8008eba:	3001      	adds	r0, #1
 8008ebc:	f43f aeae 	beq.w	8008c1c <_printf_float+0x9c>
 8008ec0:	f108 0801 	add.w	r8, r8, #1
 8008ec4:	e7ec      	b.n	8008ea0 <_printf_float+0x320>
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	4631      	mov	r1, r6
 8008eca:	4642      	mov	r2, r8
 8008ecc:	4628      	mov	r0, r5
 8008ece:	47b8      	blx	r7
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	d1bf      	bne.n	8008e54 <_printf_float+0x2d4>
 8008ed4:	e6a2      	b.n	8008c1c <_printf_float+0x9c>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4631      	mov	r1, r6
 8008eda:	4628      	mov	r0, r5
 8008edc:	9204      	str	r2, [sp, #16]
 8008ede:	47b8      	blx	r7
 8008ee0:	3001      	adds	r0, #1
 8008ee2:	f43f ae9b 	beq.w	8008c1c <_printf_float+0x9c>
 8008ee6:	9b05      	ldr	r3, [sp, #20]
 8008ee8:	9a04      	ldr	r2, [sp, #16]
 8008eea:	3301      	adds	r3, #1
 8008eec:	9305      	str	r3, [sp, #20]
 8008eee:	e7b7      	b.n	8008e60 <_printf_float+0x2e0>
 8008ef0:	4653      	mov	r3, sl
 8008ef2:	465a      	mov	r2, fp
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	47b8      	blx	r7
 8008efa:	3001      	adds	r0, #1
 8008efc:	d1be      	bne.n	8008e7c <_printf_float+0x2fc>
 8008efe:	e68d      	b.n	8008c1c <_printf_float+0x9c>
 8008f00:	9a04      	ldr	r2, [sp, #16]
 8008f02:	464b      	mov	r3, r9
 8008f04:	4442      	add	r2, r8
 8008f06:	4631      	mov	r1, r6
 8008f08:	4628      	mov	r0, r5
 8008f0a:	47b8      	blx	r7
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	d1c1      	bne.n	8008e94 <_printf_float+0x314>
 8008f10:	e684      	b.n	8008c1c <_printf_float+0x9c>
 8008f12:	9a08      	ldr	r2, [sp, #32]
 8008f14:	2a01      	cmp	r2, #1
 8008f16:	dc01      	bgt.n	8008f1c <_printf_float+0x39c>
 8008f18:	07db      	lsls	r3, r3, #31
 8008f1a:	d537      	bpl.n	8008f8c <_printf_float+0x40c>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	4642      	mov	r2, r8
 8008f20:	4631      	mov	r1, r6
 8008f22:	4628      	mov	r0, r5
 8008f24:	47b8      	blx	r7
 8008f26:	3001      	adds	r0, #1
 8008f28:	f43f ae78 	beq.w	8008c1c <_printf_float+0x9c>
 8008f2c:	4653      	mov	r3, sl
 8008f2e:	465a      	mov	r2, fp
 8008f30:	4631      	mov	r1, r6
 8008f32:	4628      	mov	r0, r5
 8008f34:	47b8      	blx	r7
 8008f36:	3001      	adds	r0, #1
 8008f38:	f43f ae70 	beq.w	8008c1c <_printf_float+0x9c>
 8008f3c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008f40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f48:	d01b      	beq.n	8008f82 <_printf_float+0x402>
 8008f4a:	9b08      	ldr	r3, [sp, #32]
 8008f4c:	f108 0201 	add.w	r2, r8, #1
 8008f50:	3b01      	subs	r3, #1
 8008f52:	4631      	mov	r1, r6
 8008f54:	4628      	mov	r0, r5
 8008f56:	47b8      	blx	r7
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d10e      	bne.n	8008f7a <_printf_float+0x3fa>
 8008f5c:	e65e      	b.n	8008c1c <_printf_float+0x9c>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	464a      	mov	r2, r9
 8008f62:	4631      	mov	r1, r6
 8008f64:	4628      	mov	r0, r5
 8008f66:	47b8      	blx	r7
 8008f68:	3001      	adds	r0, #1
 8008f6a:	f43f ae57 	beq.w	8008c1c <_printf_float+0x9c>
 8008f6e:	f108 0801 	add.w	r8, r8, #1
 8008f72:	9b08      	ldr	r3, [sp, #32]
 8008f74:	3b01      	subs	r3, #1
 8008f76:	4543      	cmp	r3, r8
 8008f78:	dcf1      	bgt.n	8008f5e <_printf_float+0x3de>
 8008f7a:	9b04      	ldr	r3, [sp, #16]
 8008f7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f80:	e6db      	b.n	8008d3a <_printf_float+0x1ba>
 8008f82:	f04f 0800 	mov.w	r8, #0
 8008f86:	f104 091a 	add.w	r9, r4, #26
 8008f8a:	e7f2      	b.n	8008f72 <_printf_float+0x3f2>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	4642      	mov	r2, r8
 8008f90:	e7df      	b.n	8008f52 <_printf_float+0x3d2>
 8008f92:	2301      	movs	r3, #1
 8008f94:	464a      	mov	r2, r9
 8008f96:	4631      	mov	r1, r6
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b8      	blx	r7
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	f43f ae3d 	beq.w	8008c1c <_printf_float+0x9c>
 8008fa2:	f108 0801 	add.w	r8, r8, #1
 8008fa6:	68e3      	ldr	r3, [r4, #12]
 8008fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008faa:	1a5b      	subs	r3, r3, r1
 8008fac:	4543      	cmp	r3, r8
 8008fae:	dcf0      	bgt.n	8008f92 <_printf_float+0x412>
 8008fb0:	e6f7      	b.n	8008da2 <_printf_float+0x222>
 8008fb2:	f04f 0800 	mov.w	r8, #0
 8008fb6:	f104 0919 	add.w	r9, r4, #25
 8008fba:	e7f4      	b.n	8008fa6 <_printf_float+0x426>

08008fbc <_printf_common>:
 8008fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	4699      	mov	r9, r3
 8008fc4:	688a      	ldr	r2, [r1, #8]
 8008fc6:	690b      	ldr	r3, [r1, #16]
 8008fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	bfb8      	it	lt
 8008fd0:	4613      	movlt	r3, r2
 8008fd2:	6033      	str	r3, [r6, #0]
 8008fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fd8:	4607      	mov	r7, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	b10a      	cbz	r2, 8008fe2 <_printf_common+0x26>
 8008fde:	3301      	adds	r3, #1
 8008fe0:	6033      	str	r3, [r6, #0]
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	0699      	lsls	r1, r3, #26
 8008fe6:	bf42      	ittt	mi
 8008fe8:	6833      	ldrmi	r3, [r6, #0]
 8008fea:	3302      	addmi	r3, #2
 8008fec:	6033      	strmi	r3, [r6, #0]
 8008fee:	6825      	ldr	r5, [r4, #0]
 8008ff0:	f015 0506 	ands.w	r5, r5, #6
 8008ff4:	d106      	bne.n	8009004 <_printf_common+0x48>
 8008ff6:	f104 0a19 	add.w	sl, r4, #25
 8008ffa:	68e3      	ldr	r3, [r4, #12]
 8008ffc:	6832      	ldr	r2, [r6, #0]
 8008ffe:	1a9b      	subs	r3, r3, r2
 8009000:	42ab      	cmp	r3, r5
 8009002:	dc26      	bgt.n	8009052 <_printf_common+0x96>
 8009004:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009008:	1e13      	subs	r3, r2, #0
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	bf18      	it	ne
 800900e:	2301      	movne	r3, #1
 8009010:	0692      	lsls	r2, r2, #26
 8009012:	d42b      	bmi.n	800906c <_printf_common+0xb0>
 8009014:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009018:	4649      	mov	r1, r9
 800901a:	4638      	mov	r0, r7
 800901c:	47c0      	blx	r8
 800901e:	3001      	adds	r0, #1
 8009020:	d01e      	beq.n	8009060 <_printf_common+0xa4>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	68e5      	ldr	r5, [r4, #12]
 8009026:	6832      	ldr	r2, [r6, #0]
 8009028:	f003 0306 	and.w	r3, r3, #6
 800902c:	2b04      	cmp	r3, #4
 800902e:	bf08      	it	eq
 8009030:	1aad      	subeq	r5, r5, r2
 8009032:	68a3      	ldr	r3, [r4, #8]
 8009034:	6922      	ldr	r2, [r4, #16]
 8009036:	bf0c      	ite	eq
 8009038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800903c:	2500      	movne	r5, #0
 800903e:	4293      	cmp	r3, r2
 8009040:	bfc4      	itt	gt
 8009042:	1a9b      	subgt	r3, r3, r2
 8009044:	18ed      	addgt	r5, r5, r3
 8009046:	2600      	movs	r6, #0
 8009048:	341a      	adds	r4, #26
 800904a:	42b5      	cmp	r5, r6
 800904c:	d11a      	bne.n	8009084 <_printf_common+0xc8>
 800904e:	2000      	movs	r0, #0
 8009050:	e008      	b.n	8009064 <_printf_common+0xa8>
 8009052:	2301      	movs	r3, #1
 8009054:	4652      	mov	r2, sl
 8009056:	4649      	mov	r1, r9
 8009058:	4638      	mov	r0, r7
 800905a:	47c0      	blx	r8
 800905c:	3001      	adds	r0, #1
 800905e:	d103      	bne.n	8009068 <_printf_common+0xac>
 8009060:	f04f 30ff 	mov.w	r0, #4294967295
 8009064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009068:	3501      	adds	r5, #1
 800906a:	e7c6      	b.n	8008ffa <_printf_common+0x3e>
 800906c:	18e1      	adds	r1, r4, r3
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	2030      	movs	r0, #48	; 0x30
 8009072:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009076:	4422      	add	r2, r4
 8009078:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800907c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009080:	3302      	adds	r3, #2
 8009082:	e7c7      	b.n	8009014 <_printf_common+0x58>
 8009084:	2301      	movs	r3, #1
 8009086:	4622      	mov	r2, r4
 8009088:	4649      	mov	r1, r9
 800908a:	4638      	mov	r0, r7
 800908c:	47c0      	blx	r8
 800908e:	3001      	adds	r0, #1
 8009090:	d0e6      	beq.n	8009060 <_printf_common+0xa4>
 8009092:	3601      	adds	r6, #1
 8009094:	e7d9      	b.n	800904a <_printf_common+0x8e>
	...

08009098 <_printf_i>:
 8009098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800909c:	460c      	mov	r4, r1
 800909e:	4691      	mov	r9, r2
 80090a0:	7e27      	ldrb	r7, [r4, #24]
 80090a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80090a4:	2f78      	cmp	r7, #120	; 0x78
 80090a6:	4680      	mov	r8, r0
 80090a8:	469a      	mov	sl, r3
 80090aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090ae:	d807      	bhi.n	80090c0 <_printf_i+0x28>
 80090b0:	2f62      	cmp	r7, #98	; 0x62
 80090b2:	d80a      	bhi.n	80090ca <_printf_i+0x32>
 80090b4:	2f00      	cmp	r7, #0
 80090b6:	f000 80d8 	beq.w	800926a <_printf_i+0x1d2>
 80090ba:	2f58      	cmp	r7, #88	; 0x58
 80090bc:	f000 80a3 	beq.w	8009206 <_printf_i+0x16e>
 80090c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80090c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090c8:	e03a      	b.n	8009140 <_printf_i+0xa8>
 80090ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090ce:	2b15      	cmp	r3, #21
 80090d0:	d8f6      	bhi.n	80090c0 <_printf_i+0x28>
 80090d2:	a001      	add	r0, pc, #4	; (adr r0, 80090d8 <_printf_i+0x40>)
 80090d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80090d8:	08009131 	.word	0x08009131
 80090dc:	08009145 	.word	0x08009145
 80090e0:	080090c1 	.word	0x080090c1
 80090e4:	080090c1 	.word	0x080090c1
 80090e8:	080090c1 	.word	0x080090c1
 80090ec:	080090c1 	.word	0x080090c1
 80090f0:	08009145 	.word	0x08009145
 80090f4:	080090c1 	.word	0x080090c1
 80090f8:	080090c1 	.word	0x080090c1
 80090fc:	080090c1 	.word	0x080090c1
 8009100:	080090c1 	.word	0x080090c1
 8009104:	08009251 	.word	0x08009251
 8009108:	08009175 	.word	0x08009175
 800910c:	08009233 	.word	0x08009233
 8009110:	080090c1 	.word	0x080090c1
 8009114:	080090c1 	.word	0x080090c1
 8009118:	08009273 	.word	0x08009273
 800911c:	080090c1 	.word	0x080090c1
 8009120:	08009175 	.word	0x08009175
 8009124:	080090c1 	.word	0x080090c1
 8009128:	080090c1 	.word	0x080090c1
 800912c:	0800923b 	.word	0x0800923b
 8009130:	680b      	ldr	r3, [r1, #0]
 8009132:	1d1a      	adds	r2, r3, #4
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	600a      	str	r2, [r1, #0]
 8009138:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800913c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009140:	2301      	movs	r3, #1
 8009142:	e0a3      	b.n	800928c <_printf_i+0x1f4>
 8009144:	6825      	ldr	r5, [r4, #0]
 8009146:	6808      	ldr	r0, [r1, #0]
 8009148:	062e      	lsls	r6, r5, #24
 800914a:	f100 0304 	add.w	r3, r0, #4
 800914e:	d50a      	bpl.n	8009166 <_printf_i+0xce>
 8009150:	6805      	ldr	r5, [r0, #0]
 8009152:	600b      	str	r3, [r1, #0]
 8009154:	2d00      	cmp	r5, #0
 8009156:	da03      	bge.n	8009160 <_printf_i+0xc8>
 8009158:	232d      	movs	r3, #45	; 0x2d
 800915a:	426d      	negs	r5, r5
 800915c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009160:	485e      	ldr	r0, [pc, #376]	; (80092dc <_printf_i+0x244>)
 8009162:	230a      	movs	r3, #10
 8009164:	e019      	b.n	800919a <_printf_i+0x102>
 8009166:	f015 0f40 	tst.w	r5, #64	; 0x40
 800916a:	6805      	ldr	r5, [r0, #0]
 800916c:	600b      	str	r3, [r1, #0]
 800916e:	bf18      	it	ne
 8009170:	b22d      	sxthne	r5, r5
 8009172:	e7ef      	b.n	8009154 <_printf_i+0xbc>
 8009174:	680b      	ldr	r3, [r1, #0]
 8009176:	6825      	ldr	r5, [r4, #0]
 8009178:	1d18      	adds	r0, r3, #4
 800917a:	6008      	str	r0, [r1, #0]
 800917c:	0628      	lsls	r0, r5, #24
 800917e:	d501      	bpl.n	8009184 <_printf_i+0xec>
 8009180:	681d      	ldr	r5, [r3, #0]
 8009182:	e002      	b.n	800918a <_printf_i+0xf2>
 8009184:	0669      	lsls	r1, r5, #25
 8009186:	d5fb      	bpl.n	8009180 <_printf_i+0xe8>
 8009188:	881d      	ldrh	r5, [r3, #0]
 800918a:	4854      	ldr	r0, [pc, #336]	; (80092dc <_printf_i+0x244>)
 800918c:	2f6f      	cmp	r7, #111	; 0x6f
 800918e:	bf0c      	ite	eq
 8009190:	2308      	moveq	r3, #8
 8009192:	230a      	movne	r3, #10
 8009194:	2100      	movs	r1, #0
 8009196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800919a:	6866      	ldr	r6, [r4, #4]
 800919c:	60a6      	str	r6, [r4, #8]
 800919e:	2e00      	cmp	r6, #0
 80091a0:	bfa2      	ittt	ge
 80091a2:	6821      	ldrge	r1, [r4, #0]
 80091a4:	f021 0104 	bicge.w	r1, r1, #4
 80091a8:	6021      	strge	r1, [r4, #0]
 80091aa:	b90d      	cbnz	r5, 80091b0 <_printf_i+0x118>
 80091ac:	2e00      	cmp	r6, #0
 80091ae:	d04d      	beq.n	800924c <_printf_i+0x1b4>
 80091b0:	4616      	mov	r6, r2
 80091b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80091b6:	fb03 5711 	mls	r7, r3, r1, r5
 80091ba:	5dc7      	ldrb	r7, [r0, r7]
 80091bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091c0:	462f      	mov	r7, r5
 80091c2:	42bb      	cmp	r3, r7
 80091c4:	460d      	mov	r5, r1
 80091c6:	d9f4      	bls.n	80091b2 <_printf_i+0x11a>
 80091c8:	2b08      	cmp	r3, #8
 80091ca:	d10b      	bne.n	80091e4 <_printf_i+0x14c>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	07df      	lsls	r7, r3, #31
 80091d0:	d508      	bpl.n	80091e4 <_printf_i+0x14c>
 80091d2:	6923      	ldr	r3, [r4, #16]
 80091d4:	6861      	ldr	r1, [r4, #4]
 80091d6:	4299      	cmp	r1, r3
 80091d8:	bfde      	ittt	le
 80091da:	2330      	movle	r3, #48	; 0x30
 80091dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091e4:	1b92      	subs	r2, r2, r6
 80091e6:	6122      	str	r2, [r4, #16]
 80091e8:	f8cd a000 	str.w	sl, [sp]
 80091ec:	464b      	mov	r3, r9
 80091ee:	aa03      	add	r2, sp, #12
 80091f0:	4621      	mov	r1, r4
 80091f2:	4640      	mov	r0, r8
 80091f4:	f7ff fee2 	bl	8008fbc <_printf_common>
 80091f8:	3001      	adds	r0, #1
 80091fa:	d14c      	bne.n	8009296 <_printf_i+0x1fe>
 80091fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009200:	b004      	add	sp, #16
 8009202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009206:	4835      	ldr	r0, [pc, #212]	; (80092dc <_printf_i+0x244>)
 8009208:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	680e      	ldr	r6, [r1, #0]
 8009210:	061f      	lsls	r7, r3, #24
 8009212:	f856 5b04 	ldr.w	r5, [r6], #4
 8009216:	600e      	str	r6, [r1, #0]
 8009218:	d514      	bpl.n	8009244 <_printf_i+0x1ac>
 800921a:	07d9      	lsls	r1, r3, #31
 800921c:	bf44      	itt	mi
 800921e:	f043 0320 	orrmi.w	r3, r3, #32
 8009222:	6023      	strmi	r3, [r4, #0]
 8009224:	b91d      	cbnz	r5, 800922e <_printf_i+0x196>
 8009226:	6823      	ldr	r3, [r4, #0]
 8009228:	f023 0320 	bic.w	r3, r3, #32
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	2310      	movs	r3, #16
 8009230:	e7b0      	b.n	8009194 <_printf_i+0xfc>
 8009232:	6823      	ldr	r3, [r4, #0]
 8009234:	f043 0320 	orr.w	r3, r3, #32
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	2378      	movs	r3, #120	; 0x78
 800923c:	4828      	ldr	r0, [pc, #160]	; (80092e0 <_printf_i+0x248>)
 800923e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009242:	e7e3      	b.n	800920c <_printf_i+0x174>
 8009244:	065e      	lsls	r6, r3, #25
 8009246:	bf48      	it	mi
 8009248:	b2ad      	uxthmi	r5, r5
 800924a:	e7e6      	b.n	800921a <_printf_i+0x182>
 800924c:	4616      	mov	r6, r2
 800924e:	e7bb      	b.n	80091c8 <_printf_i+0x130>
 8009250:	680b      	ldr	r3, [r1, #0]
 8009252:	6826      	ldr	r6, [r4, #0]
 8009254:	6960      	ldr	r0, [r4, #20]
 8009256:	1d1d      	adds	r5, r3, #4
 8009258:	600d      	str	r5, [r1, #0]
 800925a:	0635      	lsls	r5, r6, #24
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	d501      	bpl.n	8009264 <_printf_i+0x1cc>
 8009260:	6018      	str	r0, [r3, #0]
 8009262:	e002      	b.n	800926a <_printf_i+0x1d2>
 8009264:	0671      	lsls	r1, r6, #25
 8009266:	d5fb      	bpl.n	8009260 <_printf_i+0x1c8>
 8009268:	8018      	strh	r0, [r3, #0]
 800926a:	2300      	movs	r3, #0
 800926c:	6123      	str	r3, [r4, #16]
 800926e:	4616      	mov	r6, r2
 8009270:	e7ba      	b.n	80091e8 <_printf_i+0x150>
 8009272:	680b      	ldr	r3, [r1, #0]
 8009274:	1d1a      	adds	r2, r3, #4
 8009276:	600a      	str	r2, [r1, #0]
 8009278:	681e      	ldr	r6, [r3, #0]
 800927a:	6862      	ldr	r2, [r4, #4]
 800927c:	2100      	movs	r1, #0
 800927e:	4630      	mov	r0, r6
 8009280:	f7f7 f836 	bl	80002f0 <memchr>
 8009284:	b108      	cbz	r0, 800928a <_printf_i+0x1f2>
 8009286:	1b80      	subs	r0, r0, r6
 8009288:	6060      	str	r0, [r4, #4]
 800928a:	6863      	ldr	r3, [r4, #4]
 800928c:	6123      	str	r3, [r4, #16]
 800928e:	2300      	movs	r3, #0
 8009290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009294:	e7a8      	b.n	80091e8 <_printf_i+0x150>
 8009296:	6923      	ldr	r3, [r4, #16]
 8009298:	4632      	mov	r2, r6
 800929a:	4649      	mov	r1, r9
 800929c:	4640      	mov	r0, r8
 800929e:	47d0      	blx	sl
 80092a0:	3001      	adds	r0, #1
 80092a2:	d0ab      	beq.n	80091fc <_printf_i+0x164>
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	079b      	lsls	r3, r3, #30
 80092a8:	d413      	bmi.n	80092d2 <_printf_i+0x23a>
 80092aa:	68e0      	ldr	r0, [r4, #12]
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	4298      	cmp	r0, r3
 80092b0:	bfb8      	it	lt
 80092b2:	4618      	movlt	r0, r3
 80092b4:	e7a4      	b.n	8009200 <_printf_i+0x168>
 80092b6:	2301      	movs	r3, #1
 80092b8:	4632      	mov	r2, r6
 80092ba:	4649      	mov	r1, r9
 80092bc:	4640      	mov	r0, r8
 80092be:	47d0      	blx	sl
 80092c0:	3001      	adds	r0, #1
 80092c2:	d09b      	beq.n	80091fc <_printf_i+0x164>
 80092c4:	3501      	adds	r5, #1
 80092c6:	68e3      	ldr	r3, [r4, #12]
 80092c8:	9903      	ldr	r1, [sp, #12]
 80092ca:	1a5b      	subs	r3, r3, r1
 80092cc:	42ab      	cmp	r3, r5
 80092ce:	dcf2      	bgt.n	80092b6 <_printf_i+0x21e>
 80092d0:	e7eb      	b.n	80092aa <_printf_i+0x212>
 80092d2:	2500      	movs	r5, #0
 80092d4:	f104 0619 	add.w	r6, r4, #25
 80092d8:	e7f5      	b.n	80092c6 <_printf_i+0x22e>
 80092da:	bf00      	nop
 80092dc:	0800d1aa 	.word	0x0800d1aa
 80092e0:	0800d1bb 	.word	0x0800d1bb

080092e4 <iprintf>:
 80092e4:	b40f      	push	{r0, r1, r2, r3}
 80092e6:	4b0a      	ldr	r3, [pc, #40]	; (8009310 <iprintf+0x2c>)
 80092e8:	b513      	push	{r0, r1, r4, lr}
 80092ea:	681c      	ldr	r4, [r3, #0]
 80092ec:	b124      	cbz	r4, 80092f8 <iprintf+0x14>
 80092ee:	69a3      	ldr	r3, [r4, #24]
 80092f0:	b913      	cbnz	r3, 80092f8 <iprintf+0x14>
 80092f2:	4620      	mov	r0, r4
 80092f4:	f001 f8dc 	bl	800a4b0 <__sinit>
 80092f8:	ab05      	add	r3, sp, #20
 80092fa:	9a04      	ldr	r2, [sp, #16]
 80092fc:	68a1      	ldr	r1, [r4, #8]
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	4620      	mov	r0, r4
 8009302:	f001 fdc1 	bl	800ae88 <_vfiprintf_r>
 8009306:	b002      	add	sp, #8
 8009308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800930c:	b004      	add	sp, #16
 800930e:	4770      	bx	lr
 8009310:	24000010 	.word	0x24000010

08009314 <_puts_r>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	460e      	mov	r6, r1
 8009318:	4605      	mov	r5, r0
 800931a:	b118      	cbz	r0, 8009324 <_puts_r+0x10>
 800931c:	6983      	ldr	r3, [r0, #24]
 800931e:	b90b      	cbnz	r3, 8009324 <_puts_r+0x10>
 8009320:	f001 f8c6 	bl	800a4b0 <__sinit>
 8009324:	69ab      	ldr	r3, [r5, #24]
 8009326:	68ac      	ldr	r4, [r5, #8]
 8009328:	b913      	cbnz	r3, 8009330 <_puts_r+0x1c>
 800932a:	4628      	mov	r0, r5
 800932c:	f001 f8c0 	bl	800a4b0 <__sinit>
 8009330:	4b2c      	ldr	r3, [pc, #176]	; (80093e4 <_puts_r+0xd0>)
 8009332:	429c      	cmp	r4, r3
 8009334:	d120      	bne.n	8009378 <_puts_r+0x64>
 8009336:	686c      	ldr	r4, [r5, #4]
 8009338:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800933a:	07db      	lsls	r3, r3, #31
 800933c:	d405      	bmi.n	800934a <_puts_r+0x36>
 800933e:	89a3      	ldrh	r3, [r4, #12]
 8009340:	0598      	lsls	r0, r3, #22
 8009342:	d402      	bmi.n	800934a <_puts_r+0x36>
 8009344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009346:	f001 f968 	bl	800a61a <__retarget_lock_acquire_recursive>
 800934a:	89a3      	ldrh	r3, [r4, #12]
 800934c:	0719      	lsls	r1, r3, #28
 800934e:	d51d      	bpl.n	800938c <_puts_r+0x78>
 8009350:	6923      	ldr	r3, [r4, #16]
 8009352:	b1db      	cbz	r3, 800938c <_puts_r+0x78>
 8009354:	3e01      	subs	r6, #1
 8009356:	68a3      	ldr	r3, [r4, #8]
 8009358:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800935c:	3b01      	subs	r3, #1
 800935e:	60a3      	str	r3, [r4, #8]
 8009360:	bb39      	cbnz	r1, 80093b2 <_puts_r+0x9e>
 8009362:	2b00      	cmp	r3, #0
 8009364:	da38      	bge.n	80093d8 <_puts_r+0xc4>
 8009366:	4622      	mov	r2, r4
 8009368:	210a      	movs	r1, #10
 800936a:	4628      	mov	r0, r5
 800936c:	f000 f898 	bl	80094a0 <__swbuf_r>
 8009370:	3001      	adds	r0, #1
 8009372:	d011      	beq.n	8009398 <_puts_r+0x84>
 8009374:	250a      	movs	r5, #10
 8009376:	e011      	b.n	800939c <_puts_r+0x88>
 8009378:	4b1b      	ldr	r3, [pc, #108]	; (80093e8 <_puts_r+0xd4>)
 800937a:	429c      	cmp	r4, r3
 800937c:	d101      	bne.n	8009382 <_puts_r+0x6e>
 800937e:	68ac      	ldr	r4, [r5, #8]
 8009380:	e7da      	b.n	8009338 <_puts_r+0x24>
 8009382:	4b1a      	ldr	r3, [pc, #104]	; (80093ec <_puts_r+0xd8>)
 8009384:	429c      	cmp	r4, r3
 8009386:	bf08      	it	eq
 8009388:	68ec      	ldreq	r4, [r5, #12]
 800938a:	e7d5      	b.n	8009338 <_puts_r+0x24>
 800938c:	4621      	mov	r1, r4
 800938e:	4628      	mov	r0, r5
 8009390:	f000 f8d8 	bl	8009544 <__swsetup_r>
 8009394:	2800      	cmp	r0, #0
 8009396:	d0dd      	beq.n	8009354 <_puts_r+0x40>
 8009398:	f04f 35ff 	mov.w	r5, #4294967295
 800939c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800939e:	07da      	lsls	r2, r3, #31
 80093a0:	d405      	bmi.n	80093ae <_puts_r+0x9a>
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	059b      	lsls	r3, r3, #22
 80093a6:	d402      	bmi.n	80093ae <_puts_r+0x9a>
 80093a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093aa:	f001 f937 	bl	800a61c <__retarget_lock_release_recursive>
 80093ae:	4628      	mov	r0, r5
 80093b0:	bd70      	pop	{r4, r5, r6, pc}
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	da04      	bge.n	80093c0 <_puts_r+0xac>
 80093b6:	69a2      	ldr	r2, [r4, #24]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	dc06      	bgt.n	80093ca <_puts_r+0xb6>
 80093bc:	290a      	cmp	r1, #10
 80093be:	d004      	beq.n	80093ca <_puts_r+0xb6>
 80093c0:	6823      	ldr	r3, [r4, #0]
 80093c2:	1c5a      	adds	r2, r3, #1
 80093c4:	6022      	str	r2, [r4, #0]
 80093c6:	7019      	strb	r1, [r3, #0]
 80093c8:	e7c5      	b.n	8009356 <_puts_r+0x42>
 80093ca:	4622      	mov	r2, r4
 80093cc:	4628      	mov	r0, r5
 80093ce:	f000 f867 	bl	80094a0 <__swbuf_r>
 80093d2:	3001      	adds	r0, #1
 80093d4:	d1bf      	bne.n	8009356 <_puts_r+0x42>
 80093d6:	e7df      	b.n	8009398 <_puts_r+0x84>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	250a      	movs	r5, #10
 80093dc:	1c5a      	adds	r2, r3, #1
 80093de:	6022      	str	r2, [r4, #0]
 80093e0:	701d      	strb	r5, [r3, #0]
 80093e2:	e7db      	b.n	800939c <_puts_r+0x88>
 80093e4:	0800d31c 	.word	0x0800d31c
 80093e8:	0800d33c 	.word	0x0800d33c
 80093ec:	0800d2fc 	.word	0x0800d2fc

080093f0 <puts>:
 80093f0:	4b02      	ldr	r3, [pc, #8]	; (80093fc <puts+0xc>)
 80093f2:	4601      	mov	r1, r0
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	f7ff bf8d 	b.w	8009314 <_puts_r>
 80093fa:	bf00      	nop
 80093fc:	24000010 	.word	0x24000010

08009400 <rand>:
 8009400:	4b17      	ldr	r3, [pc, #92]	; (8009460 <rand+0x60>)
 8009402:	b510      	push	{r4, lr}
 8009404:	681c      	ldr	r4, [r3, #0]
 8009406:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009408:	b9b3      	cbnz	r3, 8009438 <rand+0x38>
 800940a:	2018      	movs	r0, #24
 800940c:	f7ff fa6c 	bl	80088e8 <malloc>
 8009410:	63a0      	str	r0, [r4, #56]	; 0x38
 8009412:	b928      	cbnz	r0, 8009420 <rand+0x20>
 8009414:	4602      	mov	r2, r0
 8009416:	4b13      	ldr	r3, [pc, #76]	; (8009464 <rand+0x64>)
 8009418:	4813      	ldr	r0, [pc, #76]	; (8009468 <rand+0x68>)
 800941a:	214e      	movs	r1, #78	; 0x4e
 800941c:	f000 f900 	bl	8009620 <__assert_func>
 8009420:	4a12      	ldr	r2, [pc, #72]	; (800946c <rand+0x6c>)
 8009422:	4b13      	ldr	r3, [pc, #76]	; (8009470 <rand+0x70>)
 8009424:	e9c0 2300 	strd	r2, r3, [r0]
 8009428:	4b12      	ldr	r3, [pc, #72]	; (8009474 <rand+0x74>)
 800942a:	6083      	str	r3, [r0, #8]
 800942c:	230b      	movs	r3, #11
 800942e:	8183      	strh	r3, [r0, #12]
 8009430:	2201      	movs	r2, #1
 8009432:	2300      	movs	r3, #0
 8009434:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009438:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800943a:	480f      	ldr	r0, [pc, #60]	; (8009478 <rand+0x78>)
 800943c:	690a      	ldr	r2, [r1, #16]
 800943e:	694b      	ldr	r3, [r1, #20]
 8009440:	4c0e      	ldr	r4, [pc, #56]	; (800947c <rand+0x7c>)
 8009442:	4350      	muls	r0, r2
 8009444:	fb04 0003 	mla	r0, r4, r3, r0
 8009448:	fba2 3404 	umull	r3, r4, r2, r4
 800944c:	1c5a      	adds	r2, r3, #1
 800944e:	4404      	add	r4, r0
 8009450:	f144 0000 	adc.w	r0, r4, #0
 8009454:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8009458:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800945c:	bd10      	pop	{r4, pc}
 800945e:	bf00      	nop
 8009460:	24000010 	.word	0x24000010
 8009464:	0800d1cc 	.word	0x0800d1cc
 8009468:	0800d1e3 	.word	0x0800d1e3
 800946c:	abcd330e 	.word	0xabcd330e
 8009470:	e66d1234 	.word	0xe66d1234
 8009474:	0005deec 	.word	0x0005deec
 8009478:	5851f42d 	.word	0x5851f42d
 800947c:	4c957f2d 	.word	0x4c957f2d

08009480 <_sbrk_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4d06      	ldr	r5, [pc, #24]	; (800949c <_sbrk_r+0x1c>)
 8009484:	2300      	movs	r3, #0
 8009486:	4604      	mov	r4, r0
 8009488:	4608      	mov	r0, r1
 800948a:	602b      	str	r3, [r5, #0]
 800948c:	f7f9 fb4a 	bl	8002b24 <_sbrk>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d102      	bne.n	800949a <_sbrk_r+0x1a>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	b103      	cbz	r3, 800949a <_sbrk_r+0x1a>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	2400089c 	.word	0x2400089c

080094a0 <__swbuf_r>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	460e      	mov	r6, r1
 80094a4:	4614      	mov	r4, r2
 80094a6:	4605      	mov	r5, r0
 80094a8:	b118      	cbz	r0, 80094b2 <__swbuf_r+0x12>
 80094aa:	6983      	ldr	r3, [r0, #24]
 80094ac:	b90b      	cbnz	r3, 80094b2 <__swbuf_r+0x12>
 80094ae:	f000 ffff 	bl	800a4b0 <__sinit>
 80094b2:	4b21      	ldr	r3, [pc, #132]	; (8009538 <__swbuf_r+0x98>)
 80094b4:	429c      	cmp	r4, r3
 80094b6:	d12b      	bne.n	8009510 <__swbuf_r+0x70>
 80094b8:	686c      	ldr	r4, [r5, #4]
 80094ba:	69a3      	ldr	r3, [r4, #24]
 80094bc:	60a3      	str	r3, [r4, #8]
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	071a      	lsls	r2, r3, #28
 80094c2:	d52f      	bpl.n	8009524 <__swbuf_r+0x84>
 80094c4:	6923      	ldr	r3, [r4, #16]
 80094c6:	b36b      	cbz	r3, 8009524 <__swbuf_r+0x84>
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	6820      	ldr	r0, [r4, #0]
 80094cc:	1ac0      	subs	r0, r0, r3
 80094ce:	6963      	ldr	r3, [r4, #20]
 80094d0:	b2f6      	uxtb	r6, r6
 80094d2:	4283      	cmp	r3, r0
 80094d4:	4637      	mov	r7, r6
 80094d6:	dc04      	bgt.n	80094e2 <__swbuf_r+0x42>
 80094d8:	4621      	mov	r1, r4
 80094da:	4628      	mov	r0, r5
 80094dc:	f000 ff54 	bl	800a388 <_fflush_r>
 80094e0:	bb30      	cbnz	r0, 8009530 <__swbuf_r+0x90>
 80094e2:	68a3      	ldr	r3, [r4, #8]
 80094e4:	3b01      	subs	r3, #1
 80094e6:	60a3      	str	r3, [r4, #8]
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	1c5a      	adds	r2, r3, #1
 80094ec:	6022      	str	r2, [r4, #0]
 80094ee:	701e      	strb	r6, [r3, #0]
 80094f0:	6963      	ldr	r3, [r4, #20]
 80094f2:	3001      	adds	r0, #1
 80094f4:	4283      	cmp	r3, r0
 80094f6:	d004      	beq.n	8009502 <__swbuf_r+0x62>
 80094f8:	89a3      	ldrh	r3, [r4, #12]
 80094fa:	07db      	lsls	r3, r3, #31
 80094fc:	d506      	bpl.n	800950c <__swbuf_r+0x6c>
 80094fe:	2e0a      	cmp	r6, #10
 8009500:	d104      	bne.n	800950c <__swbuf_r+0x6c>
 8009502:	4621      	mov	r1, r4
 8009504:	4628      	mov	r0, r5
 8009506:	f000 ff3f 	bl	800a388 <_fflush_r>
 800950a:	b988      	cbnz	r0, 8009530 <__swbuf_r+0x90>
 800950c:	4638      	mov	r0, r7
 800950e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009510:	4b0a      	ldr	r3, [pc, #40]	; (800953c <__swbuf_r+0x9c>)
 8009512:	429c      	cmp	r4, r3
 8009514:	d101      	bne.n	800951a <__swbuf_r+0x7a>
 8009516:	68ac      	ldr	r4, [r5, #8]
 8009518:	e7cf      	b.n	80094ba <__swbuf_r+0x1a>
 800951a:	4b09      	ldr	r3, [pc, #36]	; (8009540 <__swbuf_r+0xa0>)
 800951c:	429c      	cmp	r4, r3
 800951e:	bf08      	it	eq
 8009520:	68ec      	ldreq	r4, [r5, #12]
 8009522:	e7ca      	b.n	80094ba <__swbuf_r+0x1a>
 8009524:	4621      	mov	r1, r4
 8009526:	4628      	mov	r0, r5
 8009528:	f000 f80c 	bl	8009544 <__swsetup_r>
 800952c:	2800      	cmp	r0, #0
 800952e:	d0cb      	beq.n	80094c8 <__swbuf_r+0x28>
 8009530:	f04f 37ff 	mov.w	r7, #4294967295
 8009534:	e7ea      	b.n	800950c <__swbuf_r+0x6c>
 8009536:	bf00      	nop
 8009538:	0800d31c 	.word	0x0800d31c
 800953c:	0800d33c 	.word	0x0800d33c
 8009540:	0800d2fc 	.word	0x0800d2fc

08009544 <__swsetup_r>:
 8009544:	4b32      	ldr	r3, [pc, #200]	; (8009610 <__swsetup_r+0xcc>)
 8009546:	b570      	push	{r4, r5, r6, lr}
 8009548:	681d      	ldr	r5, [r3, #0]
 800954a:	4606      	mov	r6, r0
 800954c:	460c      	mov	r4, r1
 800954e:	b125      	cbz	r5, 800955a <__swsetup_r+0x16>
 8009550:	69ab      	ldr	r3, [r5, #24]
 8009552:	b913      	cbnz	r3, 800955a <__swsetup_r+0x16>
 8009554:	4628      	mov	r0, r5
 8009556:	f000 ffab 	bl	800a4b0 <__sinit>
 800955a:	4b2e      	ldr	r3, [pc, #184]	; (8009614 <__swsetup_r+0xd0>)
 800955c:	429c      	cmp	r4, r3
 800955e:	d10f      	bne.n	8009580 <__swsetup_r+0x3c>
 8009560:	686c      	ldr	r4, [r5, #4]
 8009562:	89a3      	ldrh	r3, [r4, #12]
 8009564:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009568:	0719      	lsls	r1, r3, #28
 800956a:	d42c      	bmi.n	80095c6 <__swsetup_r+0x82>
 800956c:	06dd      	lsls	r5, r3, #27
 800956e:	d411      	bmi.n	8009594 <__swsetup_r+0x50>
 8009570:	2309      	movs	r3, #9
 8009572:	6033      	str	r3, [r6, #0]
 8009574:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009578:	81a3      	strh	r3, [r4, #12]
 800957a:	f04f 30ff 	mov.w	r0, #4294967295
 800957e:	e03e      	b.n	80095fe <__swsetup_r+0xba>
 8009580:	4b25      	ldr	r3, [pc, #148]	; (8009618 <__swsetup_r+0xd4>)
 8009582:	429c      	cmp	r4, r3
 8009584:	d101      	bne.n	800958a <__swsetup_r+0x46>
 8009586:	68ac      	ldr	r4, [r5, #8]
 8009588:	e7eb      	b.n	8009562 <__swsetup_r+0x1e>
 800958a:	4b24      	ldr	r3, [pc, #144]	; (800961c <__swsetup_r+0xd8>)
 800958c:	429c      	cmp	r4, r3
 800958e:	bf08      	it	eq
 8009590:	68ec      	ldreq	r4, [r5, #12]
 8009592:	e7e6      	b.n	8009562 <__swsetup_r+0x1e>
 8009594:	0758      	lsls	r0, r3, #29
 8009596:	d512      	bpl.n	80095be <__swsetup_r+0x7a>
 8009598:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800959a:	b141      	cbz	r1, 80095ae <__swsetup_r+0x6a>
 800959c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095a0:	4299      	cmp	r1, r3
 80095a2:	d002      	beq.n	80095aa <__swsetup_r+0x66>
 80095a4:	4630      	mov	r0, r6
 80095a6:	f7ff f9af 	bl	8008908 <_free_r>
 80095aa:	2300      	movs	r3, #0
 80095ac:	6363      	str	r3, [r4, #52]	; 0x34
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095b4:	81a3      	strh	r3, [r4, #12]
 80095b6:	2300      	movs	r3, #0
 80095b8:	6063      	str	r3, [r4, #4]
 80095ba:	6923      	ldr	r3, [r4, #16]
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	89a3      	ldrh	r3, [r4, #12]
 80095c0:	f043 0308 	orr.w	r3, r3, #8
 80095c4:	81a3      	strh	r3, [r4, #12]
 80095c6:	6923      	ldr	r3, [r4, #16]
 80095c8:	b94b      	cbnz	r3, 80095de <__swsetup_r+0x9a>
 80095ca:	89a3      	ldrh	r3, [r4, #12]
 80095cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095d4:	d003      	beq.n	80095de <__swsetup_r+0x9a>
 80095d6:	4621      	mov	r1, r4
 80095d8:	4630      	mov	r0, r6
 80095da:	f001 f845 	bl	800a668 <__smakebuf_r>
 80095de:	89a0      	ldrh	r0, [r4, #12]
 80095e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095e4:	f010 0301 	ands.w	r3, r0, #1
 80095e8:	d00a      	beq.n	8009600 <__swsetup_r+0xbc>
 80095ea:	2300      	movs	r3, #0
 80095ec:	60a3      	str	r3, [r4, #8]
 80095ee:	6963      	ldr	r3, [r4, #20]
 80095f0:	425b      	negs	r3, r3
 80095f2:	61a3      	str	r3, [r4, #24]
 80095f4:	6923      	ldr	r3, [r4, #16]
 80095f6:	b943      	cbnz	r3, 800960a <__swsetup_r+0xc6>
 80095f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095fc:	d1ba      	bne.n	8009574 <__swsetup_r+0x30>
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
 8009600:	0781      	lsls	r1, r0, #30
 8009602:	bf58      	it	pl
 8009604:	6963      	ldrpl	r3, [r4, #20]
 8009606:	60a3      	str	r3, [r4, #8]
 8009608:	e7f4      	b.n	80095f4 <__swsetup_r+0xb0>
 800960a:	2000      	movs	r0, #0
 800960c:	e7f7      	b.n	80095fe <__swsetup_r+0xba>
 800960e:	bf00      	nop
 8009610:	24000010 	.word	0x24000010
 8009614:	0800d31c 	.word	0x0800d31c
 8009618:	0800d33c 	.word	0x0800d33c
 800961c:	0800d2fc 	.word	0x0800d2fc

08009620 <__assert_func>:
 8009620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009622:	4614      	mov	r4, r2
 8009624:	461a      	mov	r2, r3
 8009626:	4b09      	ldr	r3, [pc, #36]	; (800964c <__assert_func+0x2c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4605      	mov	r5, r0
 800962c:	68d8      	ldr	r0, [r3, #12]
 800962e:	b14c      	cbz	r4, 8009644 <__assert_func+0x24>
 8009630:	4b07      	ldr	r3, [pc, #28]	; (8009650 <__assert_func+0x30>)
 8009632:	9100      	str	r1, [sp, #0]
 8009634:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009638:	4906      	ldr	r1, [pc, #24]	; (8009654 <__assert_func+0x34>)
 800963a:	462b      	mov	r3, r5
 800963c:	f000 ffb6 	bl	800a5ac <fiprintf>
 8009640:	f001 fda8 	bl	800b194 <abort>
 8009644:	4b04      	ldr	r3, [pc, #16]	; (8009658 <__assert_func+0x38>)
 8009646:	461c      	mov	r4, r3
 8009648:	e7f3      	b.n	8009632 <__assert_func+0x12>
 800964a:	bf00      	nop
 800964c:	24000010 	.word	0x24000010
 8009650:	0800d242 	.word	0x0800d242
 8009654:	0800d24f 	.word	0x0800d24f
 8009658:	0800d27d 	.word	0x0800d27d

0800965c <quorem>:
 800965c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	6903      	ldr	r3, [r0, #16]
 8009662:	690c      	ldr	r4, [r1, #16]
 8009664:	42a3      	cmp	r3, r4
 8009666:	4607      	mov	r7, r0
 8009668:	f2c0 8081 	blt.w	800976e <quorem+0x112>
 800966c:	3c01      	subs	r4, #1
 800966e:	f101 0814 	add.w	r8, r1, #20
 8009672:	f100 0514 	add.w	r5, r0, #20
 8009676:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009680:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009684:	3301      	adds	r3, #1
 8009686:	429a      	cmp	r2, r3
 8009688:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800968c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009690:	fbb2 f6f3 	udiv	r6, r2, r3
 8009694:	d331      	bcc.n	80096fa <quorem+0x9e>
 8009696:	f04f 0e00 	mov.w	lr, #0
 800969a:	4640      	mov	r0, r8
 800969c:	46ac      	mov	ip, r5
 800969e:	46f2      	mov	sl, lr
 80096a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80096a4:	b293      	uxth	r3, r2
 80096a6:	fb06 e303 	mla	r3, r6, r3, lr
 80096aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	ebaa 0303 	sub.w	r3, sl, r3
 80096b4:	0c12      	lsrs	r2, r2, #16
 80096b6:	f8dc a000 	ldr.w	sl, [ip]
 80096ba:	fb06 e202 	mla	r2, r6, r2, lr
 80096be:	fa13 f38a 	uxtah	r3, r3, sl
 80096c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096c6:	fa1f fa82 	uxth.w	sl, r2
 80096ca:	f8dc 2000 	ldr.w	r2, [ip]
 80096ce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80096d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096dc:	4581      	cmp	r9, r0
 80096de:	f84c 3b04 	str.w	r3, [ip], #4
 80096e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80096e6:	d2db      	bcs.n	80096a0 <quorem+0x44>
 80096e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80096ec:	b92b      	cbnz	r3, 80096fa <quorem+0x9e>
 80096ee:	9b01      	ldr	r3, [sp, #4]
 80096f0:	3b04      	subs	r3, #4
 80096f2:	429d      	cmp	r5, r3
 80096f4:	461a      	mov	r2, r3
 80096f6:	d32e      	bcc.n	8009756 <quorem+0xfa>
 80096f8:	613c      	str	r4, [r7, #16]
 80096fa:	4638      	mov	r0, r7
 80096fc:	f001 fa8c 	bl	800ac18 <__mcmp>
 8009700:	2800      	cmp	r0, #0
 8009702:	db24      	blt.n	800974e <quorem+0xf2>
 8009704:	3601      	adds	r6, #1
 8009706:	4628      	mov	r0, r5
 8009708:	f04f 0c00 	mov.w	ip, #0
 800970c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009710:	f8d0 e000 	ldr.w	lr, [r0]
 8009714:	b293      	uxth	r3, r2
 8009716:	ebac 0303 	sub.w	r3, ip, r3
 800971a:	0c12      	lsrs	r2, r2, #16
 800971c:	fa13 f38e 	uxtah	r3, r3, lr
 8009720:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009728:	b29b      	uxth	r3, r3
 800972a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800972e:	45c1      	cmp	r9, r8
 8009730:	f840 3b04 	str.w	r3, [r0], #4
 8009734:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009738:	d2e8      	bcs.n	800970c <quorem+0xb0>
 800973a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800973e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009742:	b922      	cbnz	r2, 800974e <quorem+0xf2>
 8009744:	3b04      	subs	r3, #4
 8009746:	429d      	cmp	r5, r3
 8009748:	461a      	mov	r2, r3
 800974a:	d30a      	bcc.n	8009762 <quorem+0x106>
 800974c:	613c      	str	r4, [r7, #16]
 800974e:	4630      	mov	r0, r6
 8009750:	b003      	add	sp, #12
 8009752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009756:	6812      	ldr	r2, [r2, #0]
 8009758:	3b04      	subs	r3, #4
 800975a:	2a00      	cmp	r2, #0
 800975c:	d1cc      	bne.n	80096f8 <quorem+0x9c>
 800975e:	3c01      	subs	r4, #1
 8009760:	e7c7      	b.n	80096f2 <quorem+0x96>
 8009762:	6812      	ldr	r2, [r2, #0]
 8009764:	3b04      	subs	r3, #4
 8009766:	2a00      	cmp	r2, #0
 8009768:	d1f0      	bne.n	800974c <quorem+0xf0>
 800976a:	3c01      	subs	r4, #1
 800976c:	e7eb      	b.n	8009746 <quorem+0xea>
 800976e:	2000      	movs	r0, #0
 8009770:	e7ee      	b.n	8009750 <quorem+0xf4>
 8009772:	0000      	movs	r0, r0
 8009774:	0000      	movs	r0, r0
	...

08009778 <_dtoa_r>:
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	ec59 8b10 	vmov	r8, r9, d0
 8009780:	b095      	sub	sp, #84	; 0x54
 8009782:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009784:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009786:	9107      	str	r1, [sp, #28]
 8009788:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800978c:	4606      	mov	r6, r0
 800978e:	9209      	str	r2, [sp, #36]	; 0x24
 8009790:	9310      	str	r3, [sp, #64]	; 0x40
 8009792:	b975      	cbnz	r5, 80097b2 <_dtoa_r+0x3a>
 8009794:	2010      	movs	r0, #16
 8009796:	f7ff f8a7 	bl	80088e8 <malloc>
 800979a:	4602      	mov	r2, r0
 800979c:	6270      	str	r0, [r6, #36]	; 0x24
 800979e:	b920      	cbnz	r0, 80097aa <_dtoa_r+0x32>
 80097a0:	4bab      	ldr	r3, [pc, #684]	; (8009a50 <_dtoa_r+0x2d8>)
 80097a2:	21ea      	movs	r1, #234	; 0xea
 80097a4:	48ab      	ldr	r0, [pc, #684]	; (8009a54 <_dtoa_r+0x2dc>)
 80097a6:	f7ff ff3b 	bl	8009620 <__assert_func>
 80097aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097ae:	6005      	str	r5, [r0, #0]
 80097b0:	60c5      	str	r5, [r0, #12]
 80097b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80097b4:	6819      	ldr	r1, [r3, #0]
 80097b6:	b151      	cbz	r1, 80097ce <_dtoa_r+0x56>
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	604a      	str	r2, [r1, #4]
 80097bc:	2301      	movs	r3, #1
 80097be:	4093      	lsls	r3, r2
 80097c0:	608b      	str	r3, [r1, #8]
 80097c2:	4630      	mov	r0, r6
 80097c4:	f000 ffea 	bl	800a79c <_Bfree>
 80097c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80097ca:	2200      	movs	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	f1b9 0300 	subs.w	r3, r9, #0
 80097d2:	bfbb      	ittet	lt
 80097d4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80097d8:	9303      	strlt	r3, [sp, #12]
 80097da:	2300      	movge	r3, #0
 80097dc:	2201      	movlt	r2, #1
 80097de:	bfac      	ite	ge
 80097e0:	6023      	strge	r3, [r4, #0]
 80097e2:	6022      	strlt	r2, [r4, #0]
 80097e4:	4b9c      	ldr	r3, [pc, #624]	; (8009a58 <_dtoa_r+0x2e0>)
 80097e6:	9c03      	ldr	r4, [sp, #12]
 80097e8:	43a3      	bics	r3, r4
 80097ea:	d11a      	bne.n	8009822 <_dtoa_r+0xaa>
 80097ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80097f8:	ea53 0308 	orrs.w	r3, r3, r8
 80097fc:	f000 8512 	beq.w	800a224 <_dtoa_r+0xaac>
 8009800:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009802:	b953      	cbnz	r3, 800981a <_dtoa_r+0xa2>
 8009804:	4b95      	ldr	r3, [pc, #596]	; (8009a5c <_dtoa_r+0x2e4>)
 8009806:	e01f      	b.n	8009848 <_dtoa_r+0xd0>
 8009808:	4b95      	ldr	r3, [pc, #596]	; (8009a60 <_dtoa_r+0x2e8>)
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	3308      	adds	r3, #8
 800980e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	9800      	ldr	r0, [sp, #0]
 8009814:	b015      	add	sp, #84	; 0x54
 8009816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981a:	4b90      	ldr	r3, [pc, #576]	; (8009a5c <_dtoa_r+0x2e4>)
 800981c:	9300      	str	r3, [sp, #0]
 800981e:	3303      	adds	r3, #3
 8009820:	e7f5      	b.n	800980e <_dtoa_r+0x96>
 8009822:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009826:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800982a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009832:	d10b      	bne.n	800984c <_dtoa_r+0xd4>
 8009834:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009836:	2301      	movs	r3, #1
 8009838:	6013      	str	r3, [r2, #0]
 800983a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800983c:	2b00      	cmp	r3, #0
 800983e:	f000 84ee 	beq.w	800a21e <_dtoa_r+0xaa6>
 8009842:	4888      	ldr	r0, [pc, #544]	; (8009a64 <_dtoa_r+0x2ec>)
 8009844:	6018      	str	r0, [r3, #0]
 8009846:	1e43      	subs	r3, r0, #1
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	e7e2      	b.n	8009812 <_dtoa_r+0x9a>
 800984c:	a913      	add	r1, sp, #76	; 0x4c
 800984e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009852:	aa12      	add	r2, sp, #72	; 0x48
 8009854:	4630      	mov	r0, r6
 8009856:	f001 fa83 	bl	800ad60 <__d2b>
 800985a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800985e:	4605      	mov	r5, r0
 8009860:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009862:	2900      	cmp	r1, #0
 8009864:	d047      	beq.n	80098f6 <_dtoa_r+0x17e>
 8009866:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009868:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800986c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009870:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009874:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009878:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800987c:	2400      	movs	r4, #0
 800987e:	ec43 2b16 	vmov	d6, r2, r3
 8009882:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009886:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009a38 <_dtoa_r+0x2c0>
 800988a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800988e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009a40 <_dtoa_r+0x2c8>
 8009892:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009896:	eeb0 7b46 	vmov.f64	d7, d6
 800989a:	ee06 1a90 	vmov	s13, r1
 800989e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80098a2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009a48 <_dtoa_r+0x2d0>
 80098a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80098aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80098ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80098b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b6:	ee16 ba90 	vmov	fp, s13
 80098ba:	9411      	str	r4, [sp, #68]	; 0x44
 80098bc:	d508      	bpl.n	80098d0 <_dtoa_r+0x158>
 80098be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80098c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80098c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ca:	bf18      	it	ne
 80098cc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80098d0:	f1bb 0f16 	cmp.w	fp, #22
 80098d4:	d832      	bhi.n	800993c <_dtoa_r+0x1c4>
 80098d6:	4b64      	ldr	r3, [pc, #400]	; (8009a68 <_dtoa_r+0x2f0>)
 80098d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80098dc:	ed93 7b00 	vldr	d7, [r3]
 80098e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80098e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80098e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ec:	d501      	bpl.n	80098f2 <_dtoa_r+0x17a>
 80098ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80098f2:	2300      	movs	r3, #0
 80098f4:	e023      	b.n	800993e <_dtoa_r+0x1c6>
 80098f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80098f8:	4401      	add	r1, r0
 80098fa:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80098fe:	2b20      	cmp	r3, #32
 8009900:	bfc3      	ittte	gt
 8009902:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009906:	fa04 f303 	lslgt.w	r3, r4, r3
 800990a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800990e:	f1c3 0320 	rsble	r3, r3, #32
 8009912:	bfc6      	itte	gt
 8009914:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009918:	ea43 0308 	orrgt.w	r3, r3, r8
 800991c:	fa08 f303 	lslle.w	r3, r8, r3
 8009920:	ee07 3a90 	vmov	s15, r3
 8009924:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009928:	3901      	subs	r1, #1
 800992a:	ed8d 7b00 	vstr	d7, [sp]
 800992e:	9c01      	ldr	r4, [sp, #4]
 8009930:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009934:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009938:	2401      	movs	r4, #1
 800993a:	e7a0      	b.n	800987e <_dtoa_r+0x106>
 800993c:	2301      	movs	r3, #1
 800993e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009940:	1a43      	subs	r3, r0, r1
 8009942:	1e5a      	subs	r2, r3, #1
 8009944:	bf45      	ittet	mi
 8009946:	f1c3 0301 	rsbmi	r3, r3, #1
 800994a:	9305      	strmi	r3, [sp, #20]
 800994c:	2300      	movpl	r3, #0
 800994e:	2300      	movmi	r3, #0
 8009950:	9206      	str	r2, [sp, #24]
 8009952:	bf54      	ite	pl
 8009954:	9305      	strpl	r3, [sp, #20]
 8009956:	9306      	strmi	r3, [sp, #24]
 8009958:	f1bb 0f00 	cmp.w	fp, #0
 800995c:	db18      	blt.n	8009990 <_dtoa_r+0x218>
 800995e:	9b06      	ldr	r3, [sp, #24]
 8009960:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009964:	445b      	add	r3, fp
 8009966:	9306      	str	r3, [sp, #24]
 8009968:	2300      	movs	r3, #0
 800996a:	9a07      	ldr	r2, [sp, #28]
 800996c:	2a09      	cmp	r2, #9
 800996e:	d849      	bhi.n	8009a04 <_dtoa_r+0x28c>
 8009970:	2a05      	cmp	r2, #5
 8009972:	bfc4      	itt	gt
 8009974:	3a04      	subgt	r2, #4
 8009976:	9207      	strgt	r2, [sp, #28]
 8009978:	9a07      	ldr	r2, [sp, #28]
 800997a:	f1a2 0202 	sub.w	r2, r2, #2
 800997e:	bfcc      	ite	gt
 8009980:	2400      	movgt	r4, #0
 8009982:	2401      	movle	r4, #1
 8009984:	2a03      	cmp	r2, #3
 8009986:	d848      	bhi.n	8009a1a <_dtoa_r+0x2a2>
 8009988:	e8df f002 	tbb	[pc, r2]
 800998c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009990:	9b05      	ldr	r3, [sp, #20]
 8009992:	2200      	movs	r2, #0
 8009994:	eba3 030b 	sub.w	r3, r3, fp
 8009998:	9305      	str	r3, [sp, #20]
 800999a:	920e      	str	r2, [sp, #56]	; 0x38
 800999c:	f1cb 0300 	rsb	r3, fp, #0
 80099a0:	e7e3      	b.n	800996a <_dtoa_r+0x1f2>
 80099a2:	2200      	movs	r2, #0
 80099a4:	9208      	str	r2, [sp, #32]
 80099a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099a8:	2a00      	cmp	r2, #0
 80099aa:	dc39      	bgt.n	8009a20 <_dtoa_r+0x2a8>
 80099ac:	f04f 0a01 	mov.w	sl, #1
 80099b0:	46d1      	mov	r9, sl
 80099b2:	4652      	mov	r2, sl
 80099b4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80099b8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80099ba:	2100      	movs	r1, #0
 80099bc:	6079      	str	r1, [r7, #4]
 80099be:	2004      	movs	r0, #4
 80099c0:	f100 0c14 	add.w	ip, r0, #20
 80099c4:	4594      	cmp	ip, r2
 80099c6:	6879      	ldr	r1, [r7, #4]
 80099c8:	d92f      	bls.n	8009a2a <_dtoa_r+0x2b2>
 80099ca:	4630      	mov	r0, r6
 80099cc:	930c      	str	r3, [sp, #48]	; 0x30
 80099ce:	f000 fea5 	bl	800a71c <_Balloc>
 80099d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099d4:	9000      	str	r0, [sp, #0]
 80099d6:	4602      	mov	r2, r0
 80099d8:	2800      	cmp	r0, #0
 80099da:	d149      	bne.n	8009a70 <_dtoa_r+0x2f8>
 80099dc:	4b23      	ldr	r3, [pc, #140]	; (8009a6c <_dtoa_r+0x2f4>)
 80099de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099e2:	e6df      	b.n	80097a4 <_dtoa_r+0x2c>
 80099e4:	2201      	movs	r2, #1
 80099e6:	e7dd      	b.n	80099a4 <_dtoa_r+0x22c>
 80099e8:	2200      	movs	r2, #0
 80099ea:	9208      	str	r2, [sp, #32]
 80099ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099ee:	eb0b 0a02 	add.w	sl, fp, r2
 80099f2:	f10a 0901 	add.w	r9, sl, #1
 80099f6:	464a      	mov	r2, r9
 80099f8:	2a01      	cmp	r2, #1
 80099fa:	bfb8      	it	lt
 80099fc:	2201      	movlt	r2, #1
 80099fe:	e7db      	b.n	80099b8 <_dtoa_r+0x240>
 8009a00:	2201      	movs	r2, #1
 8009a02:	e7f2      	b.n	80099ea <_dtoa_r+0x272>
 8009a04:	2401      	movs	r4, #1
 8009a06:	2200      	movs	r2, #0
 8009a08:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009a0c:	f04f 3aff 	mov.w	sl, #4294967295
 8009a10:	2100      	movs	r1, #0
 8009a12:	46d1      	mov	r9, sl
 8009a14:	2212      	movs	r2, #18
 8009a16:	9109      	str	r1, [sp, #36]	; 0x24
 8009a18:	e7ce      	b.n	80099b8 <_dtoa_r+0x240>
 8009a1a:	2201      	movs	r2, #1
 8009a1c:	9208      	str	r2, [sp, #32]
 8009a1e:	e7f5      	b.n	8009a0c <_dtoa_r+0x294>
 8009a20:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009a24:	46d1      	mov	r9, sl
 8009a26:	4652      	mov	r2, sl
 8009a28:	e7c6      	b.n	80099b8 <_dtoa_r+0x240>
 8009a2a:	3101      	adds	r1, #1
 8009a2c:	6079      	str	r1, [r7, #4]
 8009a2e:	0040      	lsls	r0, r0, #1
 8009a30:	e7c6      	b.n	80099c0 <_dtoa_r+0x248>
 8009a32:	bf00      	nop
 8009a34:	f3af 8000 	nop.w
 8009a38:	636f4361 	.word	0x636f4361
 8009a3c:	3fd287a7 	.word	0x3fd287a7
 8009a40:	8b60c8b3 	.word	0x8b60c8b3
 8009a44:	3fc68a28 	.word	0x3fc68a28
 8009a48:	509f79fb 	.word	0x509f79fb
 8009a4c:	3fd34413 	.word	0x3fd34413
 8009a50:	0800d1cc 	.word	0x0800d1cc
 8009a54:	0800d28b 	.word	0x0800d28b
 8009a58:	7ff00000 	.word	0x7ff00000
 8009a5c:	0800d287 	.word	0x0800d287
 8009a60:	0800d27e 	.word	0x0800d27e
 8009a64:	0800d1a9 	.word	0x0800d1a9
 8009a68:	0800d3e8 	.word	0x0800d3e8
 8009a6c:	0800d2ea 	.word	0x0800d2ea
 8009a70:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009a72:	9900      	ldr	r1, [sp, #0]
 8009a74:	6011      	str	r1, [r2, #0]
 8009a76:	f1b9 0f0e 	cmp.w	r9, #14
 8009a7a:	d872      	bhi.n	8009b62 <_dtoa_r+0x3ea>
 8009a7c:	2c00      	cmp	r4, #0
 8009a7e:	d070      	beq.n	8009b62 <_dtoa_r+0x3ea>
 8009a80:	f1bb 0f00 	cmp.w	fp, #0
 8009a84:	f340 80a6 	ble.w	8009bd4 <_dtoa_r+0x45c>
 8009a88:	49ca      	ldr	r1, [pc, #808]	; (8009db4 <_dtoa_r+0x63c>)
 8009a8a:	f00b 020f 	and.w	r2, fp, #15
 8009a8e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009a92:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009a96:	ed92 7b00 	vldr	d7, [r2]
 8009a9a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009a9e:	f000 808d 	beq.w	8009bbc <_dtoa_r+0x444>
 8009aa2:	4ac5      	ldr	r2, [pc, #788]	; (8009db8 <_dtoa_r+0x640>)
 8009aa4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009aa8:	ed92 6b08 	vldr	d6, [r2, #32]
 8009aac:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009ab0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009ab4:	f001 010f 	and.w	r1, r1, #15
 8009ab8:	2203      	movs	r2, #3
 8009aba:	48bf      	ldr	r0, [pc, #764]	; (8009db8 <_dtoa_r+0x640>)
 8009abc:	2900      	cmp	r1, #0
 8009abe:	d17f      	bne.n	8009bc0 <_dtoa_r+0x448>
 8009ac0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009ac4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009ac8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009acc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ace:	2900      	cmp	r1, #0
 8009ad0:	f000 80b2 	beq.w	8009c38 <_dtoa_r+0x4c0>
 8009ad4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009ad8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009adc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae4:	f140 80a8 	bpl.w	8009c38 <_dtoa_r+0x4c0>
 8009ae8:	f1b9 0f00 	cmp.w	r9, #0
 8009aec:	f000 80a4 	beq.w	8009c38 <_dtoa_r+0x4c0>
 8009af0:	f1ba 0f00 	cmp.w	sl, #0
 8009af4:	dd31      	ble.n	8009b5a <_dtoa_r+0x3e2>
 8009af6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009afa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009afe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b02:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009b06:	3201      	adds	r2, #1
 8009b08:	4650      	mov	r0, sl
 8009b0a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009b0e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009b12:	ee07 2a90 	vmov	s15, r2
 8009b16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009b1a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009b1e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8009b22:	9c03      	ldr	r4, [sp, #12]
 8009b24:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009b28:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	f040 8086 	bne.w	8009c3e <_dtoa_r+0x4c6>
 8009b32:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009b36:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009b3a:	ec42 1b17 	vmov	d7, r1, r2
 8009b3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b46:	f300 8272 	bgt.w	800a02e <_dtoa_r+0x8b6>
 8009b4a:	eeb1 7b47 	vneg.f64	d7, d7
 8009b4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b56:	f100 8267 	bmi.w	800a028 <_dtoa_r+0x8b0>
 8009b5a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8009b5e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009b62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b64:	2a00      	cmp	r2, #0
 8009b66:	f2c0 8129 	blt.w	8009dbc <_dtoa_r+0x644>
 8009b6a:	f1bb 0f0e 	cmp.w	fp, #14
 8009b6e:	f300 8125 	bgt.w	8009dbc <_dtoa_r+0x644>
 8009b72:	4b90      	ldr	r3, [pc, #576]	; (8009db4 <_dtoa_r+0x63c>)
 8009b74:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b78:	ed93 6b00 	vldr	d6, [r3]
 8009b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f280 80c3 	bge.w	8009d0a <_dtoa_r+0x592>
 8009b84:	f1b9 0f00 	cmp.w	r9, #0
 8009b88:	f300 80bf 	bgt.w	8009d0a <_dtoa_r+0x592>
 8009b8c:	f040 824c 	bne.w	800a028 <_dtoa_r+0x8b0>
 8009b90:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009b94:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009b98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba4:	464c      	mov	r4, r9
 8009ba6:	464f      	mov	r7, r9
 8009ba8:	f280 8222 	bge.w	8009ff0 <_dtoa_r+0x878>
 8009bac:	f8dd 8000 	ldr.w	r8, [sp]
 8009bb0:	2331      	movs	r3, #49	; 0x31
 8009bb2:	f808 3b01 	strb.w	r3, [r8], #1
 8009bb6:	f10b 0b01 	add.w	fp, fp, #1
 8009bba:	e21e      	b.n	8009ffa <_dtoa_r+0x882>
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	e77c      	b.n	8009aba <_dtoa_r+0x342>
 8009bc0:	07cc      	lsls	r4, r1, #31
 8009bc2:	d504      	bpl.n	8009bce <_dtoa_r+0x456>
 8009bc4:	ed90 6b00 	vldr	d6, [r0]
 8009bc8:	3201      	adds	r2, #1
 8009bca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bce:	1049      	asrs	r1, r1, #1
 8009bd0:	3008      	adds	r0, #8
 8009bd2:	e773      	b.n	8009abc <_dtoa_r+0x344>
 8009bd4:	d02e      	beq.n	8009c34 <_dtoa_r+0x4bc>
 8009bd6:	f1cb 0100 	rsb	r1, fp, #0
 8009bda:	4a76      	ldr	r2, [pc, #472]	; (8009db4 <_dtoa_r+0x63c>)
 8009bdc:	f001 000f 	and.w	r0, r1, #15
 8009be0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009be4:	ed92 7b00 	vldr	d7, [r2]
 8009be8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009bec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009bf0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009bf4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8009bf8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8009bfc:	486e      	ldr	r0, [pc, #440]	; (8009db8 <_dtoa_r+0x640>)
 8009bfe:	1109      	asrs	r1, r1, #4
 8009c00:	2400      	movs	r4, #0
 8009c02:	2202      	movs	r2, #2
 8009c04:	b939      	cbnz	r1, 8009c16 <_dtoa_r+0x49e>
 8009c06:	2c00      	cmp	r4, #0
 8009c08:	f43f af60 	beq.w	8009acc <_dtoa_r+0x354>
 8009c0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c14:	e75a      	b.n	8009acc <_dtoa_r+0x354>
 8009c16:	07cf      	lsls	r7, r1, #31
 8009c18:	d509      	bpl.n	8009c2e <_dtoa_r+0x4b6>
 8009c1a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8009c1e:	ed90 7b00 	vldr	d7, [r0]
 8009c22:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009c26:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009c2a:	3201      	adds	r2, #1
 8009c2c:	2401      	movs	r4, #1
 8009c2e:	1049      	asrs	r1, r1, #1
 8009c30:	3008      	adds	r0, #8
 8009c32:	e7e7      	b.n	8009c04 <_dtoa_r+0x48c>
 8009c34:	2202      	movs	r2, #2
 8009c36:	e749      	b.n	8009acc <_dtoa_r+0x354>
 8009c38:	465f      	mov	r7, fp
 8009c3a:	4648      	mov	r0, r9
 8009c3c:	e765      	b.n	8009b0a <_dtoa_r+0x392>
 8009c3e:	ec42 1b17 	vmov	d7, r1, r2
 8009c42:	4a5c      	ldr	r2, [pc, #368]	; (8009db4 <_dtoa_r+0x63c>)
 8009c44:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009c48:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009c4c:	9a00      	ldr	r2, [sp, #0]
 8009c4e:	1814      	adds	r4, r2, r0
 8009c50:	9a08      	ldr	r2, [sp, #32]
 8009c52:	b352      	cbz	r2, 8009caa <_dtoa_r+0x532>
 8009c54:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009c58:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009c5c:	f8dd 8000 	ldr.w	r8, [sp]
 8009c60:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009c64:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009c68:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009c6c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c70:	ee14 2a90 	vmov	r2, s9
 8009c74:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c78:	3230      	adds	r2, #48	; 0x30
 8009c7a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c86:	f808 2b01 	strb.w	r2, [r8], #1
 8009c8a:	d439      	bmi.n	8009d00 <_dtoa_r+0x588>
 8009c8c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009c90:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c98:	d472      	bmi.n	8009d80 <_dtoa_r+0x608>
 8009c9a:	45a0      	cmp	r8, r4
 8009c9c:	f43f af5d 	beq.w	8009b5a <_dtoa_r+0x3e2>
 8009ca0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009ca4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009ca8:	e7e0      	b.n	8009c6c <_dtoa_r+0x4f4>
 8009caa:	f8dd 8000 	ldr.w	r8, [sp]
 8009cae:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009cb8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009cbc:	ee14 2a90 	vmov	r2, s9
 8009cc0:	3230      	adds	r2, #48	; 0x30
 8009cc2:	f808 2b01 	strb.w	r2, [r8], #1
 8009cc6:	45a0      	cmp	r8, r4
 8009cc8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009ccc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009cd0:	d118      	bne.n	8009d04 <_dtoa_r+0x58c>
 8009cd2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009cd6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009cda:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce2:	dc4d      	bgt.n	8009d80 <_dtoa_r+0x608>
 8009ce4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009ce8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf0:	f57f af33 	bpl.w	8009b5a <_dtoa_r+0x3e2>
 8009cf4:	4688      	mov	r8, r1
 8009cf6:	3901      	subs	r1, #1
 8009cf8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009cfc:	2b30      	cmp	r3, #48	; 0x30
 8009cfe:	d0f9      	beq.n	8009cf4 <_dtoa_r+0x57c>
 8009d00:	46bb      	mov	fp, r7
 8009d02:	e02a      	b.n	8009d5a <_dtoa_r+0x5e2>
 8009d04:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009d08:	e7d6      	b.n	8009cb8 <_dtoa_r+0x540>
 8009d0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d0e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009d12:	f8dd 8000 	ldr.w	r8, [sp]
 8009d16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009d1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009d1e:	ee15 3a10 	vmov	r3, s10
 8009d22:	3330      	adds	r3, #48	; 0x30
 8009d24:	f808 3b01 	strb.w	r3, [r8], #1
 8009d28:	9b00      	ldr	r3, [sp, #0]
 8009d2a:	eba8 0303 	sub.w	r3, r8, r3
 8009d2e:	4599      	cmp	r9, r3
 8009d30:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009d34:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009d38:	d133      	bne.n	8009da2 <_dtoa_r+0x62a>
 8009d3a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009d3e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d46:	dc1a      	bgt.n	8009d7e <_dtoa_r+0x606>
 8009d48:	eeb4 7b46 	vcmp.f64	d7, d6
 8009d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d50:	d103      	bne.n	8009d5a <_dtoa_r+0x5e2>
 8009d52:	ee15 3a10 	vmov	r3, s10
 8009d56:	07d9      	lsls	r1, r3, #31
 8009d58:	d411      	bmi.n	8009d7e <_dtoa_r+0x606>
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	f000 fd1d 	bl	800a79c <_Bfree>
 8009d62:	2300      	movs	r3, #0
 8009d64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d66:	f888 3000 	strb.w	r3, [r8]
 8009d6a:	f10b 0301 	add.w	r3, fp, #1
 8009d6e:	6013      	str	r3, [r2, #0]
 8009d70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f43f ad4d 	beq.w	8009812 <_dtoa_r+0x9a>
 8009d78:	f8c3 8000 	str.w	r8, [r3]
 8009d7c:	e549      	b.n	8009812 <_dtoa_r+0x9a>
 8009d7e:	465f      	mov	r7, fp
 8009d80:	4643      	mov	r3, r8
 8009d82:	4698      	mov	r8, r3
 8009d84:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d88:	2a39      	cmp	r2, #57	; 0x39
 8009d8a:	d106      	bne.n	8009d9a <_dtoa_r+0x622>
 8009d8c:	9a00      	ldr	r2, [sp, #0]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d1f7      	bne.n	8009d82 <_dtoa_r+0x60a>
 8009d92:	9900      	ldr	r1, [sp, #0]
 8009d94:	2230      	movs	r2, #48	; 0x30
 8009d96:	3701      	adds	r7, #1
 8009d98:	700a      	strb	r2, [r1, #0]
 8009d9a:	781a      	ldrb	r2, [r3, #0]
 8009d9c:	3201      	adds	r2, #1
 8009d9e:	701a      	strb	r2, [r3, #0]
 8009da0:	e7ae      	b.n	8009d00 <_dtoa_r+0x588>
 8009da2:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009da6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dae:	d1b2      	bne.n	8009d16 <_dtoa_r+0x59e>
 8009db0:	e7d3      	b.n	8009d5a <_dtoa_r+0x5e2>
 8009db2:	bf00      	nop
 8009db4:	0800d3e8 	.word	0x0800d3e8
 8009db8:	0800d3c0 	.word	0x0800d3c0
 8009dbc:	9908      	ldr	r1, [sp, #32]
 8009dbe:	2900      	cmp	r1, #0
 8009dc0:	f000 80d1 	beq.w	8009f66 <_dtoa_r+0x7ee>
 8009dc4:	9907      	ldr	r1, [sp, #28]
 8009dc6:	2901      	cmp	r1, #1
 8009dc8:	f300 80b4 	bgt.w	8009f34 <_dtoa_r+0x7bc>
 8009dcc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009dce:	2900      	cmp	r1, #0
 8009dd0:	f000 80ac 	beq.w	8009f2c <_dtoa_r+0x7b4>
 8009dd4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009dd8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009ddc:	461c      	mov	r4, r3
 8009dde:	930a      	str	r3, [sp, #40]	; 0x28
 8009de0:	9b05      	ldr	r3, [sp, #20]
 8009de2:	4413      	add	r3, r2
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	9b06      	ldr	r3, [sp, #24]
 8009de8:	2101      	movs	r1, #1
 8009dea:	4413      	add	r3, r2
 8009dec:	4630      	mov	r0, r6
 8009dee:	9306      	str	r3, [sp, #24]
 8009df0:	f000 fd90 	bl	800a914 <__i2b>
 8009df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009df6:	4607      	mov	r7, r0
 8009df8:	f1b8 0f00 	cmp.w	r8, #0
 8009dfc:	dd0d      	ble.n	8009e1a <_dtoa_r+0x6a2>
 8009dfe:	9a06      	ldr	r2, [sp, #24]
 8009e00:	2a00      	cmp	r2, #0
 8009e02:	dd0a      	ble.n	8009e1a <_dtoa_r+0x6a2>
 8009e04:	4542      	cmp	r2, r8
 8009e06:	9905      	ldr	r1, [sp, #20]
 8009e08:	bfa8      	it	ge
 8009e0a:	4642      	movge	r2, r8
 8009e0c:	1a89      	subs	r1, r1, r2
 8009e0e:	9105      	str	r1, [sp, #20]
 8009e10:	9906      	ldr	r1, [sp, #24]
 8009e12:	eba8 0802 	sub.w	r8, r8, r2
 8009e16:	1a8a      	subs	r2, r1, r2
 8009e18:	9206      	str	r2, [sp, #24]
 8009e1a:	b303      	cbz	r3, 8009e5e <_dtoa_r+0x6e6>
 8009e1c:	9a08      	ldr	r2, [sp, #32]
 8009e1e:	2a00      	cmp	r2, #0
 8009e20:	f000 80a6 	beq.w	8009f70 <_dtoa_r+0x7f8>
 8009e24:	2c00      	cmp	r4, #0
 8009e26:	dd13      	ble.n	8009e50 <_dtoa_r+0x6d8>
 8009e28:	4639      	mov	r1, r7
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8009e30:	f000 fe2c 	bl	800aa8c <__pow5mult>
 8009e34:	462a      	mov	r2, r5
 8009e36:	4601      	mov	r1, r0
 8009e38:	4607      	mov	r7, r0
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f000 fd80 	bl	800a940 <__multiply>
 8009e40:	4629      	mov	r1, r5
 8009e42:	900a      	str	r0, [sp, #40]	; 0x28
 8009e44:	4630      	mov	r0, r6
 8009e46:	f000 fca9 	bl	800a79c <_Bfree>
 8009e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e4e:	4615      	mov	r5, r2
 8009e50:	1b1a      	subs	r2, r3, r4
 8009e52:	d004      	beq.n	8009e5e <_dtoa_r+0x6e6>
 8009e54:	4629      	mov	r1, r5
 8009e56:	4630      	mov	r0, r6
 8009e58:	f000 fe18 	bl	800aa8c <__pow5mult>
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	2101      	movs	r1, #1
 8009e60:	4630      	mov	r0, r6
 8009e62:	f000 fd57 	bl	800a914 <__i2b>
 8009e66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	f340 8082 	ble.w	8009f74 <_dtoa_r+0x7fc>
 8009e70:	461a      	mov	r2, r3
 8009e72:	4601      	mov	r1, r0
 8009e74:	4630      	mov	r0, r6
 8009e76:	f000 fe09 	bl	800aa8c <__pow5mult>
 8009e7a:	9b07      	ldr	r3, [sp, #28]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	4604      	mov	r4, r0
 8009e80:	dd7b      	ble.n	8009f7a <_dtoa_r+0x802>
 8009e82:	2300      	movs	r3, #0
 8009e84:	930a      	str	r3, [sp, #40]	; 0x28
 8009e86:	6922      	ldr	r2, [r4, #16]
 8009e88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009e8c:	6910      	ldr	r0, [r2, #16]
 8009e8e:	f000 fcf1 	bl	800a874 <__hi0bits>
 8009e92:	f1c0 0020 	rsb	r0, r0, #32
 8009e96:	9b06      	ldr	r3, [sp, #24]
 8009e98:	4418      	add	r0, r3
 8009e9a:	f010 001f 	ands.w	r0, r0, #31
 8009e9e:	f000 808d 	beq.w	8009fbc <_dtoa_r+0x844>
 8009ea2:	f1c0 0220 	rsb	r2, r0, #32
 8009ea6:	2a04      	cmp	r2, #4
 8009ea8:	f340 8086 	ble.w	8009fb8 <_dtoa_r+0x840>
 8009eac:	f1c0 001c 	rsb	r0, r0, #28
 8009eb0:	9b05      	ldr	r3, [sp, #20]
 8009eb2:	4403      	add	r3, r0
 8009eb4:	9305      	str	r3, [sp, #20]
 8009eb6:	9b06      	ldr	r3, [sp, #24]
 8009eb8:	4403      	add	r3, r0
 8009eba:	4480      	add	r8, r0
 8009ebc:	9306      	str	r3, [sp, #24]
 8009ebe:	9b05      	ldr	r3, [sp, #20]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	dd05      	ble.n	8009ed0 <_dtoa_r+0x758>
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f000 fe39 	bl	800ab40 <__lshift>
 8009ece:	4605      	mov	r5, r0
 8009ed0:	9b06      	ldr	r3, [sp, #24]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	dd05      	ble.n	8009ee2 <_dtoa_r+0x76a>
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	461a      	mov	r2, r3
 8009eda:	4630      	mov	r0, r6
 8009edc:	f000 fe30 	bl	800ab40 <__lshift>
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d06b      	beq.n	8009fc0 <_dtoa_r+0x848>
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4628      	mov	r0, r5
 8009eec:	f000 fe94 	bl	800ac18 <__mcmp>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	da65      	bge.n	8009fc0 <_dtoa_r+0x848>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	220a      	movs	r2, #10
 8009efa:	4630      	mov	r0, r6
 8009efc:	f000 fc70 	bl	800a7e0 <__multadd>
 8009f00:	9b08      	ldr	r3, [sp, #32]
 8009f02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f06:	4605      	mov	r5, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 8192 	beq.w	800a232 <_dtoa_r+0xaba>
 8009f0e:	4639      	mov	r1, r7
 8009f10:	2300      	movs	r3, #0
 8009f12:	220a      	movs	r2, #10
 8009f14:	4630      	mov	r0, r6
 8009f16:	f000 fc63 	bl	800a7e0 <__multadd>
 8009f1a:	f1ba 0f00 	cmp.w	sl, #0
 8009f1e:	4607      	mov	r7, r0
 8009f20:	f300 808e 	bgt.w	800a040 <_dtoa_r+0x8c8>
 8009f24:	9b07      	ldr	r3, [sp, #28]
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	dc51      	bgt.n	8009fce <_dtoa_r+0x856>
 8009f2a:	e089      	b.n	800a040 <_dtoa_r+0x8c8>
 8009f2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009f32:	e751      	b.n	8009dd8 <_dtoa_r+0x660>
 8009f34:	f109 34ff 	add.w	r4, r9, #4294967295
 8009f38:	42a3      	cmp	r3, r4
 8009f3a:	bfbf      	itttt	lt
 8009f3c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8009f3e:	1ae3      	sublt	r3, r4, r3
 8009f40:	18d2      	addlt	r2, r2, r3
 8009f42:	4613      	movlt	r3, r2
 8009f44:	bfb7      	itett	lt
 8009f46:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009f48:	1b1c      	subge	r4, r3, r4
 8009f4a:	4623      	movlt	r3, r4
 8009f4c:	2400      	movlt	r4, #0
 8009f4e:	f1b9 0f00 	cmp.w	r9, #0
 8009f52:	bfb5      	itete	lt
 8009f54:	9a05      	ldrlt	r2, [sp, #20]
 8009f56:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8009f5a:	eba2 0809 	sublt.w	r8, r2, r9
 8009f5e:	464a      	movge	r2, r9
 8009f60:	bfb8      	it	lt
 8009f62:	2200      	movlt	r2, #0
 8009f64:	e73b      	b.n	8009dde <_dtoa_r+0x666>
 8009f66:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009f6a:	9f08      	ldr	r7, [sp, #32]
 8009f6c:	461c      	mov	r4, r3
 8009f6e:	e743      	b.n	8009df8 <_dtoa_r+0x680>
 8009f70:	461a      	mov	r2, r3
 8009f72:	e76f      	b.n	8009e54 <_dtoa_r+0x6dc>
 8009f74:	9b07      	ldr	r3, [sp, #28]
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	dc18      	bgt.n	8009fac <_dtoa_r+0x834>
 8009f7a:	9b02      	ldr	r3, [sp, #8]
 8009f7c:	b9b3      	cbnz	r3, 8009fac <_dtoa_r+0x834>
 8009f7e:	9b03      	ldr	r3, [sp, #12]
 8009f80:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009f84:	b9a2      	cbnz	r2, 8009fb0 <_dtoa_r+0x838>
 8009f86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009f8a:	0d12      	lsrs	r2, r2, #20
 8009f8c:	0512      	lsls	r2, r2, #20
 8009f8e:	b18a      	cbz	r2, 8009fb4 <_dtoa_r+0x83c>
 8009f90:	9b05      	ldr	r3, [sp, #20]
 8009f92:	3301      	adds	r3, #1
 8009f94:	9305      	str	r3, [sp, #20]
 8009f96:	9b06      	ldr	r3, [sp, #24]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	9306      	str	r3, [sp, #24]
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8009fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f47f af6f 	bne.w	8009e86 <_dtoa_r+0x70e>
 8009fa8:	2001      	movs	r0, #1
 8009faa:	e774      	b.n	8009e96 <_dtoa_r+0x71e>
 8009fac:	2300      	movs	r3, #0
 8009fae:	e7f6      	b.n	8009f9e <_dtoa_r+0x826>
 8009fb0:	9b02      	ldr	r3, [sp, #8]
 8009fb2:	e7f4      	b.n	8009f9e <_dtoa_r+0x826>
 8009fb4:	920a      	str	r2, [sp, #40]	; 0x28
 8009fb6:	e7f3      	b.n	8009fa0 <_dtoa_r+0x828>
 8009fb8:	d081      	beq.n	8009ebe <_dtoa_r+0x746>
 8009fba:	4610      	mov	r0, r2
 8009fbc:	301c      	adds	r0, #28
 8009fbe:	e777      	b.n	8009eb0 <_dtoa_r+0x738>
 8009fc0:	f1b9 0f00 	cmp.w	r9, #0
 8009fc4:	dc37      	bgt.n	800a036 <_dtoa_r+0x8be>
 8009fc6:	9b07      	ldr	r3, [sp, #28]
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	dd34      	ble.n	800a036 <_dtoa_r+0x8be>
 8009fcc:	46ca      	mov	sl, r9
 8009fce:	f1ba 0f00 	cmp.w	sl, #0
 8009fd2:	d10d      	bne.n	8009ff0 <_dtoa_r+0x878>
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	4653      	mov	r3, sl
 8009fd8:	2205      	movs	r2, #5
 8009fda:	4630      	mov	r0, r6
 8009fdc:	f000 fc00 	bl	800a7e0 <__multadd>
 8009fe0:	4601      	mov	r1, r0
 8009fe2:	4604      	mov	r4, r0
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	f000 fe17 	bl	800ac18 <__mcmp>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	f73f adde 	bgt.w	8009bac <_dtoa_r+0x434>
 8009ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff2:	f8dd 8000 	ldr.w	r8, [sp]
 8009ff6:	ea6f 0b03 	mvn.w	fp, r3
 8009ffa:	f04f 0900 	mov.w	r9, #0
 8009ffe:	4621      	mov	r1, r4
 800a000:	4630      	mov	r0, r6
 800a002:	f000 fbcb 	bl	800a79c <_Bfree>
 800a006:	2f00      	cmp	r7, #0
 800a008:	f43f aea7 	beq.w	8009d5a <_dtoa_r+0x5e2>
 800a00c:	f1b9 0f00 	cmp.w	r9, #0
 800a010:	d005      	beq.n	800a01e <_dtoa_r+0x8a6>
 800a012:	45b9      	cmp	r9, r7
 800a014:	d003      	beq.n	800a01e <_dtoa_r+0x8a6>
 800a016:	4649      	mov	r1, r9
 800a018:	4630      	mov	r0, r6
 800a01a:	f000 fbbf 	bl	800a79c <_Bfree>
 800a01e:	4639      	mov	r1, r7
 800a020:	4630      	mov	r0, r6
 800a022:	f000 fbbb 	bl	800a79c <_Bfree>
 800a026:	e698      	b.n	8009d5a <_dtoa_r+0x5e2>
 800a028:	2400      	movs	r4, #0
 800a02a:	4627      	mov	r7, r4
 800a02c:	e7e0      	b.n	8009ff0 <_dtoa_r+0x878>
 800a02e:	46bb      	mov	fp, r7
 800a030:	4604      	mov	r4, r0
 800a032:	4607      	mov	r7, r0
 800a034:	e5ba      	b.n	8009bac <_dtoa_r+0x434>
 800a036:	9b08      	ldr	r3, [sp, #32]
 800a038:	46ca      	mov	sl, r9
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	f000 8100 	beq.w	800a240 <_dtoa_r+0xac8>
 800a040:	f1b8 0f00 	cmp.w	r8, #0
 800a044:	dd05      	ble.n	800a052 <_dtoa_r+0x8da>
 800a046:	4639      	mov	r1, r7
 800a048:	4642      	mov	r2, r8
 800a04a:	4630      	mov	r0, r6
 800a04c:	f000 fd78 	bl	800ab40 <__lshift>
 800a050:	4607      	mov	r7, r0
 800a052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a054:	2b00      	cmp	r3, #0
 800a056:	d05d      	beq.n	800a114 <_dtoa_r+0x99c>
 800a058:	6879      	ldr	r1, [r7, #4]
 800a05a:	4630      	mov	r0, r6
 800a05c:	f000 fb5e 	bl	800a71c <_Balloc>
 800a060:	4680      	mov	r8, r0
 800a062:	b928      	cbnz	r0, 800a070 <_dtoa_r+0x8f8>
 800a064:	4b82      	ldr	r3, [pc, #520]	; (800a270 <_dtoa_r+0xaf8>)
 800a066:	4602      	mov	r2, r0
 800a068:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a06c:	f7ff bb9a 	b.w	80097a4 <_dtoa_r+0x2c>
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	3202      	adds	r2, #2
 800a074:	0092      	lsls	r2, r2, #2
 800a076:	f107 010c 	add.w	r1, r7, #12
 800a07a:	300c      	adds	r0, #12
 800a07c:	f000 fb34 	bl	800a6e8 <memcpy>
 800a080:	2201      	movs	r2, #1
 800a082:	4641      	mov	r1, r8
 800a084:	4630      	mov	r0, r6
 800a086:	f000 fd5b 	bl	800ab40 <__lshift>
 800a08a:	9b00      	ldr	r3, [sp, #0]
 800a08c:	3301      	adds	r3, #1
 800a08e:	9305      	str	r3, [sp, #20]
 800a090:	9b00      	ldr	r3, [sp, #0]
 800a092:	4453      	add	r3, sl
 800a094:	9309      	str	r3, [sp, #36]	; 0x24
 800a096:	9b02      	ldr	r3, [sp, #8]
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	46b9      	mov	r9, r7
 800a09e:	9308      	str	r3, [sp, #32]
 800a0a0:	4607      	mov	r7, r0
 800a0a2:	9b05      	ldr	r3, [sp, #20]
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	9302      	str	r3, [sp, #8]
 800a0ac:	f7ff fad6 	bl	800965c <quorem>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	3330      	adds	r3, #48	; 0x30
 800a0b4:	9006      	str	r0, [sp, #24]
 800a0b6:	4649      	mov	r1, r9
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a0bc:	f000 fdac 	bl	800ac18 <__mcmp>
 800a0c0:	463a      	mov	r2, r7
 800a0c2:	4682      	mov	sl, r0
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f000 fdc2 	bl	800ac50 <__mdiff>
 800a0cc:	68c2      	ldr	r2, [r0, #12]
 800a0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0d0:	4680      	mov	r8, r0
 800a0d2:	bb0a      	cbnz	r2, 800a118 <_dtoa_r+0x9a0>
 800a0d4:	4601      	mov	r1, r0
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	f000 fd9e 	bl	800ac18 <__mcmp>
 800a0dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0de:	4602      	mov	r2, r0
 800a0e0:	4641      	mov	r1, r8
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	920e      	str	r2, [sp, #56]	; 0x38
 800a0e6:	930a      	str	r3, [sp, #40]	; 0x28
 800a0e8:	f000 fb58 	bl	800a79c <_Bfree>
 800a0ec:	9b07      	ldr	r3, [sp, #28]
 800a0ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a0f4:	ea43 0102 	orr.w	r1, r3, r2
 800a0f8:	9b08      	ldr	r3, [sp, #32]
 800a0fa:	430b      	orrs	r3, r1
 800a0fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0fe:	d10d      	bne.n	800a11c <_dtoa_r+0x9a4>
 800a100:	2b39      	cmp	r3, #57	; 0x39
 800a102:	d029      	beq.n	800a158 <_dtoa_r+0x9e0>
 800a104:	f1ba 0f00 	cmp.w	sl, #0
 800a108:	dd01      	ble.n	800a10e <_dtoa_r+0x996>
 800a10a:	9b06      	ldr	r3, [sp, #24]
 800a10c:	3331      	adds	r3, #49	; 0x31
 800a10e:	9a02      	ldr	r2, [sp, #8]
 800a110:	7013      	strb	r3, [r2, #0]
 800a112:	e774      	b.n	8009ffe <_dtoa_r+0x886>
 800a114:	4638      	mov	r0, r7
 800a116:	e7b8      	b.n	800a08a <_dtoa_r+0x912>
 800a118:	2201      	movs	r2, #1
 800a11a:	e7e1      	b.n	800a0e0 <_dtoa_r+0x968>
 800a11c:	f1ba 0f00 	cmp.w	sl, #0
 800a120:	db06      	blt.n	800a130 <_dtoa_r+0x9b8>
 800a122:	9907      	ldr	r1, [sp, #28]
 800a124:	ea41 0a0a 	orr.w	sl, r1, sl
 800a128:	9908      	ldr	r1, [sp, #32]
 800a12a:	ea5a 0101 	orrs.w	r1, sl, r1
 800a12e:	d120      	bne.n	800a172 <_dtoa_r+0x9fa>
 800a130:	2a00      	cmp	r2, #0
 800a132:	ddec      	ble.n	800a10e <_dtoa_r+0x996>
 800a134:	4629      	mov	r1, r5
 800a136:	2201      	movs	r2, #1
 800a138:	4630      	mov	r0, r6
 800a13a:	9305      	str	r3, [sp, #20]
 800a13c:	f000 fd00 	bl	800ab40 <__lshift>
 800a140:	4621      	mov	r1, r4
 800a142:	4605      	mov	r5, r0
 800a144:	f000 fd68 	bl	800ac18 <__mcmp>
 800a148:	2800      	cmp	r0, #0
 800a14a:	9b05      	ldr	r3, [sp, #20]
 800a14c:	dc02      	bgt.n	800a154 <_dtoa_r+0x9dc>
 800a14e:	d1de      	bne.n	800a10e <_dtoa_r+0x996>
 800a150:	07da      	lsls	r2, r3, #31
 800a152:	d5dc      	bpl.n	800a10e <_dtoa_r+0x996>
 800a154:	2b39      	cmp	r3, #57	; 0x39
 800a156:	d1d8      	bne.n	800a10a <_dtoa_r+0x992>
 800a158:	9a02      	ldr	r2, [sp, #8]
 800a15a:	2339      	movs	r3, #57	; 0x39
 800a15c:	7013      	strb	r3, [r2, #0]
 800a15e:	4643      	mov	r3, r8
 800a160:	4698      	mov	r8, r3
 800a162:	3b01      	subs	r3, #1
 800a164:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a168:	2a39      	cmp	r2, #57	; 0x39
 800a16a:	d051      	beq.n	800a210 <_dtoa_r+0xa98>
 800a16c:	3201      	adds	r2, #1
 800a16e:	701a      	strb	r2, [r3, #0]
 800a170:	e745      	b.n	8009ffe <_dtoa_r+0x886>
 800a172:	2a00      	cmp	r2, #0
 800a174:	dd03      	ble.n	800a17e <_dtoa_r+0xa06>
 800a176:	2b39      	cmp	r3, #57	; 0x39
 800a178:	d0ee      	beq.n	800a158 <_dtoa_r+0x9e0>
 800a17a:	3301      	adds	r3, #1
 800a17c:	e7c7      	b.n	800a10e <_dtoa_r+0x996>
 800a17e:	9a05      	ldr	r2, [sp, #20]
 800a180:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a182:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a186:	428a      	cmp	r2, r1
 800a188:	d02b      	beq.n	800a1e2 <_dtoa_r+0xa6a>
 800a18a:	4629      	mov	r1, r5
 800a18c:	2300      	movs	r3, #0
 800a18e:	220a      	movs	r2, #10
 800a190:	4630      	mov	r0, r6
 800a192:	f000 fb25 	bl	800a7e0 <__multadd>
 800a196:	45b9      	cmp	r9, r7
 800a198:	4605      	mov	r5, r0
 800a19a:	f04f 0300 	mov.w	r3, #0
 800a19e:	f04f 020a 	mov.w	r2, #10
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	d107      	bne.n	800a1b8 <_dtoa_r+0xa40>
 800a1a8:	f000 fb1a 	bl	800a7e0 <__multadd>
 800a1ac:	4681      	mov	r9, r0
 800a1ae:	4607      	mov	r7, r0
 800a1b0:	9b05      	ldr	r3, [sp, #20]
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	9305      	str	r3, [sp, #20]
 800a1b6:	e774      	b.n	800a0a2 <_dtoa_r+0x92a>
 800a1b8:	f000 fb12 	bl	800a7e0 <__multadd>
 800a1bc:	4639      	mov	r1, r7
 800a1be:	4681      	mov	r9, r0
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	220a      	movs	r2, #10
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	f000 fb0b 	bl	800a7e0 <__multadd>
 800a1ca:	4607      	mov	r7, r0
 800a1cc:	e7f0      	b.n	800a1b0 <_dtoa_r+0xa38>
 800a1ce:	f1ba 0f00 	cmp.w	sl, #0
 800a1d2:	9a00      	ldr	r2, [sp, #0]
 800a1d4:	bfcc      	ite	gt
 800a1d6:	46d0      	movgt	r8, sl
 800a1d8:	f04f 0801 	movle.w	r8, #1
 800a1dc:	4490      	add	r8, r2
 800a1de:	f04f 0900 	mov.w	r9, #0
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	9302      	str	r3, [sp, #8]
 800a1ea:	f000 fca9 	bl	800ab40 <__lshift>
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	f000 fd11 	bl	800ac18 <__mcmp>
 800a1f6:	2800      	cmp	r0, #0
 800a1f8:	dcb1      	bgt.n	800a15e <_dtoa_r+0x9e6>
 800a1fa:	d102      	bne.n	800a202 <_dtoa_r+0xa8a>
 800a1fc:	9b02      	ldr	r3, [sp, #8]
 800a1fe:	07db      	lsls	r3, r3, #31
 800a200:	d4ad      	bmi.n	800a15e <_dtoa_r+0x9e6>
 800a202:	4643      	mov	r3, r8
 800a204:	4698      	mov	r8, r3
 800a206:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a20a:	2a30      	cmp	r2, #48	; 0x30
 800a20c:	d0fa      	beq.n	800a204 <_dtoa_r+0xa8c>
 800a20e:	e6f6      	b.n	8009ffe <_dtoa_r+0x886>
 800a210:	9a00      	ldr	r2, [sp, #0]
 800a212:	429a      	cmp	r2, r3
 800a214:	d1a4      	bne.n	800a160 <_dtoa_r+0x9e8>
 800a216:	f10b 0b01 	add.w	fp, fp, #1
 800a21a:	2331      	movs	r3, #49	; 0x31
 800a21c:	e778      	b.n	800a110 <_dtoa_r+0x998>
 800a21e:	4b15      	ldr	r3, [pc, #84]	; (800a274 <_dtoa_r+0xafc>)
 800a220:	f7ff bb12 	b.w	8009848 <_dtoa_r+0xd0>
 800a224:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a226:	2b00      	cmp	r3, #0
 800a228:	f47f aaee 	bne.w	8009808 <_dtoa_r+0x90>
 800a22c:	4b12      	ldr	r3, [pc, #72]	; (800a278 <_dtoa_r+0xb00>)
 800a22e:	f7ff bb0b 	b.w	8009848 <_dtoa_r+0xd0>
 800a232:	f1ba 0f00 	cmp.w	sl, #0
 800a236:	dc03      	bgt.n	800a240 <_dtoa_r+0xac8>
 800a238:	9b07      	ldr	r3, [sp, #28]
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	f73f aec7 	bgt.w	8009fce <_dtoa_r+0x856>
 800a240:	f8dd 8000 	ldr.w	r8, [sp]
 800a244:	4621      	mov	r1, r4
 800a246:	4628      	mov	r0, r5
 800a248:	f7ff fa08 	bl	800965c <quorem>
 800a24c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a250:	f808 3b01 	strb.w	r3, [r8], #1
 800a254:	9a00      	ldr	r2, [sp, #0]
 800a256:	eba8 0202 	sub.w	r2, r8, r2
 800a25a:	4592      	cmp	sl, r2
 800a25c:	ddb7      	ble.n	800a1ce <_dtoa_r+0xa56>
 800a25e:	4629      	mov	r1, r5
 800a260:	2300      	movs	r3, #0
 800a262:	220a      	movs	r2, #10
 800a264:	4630      	mov	r0, r6
 800a266:	f000 fabb 	bl	800a7e0 <__multadd>
 800a26a:	4605      	mov	r5, r0
 800a26c:	e7ea      	b.n	800a244 <_dtoa_r+0xacc>
 800a26e:	bf00      	nop
 800a270:	0800d2ea 	.word	0x0800d2ea
 800a274:	0800d1a8 	.word	0x0800d1a8
 800a278:	0800d27e 	.word	0x0800d27e

0800a27c <__sflush_r>:
 800a27c:	898a      	ldrh	r2, [r1, #12]
 800a27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a282:	4605      	mov	r5, r0
 800a284:	0710      	lsls	r0, r2, #28
 800a286:	460c      	mov	r4, r1
 800a288:	d458      	bmi.n	800a33c <__sflush_r+0xc0>
 800a28a:	684b      	ldr	r3, [r1, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	dc05      	bgt.n	800a29c <__sflush_r+0x20>
 800a290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a292:	2b00      	cmp	r3, #0
 800a294:	dc02      	bgt.n	800a29c <__sflush_r+0x20>
 800a296:	2000      	movs	r0, #0
 800a298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a29c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a29e:	2e00      	cmp	r6, #0
 800a2a0:	d0f9      	beq.n	800a296 <__sflush_r+0x1a>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2a8:	682f      	ldr	r7, [r5, #0]
 800a2aa:	602b      	str	r3, [r5, #0]
 800a2ac:	d032      	beq.n	800a314 <__sflush_r+0x98>
 800a2ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2b0:	89a3      	ldrh	r3, [r4, #12]
 800a2b2:	075a      	lsls	r2, r3, #29
 800a2b4:	d505      	bpl.n	800a2c2 <__sflush_r+0x46>
 800a2b6:	6863      	ldr	r3, [r4, #4]
 800a2b8:	1ac0      	subs	r0, r0, r3
 800a2ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2bc:	b10b      	cbz	r3, 800a2c2 <__sflush_r+0x46>
 800a2be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2c0:	1ac0      	subs	r0, r0, r3
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	4602      	mov	r2, r0
 800a2c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2c8:	6a21      	ldr	r1, [r4, #32]
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	47b0      	blx	r6
 800a2ce:	1c43      	adds	r3, r0, #1
 800a2d0:	89a3      	ldrh	r3, [r4, #12]
 800a2d2:	d106      	bne.n	800a2e2 <__sflush_r+0x66>
 800a2d4:	6829      	ldr	r1, [r5, #0]
 800a2d6:	291d      	cmp	r1, #29
 800a2d8:	d82c      	bhi.n	800a334 <__sflush_r+0xb8>
 800a2da:	4a2a      	ldr	r2, [pc, #168]	; (800a384 <__sflush_r+0x108>)
 800a2dc:	40ca      	lsrs	r2, r1
 800a2de:	07d6      	lsls	r6, r2, #31
 800a2e0:	d528      	bpl.n	800a334 <__sflush_r+0xb8>
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	6062      	str	r2, [r4, #4]
 800a2e6:	04d9      	lsls	r1, r3, #19
 800a2e8:	6922      	ldr	r2, [r4, #16]
 800a2ea:	6022      	str	r2, [r4, #0]
 800a2ec:	d504      	bpl.n	800a2f8 <__sflush_r+0x7c>
 800a2ee:	1c42      	adds	r2, r0, #1
 800a2f0:	d101      	bne.n	800a2f6 <__sflush_r+0x7a>
 800a2f2:	682b      	ldr	r3, [r5, #0]
 800a2f4:	b903      	cbnz	r3, 800a2f8 <__sflush_r+0x7c>
 800a2f6:	6560      	str	r0, [r4, #84]	; 0x54
 800a2f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2fa:	602f      	str	r7, [r5, #0]
 800a2fc:	2900      	cmp	r1, #0
 800a2fe:	d0ca      	beq.n	800a296 <__sflush_r+0x1a>
 800a300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a304:	4299      	cmp	r1, r3
 800a306:	d002      	beq.n	800a30e <__sflush_r+0x92>
 800a308:	4628      	mov	r0, r5
 800a30a:	f7fe fafd 	bl	8008908 <_free_r>
 800a30e:	2000      	movs	r0, #0
 800a310:	6360      	str	r0, [r4, #52]	; 0x34
 800a312:	e7c1      	b.n	800a298 <__sflush_r+0x1c>
 800a314:	6a21      	ldr	r1, [r4, #32]
 800a316:	2301      	movs	r3, #1
 800a318:	4628      	mov	r0, r5
 800a31a:	47b0      	blx	r6
 800a31c:	1c41      	adds	r1, r0, #1
 800a31e:	d1c7      	bne.n	800a2b0 <__sflush_r+0x34>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d0c4      	beq.n	800a2b0 <__sflush_r+0x34>
 800a326:	2b1d      	cmp	r3, #29
 800a328:	d001      	beq.n	800a32e <__sflush_r+0xb2>
 800a32a:	2b16      	cmp	r3, #22
 800a32c:	d101      	bne.n	800a332 <__sflush_r+0xb6>
 800a32e:	602f      	str	r7, [r5, #0]
 800a330:	e7b1      	b.n	800a296 <__sflush_r+0x1a>
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a338:	81a3      	strh	r3, [r4, #12]
 800a33a:	e7ad      	b.n	800a298 <__sflush_r+0x1c>
 800a33c:	690f      	ldr	r7, [r1, #16]
 800a33e:	2f00      	cmp	r7, #0
 800a340:	d0a9      	beq.n	800a296 <__sflush_r+0x1a>
 800a342:	0793      	lsls	r3, r2, #30
 800a344:	680e      	ldr	r6, [r1, #0]
 800a346:	bf08      	it	eq
 800a348:	694b      	ldreq	r3, [r1, #20]
 800a34a:	600f      	str	r7, [r1, #0]
 800a34c:	bf18      	it	ne
 800a34e:	2300      	movne	r3, #0
 800a350:	eba6 0807 	sub.w	r8, r6, r7
 800a354:	608b      	str	r3, [r1, #8]
 800a356:	f1b8 0f00 	cmp.w	r8, #0
 800a35a:	dd9c      	ble.n	800a296 <__sflush_r+0x1a>
 800a35c:	6a21      	ldr	r1, [r4, #32]
 800a35e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a360:	4643      	mov	r3, r8
 800a362:	463a      	mov	r2, r7
 800a364:	4628      	mov	r0, r5
 800a366:	47b0      	blx	r6
 800a368:	2800      	cmp	r0, #0
 800a36a:	dc06      	bgt.n	800a37a <__sflush_r+0xfe>
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a372:	81a3      	strh	r3, [r4, #12]
 800a374:	f04f 30ff 	mov.w	r0, #4294967295
 800a378:	e78e      	b.n	800a298 <__sflush_r+0x1c>
 800a37a:	4407      	add	r7, r0
 800a37c:	eba8 0800 	sub.w	r8, r8, r0
 800a380:	e7e9      	b.n	800a356 <__sflush_r+0xda>
 800a382:	bf00      	nop
 800a384:	20400001 	.word	0x20400001

0800a388 <_fflush_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	690b      	ldr	r3, [r1, #16]
 800a38c:	4605      	mov	r5, r0
 800a38e:	460c      	mov	r4, r1
 800a390:	b913      	cbnz	r3, 800a398 <_fflush_r+0x10>
 800a392:	2500      	movs	r5, #0
 800a394:	4628      	mov	r0, r5
 800a396:	bd38      	pop	{r3, r4, r5, pc}
 800a398:	b118      	cbz	r0, 800a3a2 <_fflush_r+0x1a>
 800a39a:	6983      	ldr	r3, [r0, #24]
 800a39c:	b90b      	cbnz	r3, 800a3a2 <_fflush_r+0x1a>
 800a39e:	f000 f887 	bl	800a4b0 <__sinit>
 800a3a2:	4b14      	ldr	r3, [pc, #80]	; (800a3f4 <_fflush_r+0x6c>)
 800a3a4:	429c      	cmp	r4, r3
 800a3a6:	d11b      	bne.n	800a3e0 <_fflush_r+0x58>
 800a3a8:	686c      	ldr	r4, [r5, #4]
 800a3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0ef      	beq.n	800a392 <_fflush_r+0xa>
 800a3b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3b4:	07d0      	lsls	r0, r2, #31
 800a3b6:	d404      	bmi.n	800a3c2 <_fflush_r+0x3a>
 800a3b8:	0599      	lsls	r1, r3, #22
 800a3ba:	d402      	bmi.n	800a3c2 <_fflush_r+0x3a>
 800a3bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3be:	f000 f92c 	bl	800a61a <__retarget_lock_acquire_recursive>
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	f7ff ff59 	bl	800a27c <__sflush_r>
 800a3ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3cc:	07da      	lsls	r2, r3, #31
 800a3ce:	4605      	mov	r5, r0
 800a3d0:	d4e0      	bmi.n	800a394 <_fflush_r+0xc>
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	059b      	lsls	r3, r3, #22
 800a3d6:	d4dd      	bmi.n	800a394 <_fflush_r+0xc>
 800a3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3da:	f000 f91f 	bl	800a61c <__retarget_lock_release_recursive>
 800a3de:	e7d9      	b.n	800a394 <_fflush_r+0xc>
 800a3e0:	4b05      	ldr	r3, [pc, #20]	; (800a3f8 <_fflush_r+0x70>)
 800a3e2:	429c      	cmp	r4, r3
 800a3e4:	d101      	bne.n	800a3ea <_fflush_r+0x62>
 800a3e6:	68ac      	ldr	r4, [r5, #8]
 800a3e8:	e7df      	b.n	800a3aa <_fflush_r+0x22>
 800a3ea:	4b04      	ldr	r3, [pc, #16]	; (800a3fc <_fflush_r+0x74>)
 800a3ec:	429c      	cmp	r4, r3
 800a3ee:	bf08      	it	eq
 800a3f0:	68ec      	ldreq	r4, [r5, #12]
 800a3f2:	e7da      	b.n	800a3aa <_fflush_r+0x22>
 800a3f4:	0800d31c 	.word	0x0800d31c
 800a3f8:	0800d33c 	.word	0x0800d33c
 800a3fc:	0800d2fc 	.word	0x0800d2fc

0800a400 <std>:
 800a400:	2300      	movs	r3, #0
 800a402:	b510      	push	{r4, lr}
 800a404:	4604      	mov	r4, r0
 800a406:	e9c0 3300 	strd	r3, r3, [r0]
 800a40a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a40e:	6083      	str	r3, [r0, #8]
 800a410:	8181      	strh	r1, [r0, #12]
 800a412:	6643      	str	r3, [r0, #100]	; 0x64
 800a414:	81c2      	strh	r2, [r0, #14]
 800a416:	6183      	str	r3, [r0, #24]
 800a418:	4619      	mov	r1, r3
 800a41a:	2208      	movs	r2, #8
 800a41c:	305c      	adds	r0, #92	; 0x5c
 800a41e:	f7fe fa6b 	bl	80088f8 <memset>
 800a422:	4b05      	ldr	r3, [pc, #20]	; (800a438 <std+0x38>)
 800a424:	6263      	str	r3, [r4, #36]	; 0x24
 800a426:	4b05      	ldr	r3, [pc, #20]	; (800a43c <std+0x3c>)
 800a428:	62a3      	str	r3, [r4, #40]	; 0x28
 800a42a:	4b05      	ldr	r3, [pc, #20]	; (800a440 <std+0x40>)
 800a42c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a42e:	4b05      	ldr	r3, [pc, #20]	; (800a444 <std+0x44>)
 800a430:	6224      	str	r4, [r4, #32]
 800a432:	6323      	str	r3, [r4, #48]	; 0x30
 800a434:	bd10      	pop	{r4, pc}
 800a436:	bf00      	nop
 800a438:	0800b0e9 	.word	0x0800b0e9
 800a43c:	0800b10b 	.word	0x0800b10b
 800a440:	0800b143 	.word	0x0800b143
 800a444:	0800b167 	.word	0x0800b167

0800a448 <_cleanup_r>:
 800a448:	4901      	ldr	r1, [pc, #4]	; (800a450 <_cleanup_r+0x8>)
 800a44a:	f000 b8c1 	b.w	800a5d0 <_fwalk_reent>
 800a44e:	bf00      	nop
 800a450:	0800a389 	.word	0x0800a389

0800a454 <__sfmoreglue>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	1e4a      	subs	r2, r1, #1
 800a458:	2568      	movs	r5, #104	; 0x68
 800a45a:	4355      	muls	r5, r2
 800a45c:	460e      	mov	r6, r1
 800a45e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a462:	f7fe faa1 	bl	80089a8 <_malloc_r>
 800a466:	4604      	mov	r4, r0
 800a468:	b140      	cbz	r0, 800a47c <__sfmoreglue+0x28>
 800a46a:	2100      	movs	r1, #0
 800a46c:	e9c0 1600 	strd	r1, r6, [r0]
 800a470:	300c      	adds	r0, #12
 800a472:	60a0      	str	r0, [r4, #8]
 800a474:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a478:	f7fe fa3e 	bl	80088f8 <memset>
 800a47c:	4620      	mov	r0, r4
 800a47e:	bd70      	pop	{r4, r5, r6, pc}

0800a480 <__sfp_lock_acquire>:
 800a480:	4801      	ldr	r0, [pc, #4]	; (800a488 <__sfp_lock_acquire+0x8>)
 800a482:	f000 b8ca 	b.w	800a61a <__retarget_lock_acquire_recursive>
 800a486:	bf00      	nop
 800a488:	24000898 	.word	0x24000898

0800a48c <__sfp_lock_release>:
 800a48c:	4801      	ldr	r0, [pc, #4]	; (800a494 <__sfp_lock_release+0x8>)
 800a48e:	f000 b8c5 	b.w	800a61c <__retarget_lock_release_recursive>
 800a492:	bf00      	nop
 800a494:	24000898 	.word	0x24000898

0800a498 <__sinit_lock_acquire>:
 800a498:	4801      	ldr	r0, [pc, #4]	; (800a4a0 <__sinit_lock_acquire+0x8>)
 800a49a:	f000 b8be 	b.w	800a61a <__retarget_lock_acquire_recursive>
 800a49e:	bf00      	nop
 800a4a0:	24000893 	.word	0x24000893

0800a4a4 <__sinit_lock_release>:
 800a4a4:	4801      	ldr	r0, [pc, #4]	; (800a4ac <__sinit_lock_release+0x8>)
 800a4a6:	f000 b8b9 	b.w	800a61c <__retarget_lock_release_recursive>
 800a4aa:	bf00      	nop
 800a4ac:	24000893 	.word	0x24000893

0800a4b0 <__sinit>:
 800a4b0:	b510      	push	{r4, lr}
 800a4b2:	4604      	mov	r4, r0
 800a4b4:	f7ff fff0 	bl	800a498 <__sinit_lock_acquire>
 800a4b8:	69a3      	ldr	r3, [r4, #24]
 800a4ba:	b11b      	cbz	r3, 800a4c4 <__sinit+0x14>
 800a4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4c0:	f7ff bff0 	b.w	800a4a4 <__sinit_lock_release>
 800a4c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a4c8:	6523      	str	r3, [r4, #80]	; 0x50
 800a4ca:	4b13      	ldr	r3, [pc, #76]	; (800a518 <__sinit+0x68>)
 800a4cc:	4a13      	ldr	r2, [pc, #76]	; (800a51c <__sinit+0x6c>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a4d2:	42a3      	cmp	r3, r4
 800a4d4:	bf04      	itt	eq
 800a4d6:	2301      	moveq	r3, #1
 800a4d8:	61a3      	streq	r3, [r4, #24]
 800a4da:	4620      	mov	r0, r4
 800a4dc:	f000 f820 	bl	800a520 <__sfp>
 800a4e0:	6060      	str	r0, [r4, #4]
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	f000 f81c 	bl	800a520 <__sfp>
 800a4e8:	60a0      	str	r0, [r4, #8]
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	f000 f818 	bl	800a520 <__sfp>
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	60e0      	str	r0, [r4, #12]
 800a4f4:	2104      	movs	r1, #4
 800a4f6:	6860      	ldr	r0, [r4, #4]
 800a4f8:	f7ff ff82 	bl	800a400 <std>
 800a4fc:	68a0      	ldr	r0, [r4, #8]
 800a4fe:	2201      	movs	r2, #1
 800a500:	2109      	movs	r1, #9
 800a502:	f7ff ff7d 	bl	800a400 <std>
 800a506:	68e0      	ldr	r0, [r4, #12]
 800a508:	2202      	movs	r2, #2
 800a50a:	2112      	movs	r1, #18
 800a50c:	f7ff ff78 	bl	800a400 <std>
 800a510:	2301      	movs	r3, #1
 800a512:	61a3      	str	r3, [r4, #24]
 800a514:	e7d2      	b.n	800a4bc <__sinit+0xc>
 800a516:	bf00      	nop
 800a518:	0800d194 	.word	0x0800d194
 800a51c:	0800a449 	.word	0x0800a449

0800a520 <__sfp>:
 800a520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a522:	4607      	mov	r7, r0
 800a524:	f7ff ffac 	bl	800a480 <__sfp_lock_acquire>
 800a528:	4b1e      	ldr	r3, [pc, #120]	; (800a5a4 <__sfp+0x84>)
 800a52a:	681e      	ldr	r6, [r3, #0]
 800a52c:	69b3      	ldr	r3, [r6, #24]
 800a52e:	b913      	cbnz	r3, 800a536 <__sfp+0x16>
 800a530:	4630      	mov	r0, r6
 800a532:	f7ff ffbd 	bl	800a4b0 <__sinit>
 800a536:	3648      	adds	r6, #72	; 0x48
 800a538:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a53c:	3b01      	subs	r3, #1
 800a53e:	d503      	bpl.n	800a548 <__sfp+0x28>
 800a540:	6833      	ldr	r3, [r6, #0]
 800a542:	b30b      	cbz	r3, 800a588 <__sfp+0x68>
 800a544:	6836      	ldr	r6, [r6, #0]
 800a546:	e7f7      	b.n	800a538 <__sfp+0x18>
 800a548:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a54c:	b9d5      	cbnz	r5, 800a584 <__sfp+0x64>
 800a54e:	4b16      	ldr	r3, [pc, #88]	; (800a5a8 <__sfp+0x88>)
 800a550:	60e3      	str	r3, [r4, #12]
 800a552:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a556:	6665      	str	r5, [r4, #100]	; 0x64
 800a558:	f000 f85e 	bl	800a618 <__retarget_lock_init_recursive>
 800a55c:	f7ff ff96 	bl	800a48c <__sfp_lock_release>
 800a560:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a564:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a568:	6025      	str	r5, [r4, #0]
 800a56a:	61a5      	str	r5, [r4, #24]
 800a56c:	2208      	movs	r2, #8
 800a56e:	4629      	mov	r1, r5
 800a570:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a574:	f7fe f9c0 	bl	80088f8 <memset>
 800a578:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a57c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a580:	4620      	mov	r0, r4
 800a582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a584:	3468      	adds	r4, #104	; 0x68
 800a586:	e7d9      	b.n	800a53c <__sfp+0x1c>
 800a588:	2104      	movs	r1, #4
 800a58a:	4638      	mov	r0, r7
 800a58c:	f7ff ff62 	bl	800a454 <__sfmoreglue>
 800a590:	4604      	mov	r4, r0
 800a592:	6030      	str	r0, [r6, #0]
 800a594:	2800      	cmp	r0, #0
 800a596:	d1d5      	bne.n	800a544 <__sfp+0x24>
 800a598:	f7ff ff78 	bl	800a48c <__sfp_lock_release>
 800a59c:	230c      	movs	r3, #12
 800a59e:	603b      	str	r3, [r7, #0]
 800a5a0:	e7ee      	b.n	800a580 <__sfp+0x60>
 800a5a2:	bf00      	nop
 800a5a4:	0800d194 	.word	0x0800d194
 800a5a8:	ffff0001 	.word	0xffff0001

0800a5ac <fiprintf>:
 800a5ac:	b40e      	push	{r1, r2, r3}
 800a5ae:	b503      	push	{r0, r1, lr}
 800a5b0:	4601      	mov	r1, r0
 800a5b2:	ab03      	add	r3, sp, #12
 800a5b4:	4805      	ldr	r0, [pc, #20]	; (800a5cc <fiprintf+0x20>)
 800a5b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5ba:	6800      	ldr	r0, [r0, #0]
 800a5bc:	9301      	str	r3, [sp, #4]
 800a5be:	f000 fc63 	bl	800ae88 <_vfiprintf_r>
 800a5c2:	b002      	add	sp, #8
 800a5c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5c8:	b003      	add	sp, #12
 800a5ca:	4770      	bx	lr
 800a5cc:	24000010 	.word	0x24000010

0800a5d0 <_fwalk_reent>:
 800a5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5d4:	4606      	mov	r6, r0
 800a5d6:	4688      	mov	r8, r1
 800a5d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a5dc:	2700      	movs	r7, #0
 800a5de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5e2:	f1b9 0901 	subs.w	r9, r9, #1
 800a5e6:	d505      	bpl.n	800a5f4 <_fwalk_reent+0x24>
 800a5e8:	6824      	ldr	r4, [r4, #0]
 800a5ea:	2c00      	cmp	r4, #0
 800a5ec:	d1f7      	bne.n	800a5de <_fwalk_reent+0xe>
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5f4:	89ab      	ldrh	r3, [r5, #12]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d907      	bls.n	800a60a <_fwalk_reent+0x3a>
 800a5fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a5fe:	3301      	adds	r3, #1
 800a600:	d003      	beq.n	800a60a <_fwalk_reent+0x3a>
 800a602:	4629      	mov	r1, r5
 800a604:	4630      	mov	r0, r6
 800a606:	47c0      	blx	r8
 800a608:	4307      	orrs	r7, r0
 800a60a:	3568      	adds	r5, #104	; 0x68
 800a60c:	e7e9      	b.n	800a5e2 <_fwalk_reent+0x12>
	...

0800a610 <_localeconv_r>:
 800a610:	4800      	ldr	r0, [pc, #0]	; (800a614 <_localeconv_r+0x4>)
 800a612:	4770      	bx	lr
 800a614:	24000164 	.word	0x24000164

0800a618 <__retarget_lock_init_recursive>:
 800a618:	4770      	bx	lr

0800a61a <__retarget_lock_acquire_recursive>:
 800a61a:	4770      	bx	lr

0800a61c <__retarget_lock_release_recursive>:
 800a61c:	4770      	bx	lr

0800a61e <__swhatbuf_r>:
 800a61e:	b570      	push	{r4, r5, r6, lr}
 800a620:	460e      	mov	r6, r1
 800a622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a626:	2900      	cmp	r1, #0
 800a628:	b096      	sub	sp, #88	; 0x58
 800a62a:	4614      	mov	r4, r2
 800a62c:	461d      	mov	r5, r3
 800a62e:	da07      	bge.n	800a640 <__swhatbuf_r+0x22>
 800a630:	2300      	movs	r3, #0
 800a632:	602b      	str	r3, [r5, #0]
 800a634:	89b3      	ldrh	r3, [r6, #12]
 800a636:	061a      	lsls	r2, r3, #24
 800a638:	d410      	bmi.n	800a65c <__swhatbuf_r+0x3e>
 800a63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a63e:	e00e      	b.n	800a65e <__swhatbuf_r+0x40>
 800a640:	466a      	mov	r2, sp
 800a642:	f000 fdbf 	bl	800b1c4 <_fstat_r>
 800a646:	2800      	cmp	r0, #0
 800a648:	dbf2      	blt.n	800a630 <__swhatbuf_r+0x12>
 800a64a:	9a01      	ldr	r2, [sp, #4]
 800a64c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a650:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a654:	425a      	negs	r2, r3
 800a656:	415a      	adcs	r2, r3
 800a658:	602a      	str	r2, [r5, #0]
 800a65a:	e7ee      	b.n	800a63a <__swhatbuf_r+0x1c>
 800a65c:	2340      	movs	r3, #64	; 0x40
 800a65e:	2000      	movs	r0, #0
 800a660:	6023      	str	r3, [r4, #0]
 800a662:	b016      	add	sp, #88	; 0x58
 800a664:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a668 <__smakebuf_r>:
 800a668:	898b      	ldrh	r3, [r1, #12]
 800a66a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a66c:	079d      	lsls	r5, r3, #30
 800a66e:	4606      	mov	r6, r0
 800a670:	460c      	mov	r4, r1
 800a672:	d507      	bpl.n	800a684 <__smakebuf_r+0x1c>
 800a674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	2301      	movs	r3, #1
 800a67e:	6163      	str	r3, [r4, #20]
 800a680:	b002      	add	sp, #8
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	ab01      	add	r3, sp, #4
 800a686:	466a      	mov	r2, sp
 800a688:	f7ff ffc9 	bl	800a61e <__swhatbuf_r>
 800a68c:	9900      	ldr	r1, [sp, #0]
 800a68e:	4605      	mov	r5, r0
 800a690:	4630      	mov	r0, r6
 800a692:	f7fe f989 	bl	80089a8 <_malloc_r>
 800a696:	b948      	cbnz	r0, 800a6ac <__smakebuf_r+0x44>
 800a698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a69c:	059a      	lsls	r2, r3, #22
 800a69e:	d4ef      	bmi.n	800a680 <__smakebuf_r+0x18>
 800a6a0:	f023 0303 	bic.w	r3, r3, #3
 800a6a4:	f043 0302 	orr.w	r3, r3, #2
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	e7e3      	b.n	800a674 <__smakebuf_r+0xc>
 800a6ac:	4b0d      	ldr	r3, [pc, #52]	; (800a6e4 <__smakebuf_r+0x7c>)
 800a6ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6b0:	89a3      	ldrh	r3, [r4, #12]
 800a6b2:	6020      	str	r0, [r4, #0]
 800a6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	9b00      	ldr	r3, [sp, #0]
 800a6bc:	6163      	str	r3, [r4, #20]
 800a6be:	9b01      	ldr	r3, [sp, #4]
 800a6c0:	6120      	str	r0, [r4, #16]
 800a6c2:	b15b      	cbz	r3, 800a6dc <__smakebuf_r+0x74>
 800a6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 fd8d 	bl	800b1e8 <_isatty_r>
 800a6ce:	b128      	cbz	r0, 800a6dc <__smakebuf_r+0x74>
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	f023 0303 	bic.w	r3, r3, #3
 800a6d6:	f043 0301 	orr.w	r3, r3, #1
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	89a0      	ldrh	r0, [r4, #12]
 800a6de:	4305      	orrs	r5, r0
 800a6e0:	81a5      	strh	r5, [r4, #12]
 800a6e2:	e7cd      	b.n	800a680 <__smakebuf_r+0x18>
 800a6e4:	0800a449 	.word	0x0800a449

0800a6e8 <memcpy>:
 800a6e8:	440a      	add	r2, r1
 800a6ea:	4291      	cmp	r1, r2
 800a6ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6f0:	d100      	bne.n	800a6f4 <memcpy+0xc>
 800a6f2:	4770      	bx	lr
 800a6f4:	b510      	push	{r4, lr}
 800a6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6fe:	4291      	cmp	r1, r2
 800a700:	d1f9      	bne.n	800a6f6 <memcpy+0xe>
 800a702:	bd10      	pop	{r4, pc}

0800a704 <__malloc_lock>:
 800a704:	4801      	ldr	r0, [pc, #4]	; (800a70c <__malloc_lock+0x8>)
 800a706:	f7ff bf88 	b.w	800a61a <__retarget_lock_acquire_recursive>
 800a70a:	bf00      	nop
 800a70c:	24000894 	.word	0x24000894

0800a710 <__malloc_unlock>:
 800a710:	4801      	ldr	r0, [pc, #4]	; (800a718 <__malloc_unlock+0x8>)
 800a712:	f7ff bf83 	b.w	800a61c <__retarget_lock_release_recursive>
 800a716:	bf00      	nop
 800a718:	24000894 	.word	0x24000894

0800a71c <_Balloc>:
 800a71c:	b570      	push	{r4, r5, r6, lr}
 800a71e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a720:	4604      	mov	r4, r0
 800a722:	460d      	mov	r5, r1
 800a724:	b976      	cbnz	r6, 800a744 <_Balloc+0x28>
 800a726:	2010      	movs	r0, #16
 800a728:	f7fe f8de 	bl	80088e8 <malloc>
 800a72c:	4602      	mov	r2, r0
 800a72e:	6260      	str	r0, [r4, #36]	; 0x24
 800a730:	b920      	cbnz	r0, 800a73c <_Balloc+0x20>
 800a732:	4b18      	ldr	r3, [pc, #96]	; (800a794 <_Balloc+0x78>)
 800a734:	4818      	ldr	r0, [pc, #96]	; (800a798 <_Balloc+0x7c>)
 800a736:	2166      	movs	r1, #102	; 0x66
 800a738:	f7fe ff72 	bl	8009620 <__assert_func>
 800a73c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a740:	6006      	str	r6, [r0, #0]
 800a742:	60c6      	str	r6, [r0, #12]
 800a744:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a746:	68f3      	ldr	r3, [r6, #12]
 800a748:	b183      	cbz	r3, 800a76c <_Balloc+0x50>
 800a74a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a752:	b9b8      	cbnz	r0, 800a784 <_Balloc+0x68>
 800a754:	2101      	movs	r1, #1
 800a756:	fa01 f605 	lsl.w	r6, r1, r5
 800a75a:	1d72      	adds	r2, r6, #5
 800a75c:	0092      	lsls	r2, r2, #2
 800a75e:	4620      	mov	r0, r4
 800a760:	f000 fb5a 	bl	800ae18 <_calloc_r>
 800a764:	b160      	cbz	r0, 800a780 <_Balloc+0x64>
 800a766:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a76a:	e00e      	b.n	800a78a <_Balloc+0x6e>
 800a76c:	2221      	movs	r2, #33	; 0x21
 800a76e:	2104      	movs	r1, #4
 800a770:	4620      	mov	r0, r4
 800a772:	f000 fb51 	bl	800ae18 <_calloc_r>
 800a776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a778:	60f0      	str	r0, [r6, #12]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e4      	bne.n	800a74a <_Balloc+0x2e>
 800a780:	2000      	movs	r0, #0
 800a782:	bd70      	pop	{r4, r5, r6, pc}
 800a784:	6802      	ldr	r2, [r0, #0]
 800a786:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a78a:	2300      	movs	r3, #0
 800a78c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a790:	e7f7      	b.n	800a782 <_Balloc+0x66>
 800a792:	bf00      	nop
 800a794:	0800d1cc 	.word	0x0800d1cc
 800a798:	0800d35c 	.word	0x0800d35c

0800a79c <_Bfree>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7a0:	4605      	mov	r5, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	b976      	cbnz	r6, 800a7c4 <_Bfree+0x28>
 800a7a6:	2010      	movs	r0, #16
 800a7a8:	f7fe f89e 	bl	80088e8 <malloc>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	6268      	str	r0, [r5, #36]	; 0x24
 800a7b0:	b920      	cbnz	r0, 800a7bc <_Bfree+0x20>
 800a7b2:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <_Bfree+0x3c>)
 800a7b4:	4809      	ldr	r0, [pc, #36]	; (800a7dc <_Bfree+0x40>)
 800a7b6:	218a      	movs	r1, #138	; 0x8a
 800a7b8:	f7fe ff32 	bl	8009620 <__assert_func>
 800a7bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7c0:	6006      	str	r6, [r0, #0]
 800a7c2:	60c6      	str	r6, [r0, #12]
 800a7c4:	b13c      	cbz	r4, 800a7d6 <_Bfree+0x3a>
 800a7c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a7c8:	6862      	ldr	r2, [r4, #4]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7d0:	6021      	str	r1, [r4, #0]
 800a7d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7d6:	bd70      	pop	{r4, r5, r6, pc}
 800a7d8:	0800d1cc 	.word	0x0800d1cc
 800a7dc:	0800d35c 	.word	0x0800d35c

0800a7e0 <__multadd>:
 800a7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e4:	690e      	ldr	r6, [r1, #16]
 800a7e6:	4607      	mov	r7, r0
 800a7e8:	4698      	mov	r8, r3
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	f101 0014 	add.w	r0, r1, #20
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	6805      	ldr	r5, [r0, #0]
 800a7f4:	b2a9      	uxth	r1, r5
 800a7f6:	fb02 8101 	mla	r1, r2, r1, r8
 800a7fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a7fe:	0c2d      	lsrs	r5, r5, #16
 800a800:	fb02 c505 	mla	r5, r2, r5, ip
 800a804:	b289      	uxth	r1, r1
 800a806:	3301      	adds	r3, #1
 800a808:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a80c:	429e      	cmp	r6, r3
 800a80e:	f840 1b04 	str.w	r1, [r0], #4
 800a812:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a816:	dcec      	bgt.n	800a7f2 <__multadd+0x12>
 800a818:	f1b8 0f00 	cmp.w	r8, #0
 800a81c:	d022      	beq.n	800a864 <__multadd+0x84>
 800a81e:	68a3      	ldr	r3, [r4, #8]
 800a820:	42b3      	cmp	r3, r6
 800a822:	dc19      	bgt.n	800a858 <__multadd+0x78>
 800a824:	6861      	ldr	r1, [r4, #4]
 800a826:	4638      	mov	r0, r7
 800a828:	3101      	adds	r1, #1
 800a82a:	f7ff ff77 	bl	800a71c <_Balloc>
 800a82e:	4605      	mov	r5, r0
 800a830:	b928      	cbnz	r0, 800a83e <__multadd+0x5e>
 800a832:	4602      	mov	r2, r0
 800a834:	4b0d      	ldr	r3, [pc, #52]	; (800a86c <__multadd+0x8c>)
 800a836:	480e      	ldr	r0, [pc, #56]	; (800a870 <__multadd+0x90>)
 800a838:	21b5      	movs	r1, #181	; 0xb5
 800a83a:	f7fe fef1 	bl	8009620 <__assert_func>
 800a83e:	6922      	ldr	r2, [r4, #16]
 800a840:	3202      	adds	r2, #2
 800a842:	f104 010c 	add.w	r1, r4, #12
 800a846:	0092      	lsls	r2, r2, #2
 800a848:	300c      	adds	r0, #12
 800a84a:	f7ff ff4d 	bl	800a6e8 <memcpy>
 800a84e:	4621      	mov	r1, r4
 800a850:	4638      	mov	r0, r7
 800a852:	f7ff ffa3 	bl	800a79c <_Bfree>
 800a856:	462c      	mov	r4, r5
 800a858:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a85c:	3601      	adds	r6, #1
 800a85e:	f8c3 8014 	str.w	r8, [r3, #20]
 800a862:	6126      	str	r6, [r4, #16]
 800a864:	4620      	mov	r0, r4
 800a866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a86a:	bf00      	nop
 800a86c:	0800d2ea 	.word	0x0800d2ea
 800a870:	0800d35c 	.word	0x0800d35c

0800a874 <__hi0bits>:
 800a874:	0c03      	lsrs	r3, r0, #16
 800a876:	041b      	lsls	r3, r3, #16
 800a878:	b9d3      	cbnz	r3, 800a8b0 <__hi0bits+0x3c>
 800a87a:	0400      	lsls	r0, r0, #16
 800a87c:	2310      	movs	r3, #16
 800a87e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a882:	bf04      	itt	eq
 800a884:	0200      	lsleq	r0, r0, #8
 800a886:	3308      	addeq	r3, #8
 800a888:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a88c:	bf04      	itt	eq
 800a88e:	0100      	lsleq	r0, r0, #4
 800a890:	3304      	addeq	r3, #4
 800a892:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a896:	bf04      	itt	eq
 800a898:	0080      	lsleq	r0, r0, #2
 800a89a:	3302      	addeq	r3, #2
 800a89c:	2800      	cmp	r0, #0
 800a89e:	db05      	blt.n	800a8ac <__hi0bits+0x38>
 800a8a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a8a4:	f103 0301 	add.w	r3, r3, #1
 800a8a8:	bf08      	it	eq
 800a8aa:	2320      	moveq	r3, #32
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	4770      	bx	lr
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	e7e4      	b.n	800a87e <__hi0bits+0xa>

0800a8b4 <__lo0bits>:
 800a8b4:	6803      	ldr	r3, [r0, #0]
 800a8b6:	f013 0207 	ands.w	r2, r3, #7
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	d00b      	beq.n	800a8d6 <__lo0bits+0x22>
 800a8be:	07da      	lsls	r2, r3, #31
 800a8c0:	d424      	bmi.n	800a90c <__lo0bits+0x58>
 800a8c2:	0798      	lsls	r0, r3, #30
 800a8c4:	bf49      	itett	mi
 800a8c6:	085b      	lsrmi	r3, r3, #1
 800a8c8:	089b      	lsrpl	r3, r3, #2
 800a8ca:	2001      	movmi	r0, #1
 800a8cc:	600b      	strmi	r3, [r1, #0]
 800a8ce:	bf5c      	itt	pl
 800a8d0:	600b      	strpl	r3, [r1, #0]
 800a8d2:	2002      	movpl	r0, #2
 800a8d4:	4770      	bx	lr
 800a8d6:	b298      	uxth	r0, r3
 800a8d8:	b9b0      	cbnz	r0, 800a908 <__lo0bits+0x54>
 800a8da:	0c1b      	lsrs	r3, r3, #16
 800a8dc:	2010      	movs	r0, #16
 800a8de:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a8e2:	bf04      	itt	eq
 800a8e4:	0a1b      	lsreq	r3, r3, #8
 800a8e6:	3008      	addeq	r0, #8
 800a8e8:	071a      	lsls	r2, r3, #28
 800a8ea:	bf04      	itt	eq
 800a8ec:	091b      	lsreq	r3, r3, #4
 800a8ee:	3004      	addeq	r0, #4
 800a8f0:	079a      	lsls	r2, r3, #30
 800a8f2:	bf04      	itt	eq
 800a8f4:	089b      	lsreq	r3, r3, #2
 800a8f6:	3002      	addeq	r0, #2
 800a8f8:	07da      	lsls	r2, r3, #31
 800a8fa:	d403      	bmi.n	800a904 <__lo0bits+0x50>
 800a8fc:	085b      	lsrs	r3, r3, #1
 800a8fe:	f100 0001 	add.w	r0, r0, #1
 800a902:	d005      	beq.n	800a910 <__lo0bits+0x5c>
 800a904:	600b      	str	r3, [r1, #0]
 800a906:	4770      	bx	lr
 800a908:	4610      	mov	r0, r2
 800a90a:	e7e8      	b.n	800a8de <__lo0bits+0x2a>
 800a90c:	2000      	movs	r0, #0
 800a90e:	4770      	bx	lr
 800a910:	2020      	movs	r0, #32
 800a912:	4770      	bx	lr

0800a914 <__i2b>:
 800a914:	b510      	push	{r4, lr}
 800a916:	460c      	mov	r4, r1
 800a918:	2101      	movs	r1, #1
 800a91a:	f7ff feff 	bl	800a71c <_Balloc>
 800a91e:	4602      	mov	r2, r0
 800a920:	b928      	cbnz	r0, 800a92e <__i2b+0x1a>
 800a922:	4b05      	ldr	r3, [pc, #20]	; (800a938 <__i2b+0x24>)
 800a924:	4805      	ldr	r0, [pc, #20]	; (800a93c <__i2b+0x28>)
 800a926:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a92a:	f7fe fe79 	bl	8009620 <__assert_func>
 800a92e:	2301      	movs	r3, #1
 800a930:	6144      	str	r4, [r0, #20]
 800a932:	6103      	str	r3, [r0, #16]
 800a934:	bd10      	pop	{r4, pc}
 800a936:	bf00      	nop
 800a938:	0800d2ea 	.word	0x0800d2ea
 800a93c:	0800d35c 	.word	0x0800d35c

0800a940 <__multiply>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	4614      	mov	r4, r2
 800a946:	690a      	ldr	r2, [r1, #16]
 800a948:	6923      	ldr	r3, [r4, #16]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	bfb8      	it	lt
 800a94e:	460b      	movlt	r3, r1
 800a950:	460d      	mov	r5, r1
 800a952:	bfbc      	itt	lt
 800a954:	4625      	movlt	r5, r4
 800a956:	461c      	movlt	r4, r3
 800a958:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a95c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a960:	68ab      	ldr	r3, [r5, #8]
 800a962:	6869      	ldr	r1, [r5, #4]
 800a964:	eb0a 0709 	add.w	r7, sl, r9
 800a968:	42bb      	cmp	r3, r7
 800a96a:	b085      	sub	sp, #20
 800a96c:	bfb8      	it	lt
 800a96e:	3101      	addlt	r1, #1
 800a970:	f7ff fed4 	bl	800a71c <_Balloc>
 800a974:	b930      	cbnz	r0, 800a984 <__multiply+0x44>
 800a976:	4602      	mov	r2, r0
 800a978:	4b42      	ldr	r3, [pc, #264]	; (800aa84 <__multiply+0x144>)
 800a97a:	4843      	ldr	r0, [pc, #268]	; (800aa88 <__multiply+0x148>)
 800a97c:	f240 115d 	movw	r1, #349	; 0x15d
 800a980:	f7fe fe4e 	bl	8009620 <__assert_func>
 800a984:	f100 0614 	add.w	r6, r0, #20
 800a988:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a98c:	4633      	mov	r3, r6
 800a98e:	2200      	movs	r2, #0
 800a990:	4543      	cmp	r3, r8
 800a992:	d31e      	bcc.n	800a9d2 <__multiply+0x92>
 800a994:	f105 0c14 	add.w	ip, r5, #20
 800a998:	f104 0314 	add.w	r3, r4, #20
 800a99c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a9a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a9a4:	9202      	str	r2, [sp, #8]
 800a9a6:	ebac 0205 	sub.w	r2, ip, r5
 800a9aa:	3a15      	subs	r2, #21
 800a9ac:	f022 0203 	bic.w	r2, r2, #3
 800a9b0:	3204      	adds	r2, #4
 800a9b2:	f105 0115 	add.w	r1, r5, #21
 800a9b6:	458c      	cmp	ip, r1
 800a9b8:	bf38      	it	cc
 800a9ba:	2204      	movcc	r2, #4
 800a9bc:	9201      	str	r2, [sp, #4]
 800a9be:	9a02      	ldr	r2, [sp, #8]
 800a9c0:	9303      	str	r3, [sp, #12]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d808      	bhi.n	800a9d8 <__multiply+0x98>
 800a9c6:	2f00      	cmp	r7, #0
 800a9c8:	dc55      	bgt.n	800aa76 <__multiply+0x136>
 800a9ca:	6107      	str	r7, [r0, #16]
 800a9cc:	b005      	add	sp, #20
 800a9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d2:	f843 2b04 	str.w	r2, [r3], #4
 800a9d6:	e7db      	b.n	800a990 <__multiply+0x50>
 800a9d8:	f8b3 a000 	ldrh.w	sl, [r3]
 800a9dc:	f1ba 0f00 	cmp.w	sl, #0
 800a9e0:	d020      	beq.n	800aa24 <__multiply+0xe4>
 800a9e2:	f105 0e14 	add.w	lr, r5, #20
 800a9e6:	46b1      	mov	r9, r6
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a9ee:	f8d9 b000 	ldr.w	fp, [r9]
 800a9f2:	b2a1      	uxth	r1, r4
 800a9f4:	fa1f fb8b 	uxth.w	fp, fp
 800a9f8:	fb0a b101 	mla	r1, sl, r1, fp
 800a9fc:	4411      	add	r1, r2
 800a9fe:	f8d9 2000 	ldr.w	r2, [r9]
 800aa02:	0c24      	lsrs	r4, r4, #16
 800aa04:	0c12      	lsrs	r2, r2, #16
 800aa06:	fb0a 2404 	mla	r4, sl, r4, r2
 800aa0a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aa0e:	b289      	uxth	r1, r1
 800aa10:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa14:	45f4      	cmp	ip, lr
 800aa16:	f849 1b04 	str.w	r1, [r9], #4
 800aa1a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aa1e:	d8e4      	bhi.n	800a9ea <__multiply+0xaa>
 800aa20:	9901      	ldr	r1, [sp, #4]
 800aa22:	5072      	str	r2, [r6, r1]
 800aa24:	9a03      	ldr	r2, [sp, #12]
 800aa26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa2a:	3304      	adds	r3, #4
 800aa2c:	f1b9 0f00 	cmp.w	r9, #0
 800aa30:	d01f      	beq.n	800aa72 <__multiply+0x132>
 800aa32:	6834      	ldr	r4, [r6, #0]
 800aa34:	f105 0114 	add.w	r1, r5, #20
 800aa38:	46b6      	mov	lr, r6
 800aa3a:	f04f 0a00 	mov.w	sl, #0
 800aa3e:	880a      	ldrh	r2, [r1, #0]
 800aa40:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aa44:	fb09 b202 	mla	r2, r9, r2, fp
 800aa48:	4492      	add	sl, r2
 800aa4a:	b2a4      	uxth	r4, r4
 800aa4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aa50:	f84e 4b04 	str.w	r4, [lr], #4
 800aa54:	f851 4b04 	ldr.w	r4, [r1], #4
 800aa58:	f8be 2000 	ldrh.w	r2, [lr]
 800aa5c:	0c24      	lsrs	r4, r4, #16
 800aa5e:	fb09 2404 	mla	r4, r9, r4, r2
 800aa62:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aa66:	458c      	cmp	ip, r1
 800aa68:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa6c:	d8e7      	bhi.n	800aa3e <__multiply+0xfe>
 800aa6e:	9a01      	ldr	r2, [sp, #4]
 800aa70:	50b4      	str	r4, [r6, r2]
 800aa72:	3604      	adds	r6, #4
 800aa74:	e7a3      	b.n	800a9be <__multiply+0x7e>
 800aa76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d1a5      	bne.n	800a9ca <__multiply+0x8a>
 800aa7e:	3f01      	subs	r7, #1
 800aa80:	e7a1      	b.n	800a9c6 <__multiply+0x86>
 800aa82:	bf00      	nop
 800aa84:	0800d2ea 	.word	0x0800d2ea
 800aa88:	0800d35c 	.word	0x0800d35c

0800aa8c <__pow5mult>:
 800aa8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa90:	4615      	mov	r5, r2
 800aa92:	f012 0203 	ands.w	r2, r2, #3
 800aa96:	4606      	mov	r6, r0
 800aa98:	460f      	mov	r7, r1
 800aa9a:	d007      	beq.n	800aaac <__pow5mult+0x20>
 800aa9c:	4c25      	ldr	r4, [pc, #148]	; (800ab34 <__pow5mult+0xa8>)
 800aa9e:	3a01      	subs	r2, #1
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aaa6:	f7ff fe9b 	bl	800a7e0 <__multadd>
 800aaaa:	4607      	mov	r7, r0
 800aaac:	10ad      	asrs	r5, r5, #2
 800aaae:	d03d      	beq.n	800ab2c <__pow5mult+0xa0>
 800aab0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aab2:	b97c      	cbnz	r4, 800aad4 <__pow5mult+0x48>
 800aab4:	2010      	movs	r0, #16
 800aab6:	f7fd ff17 	bl	80088e8 <malloc>
 800aaba:	4602      	mov	r2, r0
 800aabc:	6270      	str	r0, [r6, #36]	; 0x24
 800aabe:	b928      	cbnz	r0, 800aacc <__pow5mult+0x40>
 800aac0:	4b1d      	ldr	r3, [pc, #116]	; (800ab38 <__pow5mult+0xac>)
 800aac2:	481e      	ldr	r0, [pc, #120]	; (800ab3c <__pow5mult+0xb0>)
 800aac4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aac8:	f7fe fdaa 	bl	8009620 <__assert_func>
 800aacc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aad0:	6004      	str	r4, [r0, #0]
 800aad2:	60c4      	str	r4, [r0, #12]
 800aad4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aadc:	b94c      	cbnz	r4, 800aaf2 <__pow5mult+0x66>
 800aade:	f240 2171 	movw	r1, #625	; 0x271
 800aae2:	4630      	mov	r0, r6
 800aae4:	f7ff ff16 	bl	800a914 <__i2b>
 800aae8:	2300      	movs	r3, #0
 800aaea:	f8c8 0008 	str.w	r0, [r8, #8]
 800aaee:	4604      	mov	r4, r0
 800aaf0:	6003      	str	r3, [r0, #0]
 800aaf2:	f04f 0900 	mov.w	r9, #0
 800aaf6:	07eb      	lsls	r3, r5, #31
 800aaf8:	d50a      	bpl.n	800ab10 <__pow5mult+0x84>
 800aafa:	4639      	mov	r1, r7
 800aafc:	4622      	mov	r2, r4
 800aafe:	4630      	mov	r0, r6
 800ab00:	f7ff ff1e 	bl	800a940 <__multiply>
 800ab04:	4639      	mov	r1, r7
 800ab06:	4680      	mov	r8, r0
 800ab08:	4630      	mov	r0, r6
 800ab0a:	f7ff fe47 	bl	800a79c <_Bfree>
 800ab0e:	4647      	mov	r7, r8
 800ab10:	106d      	asrs	r5, r5, #1
 800ab12:	d00b      	beq.n	800ab2c <__pow5mult+0xa0>
 800ab14:	6820      	ldr	r0, [r4, #0]
 800ab16:	b938      	cbnz	r0, 800ab28 <__pow5mult+0x9c>
 800ab18:	4622      	mov	r2, r4
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	f7ff ff0f 	bl	800a940 <__multiply>
 800ab22:	6020      	str	r0, [r4, #0]
 800ab24:	f8c0 9000 	str.w	r9, [r0]
 800ab28:	4604      	mov	r4, r0
 800ab2a:	e7e4      	b.n	800aaf6 <__pow5mult+0x6a>
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab32:	bf00      	nop
 800ab34:	0800d4b0 	.word	0x0800d4b0
 800ab38:	0800d1cc 	.word	0x0800d1cc
 800ab3c:	0800d35c 	.word	0x0800d35c

0800ab40 <__lshift>:
 800ab40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab44:	460c      	mov	r4, r1
 800ab46:	6849      	ldr	r1, [r1, #4]
 800ab48:	6923      	ldr	r3, [r4, #16]
 800ab4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab4e:	68a3      	ldr	r3, [r4, #8]
 800ab50:	4607      	mov	r7, r0
 800ab52:	4691      	mov	r9, r2
 800ab54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab58:	f108 0601 	add.w	r6, r8, #1
 800ab5c:	42b3      	cmp	r3, r6
 800ab5e:	db0b      	blt.n	800ab78 <__lshift+0x38>
 800ab60:	4638      	mov	r0, r7
 800ab62:	f7ff fddb 	bl	800a71c <_Balloc>
 800ab66:	4605      	mov	r5, r0
 800ab68:	b948      	cbnz	r0, 800ab7e <__lshift+0x3e>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	4b28      	ldr	r3, [pc, #160]	; (800ac10 <__lshift+0xd0>)
 800ab6e:	4829      	ldr	r0, [pc, #164]	; (800ac14 <__lshift+0xd4>)
 800ab70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab74:	f7fe fd54 	bl	8009620 <__assert_func>
 800ab78:	3101      	adds	r1, #1
 800ab7a:	005b      	lsls	r3, r3, #1
 800ab7c:	e7ee      	b.n	800ab5c <__lshift+0x1c>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f100 0114 	add.w	r1, r0, #20
 800ab84:	f100 0210 	add.w	r2, r0, #16
 800ab88:	4618      	mov	r0, r3
 800ab8a:	4553      	cmp	r3, sl
 800ab8c:	db33      	blt.n	800abf6 <__lshift+0xb6>
 800ab8e:	6920      	ldr	r0, [r4, #16]
 800ab90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab94:	f104 0314 	add.w	r3, r4, #20
 800ab98:	f019 091f 	ands.w	r9, r9, #31
 800ab9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aba0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aba4:	d02b      	beq.n	800abfe <__lshift+0xbe>
 800aba6:	f1c9 0e20 	rsb	lr, r9, #32
 800abaa:	468a      	mov	sl, r1
 800abac:	2200      	movs	r2, #0
 800abae:	6818      	ldr	r0, [r3, #0]
 800abb0:	fa00 f009 	lsl.w	r0, r0, r9
 800abb4:	4302      	orrs	r2, r0
 800abb6:	f84a 2b04 	str.w	r2, [sl], #4
 800abba:	f853 2b04 	ldr.w	r2, [r3], #4
 800abbe:	459c      	cmp	ip, r3
 800abc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800abc4:	d8f3      	bhi.n	800abae <__lshift+0x6e>
 800abc6:	ebac 0304 	sub.w	r3, ip, r4
 800abca:	3b15      	subs	r3, #21
 800abcc:	f023 0303 	bic.w	r3, r3, #3
 800abd0:	3304      	adds	r3, #4
 800abd2:	f104 0015 	add.w	r0, r4, #21
 800abd6:	4584      	cmp	ip, r0
 800abd8:	bf38      	it	cc
 800abda:	2304      	movcc	r3, #4
 800abdc:	50ca      	str	r2, [r1, r3]
 800abde:	b10a      	cbz	r2, 800abe4 <__lshift+0xa4>
 800abe0:	f108 0602 	add.w	r6, r8, #2
 800abe4:	3e01      	subs	r6, #1
 800abe6:	4638      	mov	r0, r7
 800abe8:	612e      	str	r6, [r5, #16]
 800abea:	4621      	mov	r1, r4
 800abec:	f7ff fdd6 	bl	800a79c <_Bfree>
 800abf0:	4628      	mov	r0, r5
 800abf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800abfa:	3301      	adds	r3, #1
 800abfc:	e7c5      	b.n	800ab8a <__lshift+0x4a>
 800abfe:	3904      	subs	r1, #4
 800ac00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac04:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac08:	459c      	cmp	ip, r3
 800ac0a:	d8f9      	bhi.n	800ac00 <__lshift+0xc0>
 800ac0c:	e7ea      	b.n	800abe4 <__lshift+0xa4>
 800ac0e:	bf00      	nop
 800ac10:	0800d2ea 	.word	0x0800d2ea
 800ac14:	0800d35c 	.word	0x0800d35c

0800ac18 <__mcmp>:
 800ac18:	b530      	push	{r4, r5, lr}
 800ac1a:	6902      	ldr	r2, [r0, #16]
 800ac1c:	690c      	ldr	r4, [r1, #16]
 800ac1e:	1b12      	subs	r2, r2, r4
 800ac20:	d10e      	bne.n	800ac40 <__mcmp+0x28>
 800ac22:	f100 0314 	add.w	r3, r0, #20
 800ac26:	3114      	adds	r1, #20
 800ac28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac38:	42a5      	cmp	r5, r4
 800ac3a:	d003      	beq.n	800ac44 <__mcmp+0x2c>
 800ac3c:	d305      	bcc.n	800ac4a <__mcmp+0x32>
 800ac3e:	2201      	movs	r2, #1
 800ac40:	4610      	mov	r0, r2
 800ac42:	bd30      	pop	{r4, r5, pc}
 800ac44:	4283      	cmp	r3, r0
 800ac46:	d3f3      	bcc.n	800ac30 <__mcmp+0x18>
 800ac48:	e7fa      	b.n	800ac40 <__mcmp+0x28>
 800ac4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac4e:	e7f7      	b.n	800ac40 <__mcmp+0x28>

0800ac50 <__mdiff>:
 800ac50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac54:	460c      	mov	r4, r1
 800ac56:	4606      	mov	r6, r0
 800ac58:	4611      	mov	r1, r2
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	4617      	mov	r7, r2
 800ac5e:	f7ff ffdb 	bl	800ac18 <__mcmp>
 800ac62:	1e05      	subs	r5, r0, #0
 800ac64:	d110      	bne.n	800ac88 <__mdiff+0x38>
 800ac66:	4629      	mov	r1, r5
 800ac68:	4630      	mov	r0, r6
 800ac6a:	f7ff fd57 	bl	800a71c <_Balloc>
 800ac6e:	b930      	cbnz	r0, 800ac7e <__mdiff+0x2e>
 800ac70:	4b39      	ldr	r3, [pc, #228]	; (800ad58 <__mdiff+0x108>)
 800ac72:	4602      	mov	r2, r0
 800ac74:	f240 2132 	movw	r1, #562	; 0x232
 800ac78:	4838      	ldr	r0, [pc, #224]	; (800ad5c <__mdiff+0x10c>)
 800ac7a:	f7fe fcd1 	bl	8009620 <__assert_func>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac88:	bfa4      	itt	ge
 800ac8a:	463b      	movge	r3, r7
 800ac8c:	4627      	movge	r7, r4
 800ac8e:	4630      	mov	r0, r6
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	bfa6      	itte	ge
 800ac94:	461c      	movge	r4, r3
 800ac96:	2500      	movge	r5, #0
 800ac98:	2501      	movlt	r5, #1
 800ac9a:	f7ff fd3f 	bl	800a71c <_Balloc>
 800ac9e:	b920      	cbnz	r0, 800acaa <__mdiff+0x5a>
 800aca0:	4b2d      	ldr	r3, [pc, #180]	; (800ad58 <__mdiff+0x108>)
 800aca2:	4602      	mov	r2, r0
 800aca4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aca8:	e7e6      	b.n	800ac78 <__mdiff+0x28>
 800acaa:	693e      	ldr	r6, [r7, #16]
 800acac:	60c5      	str	r5, [r0, #12]
 800acae:	6925      	ldr	r5, [r4, #16]
 800acb0:	f107 0114 	add.w	r1, r7, #20
 800acb4:	f104 0914 	add.w	r9, r4, #20
 800acb8:	f100 0e14 	add.w	lr, r0, #20
 800acbc:	f107 0210 	add.w	r2, r7, #16
 800acc0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800acc4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800acc8:	46f2      	mov	sl, lr
 800acca:	2700      	movs	r7, #0
 800accc:	f859 3b04 	ldr.w	r3, [r9], #4
 800acd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800acd4:	fa1f f883 	uxth.w	r8, r3
 800acd8:	fa17 f78b 	uxtah	r7, r7, fp
 800acdc:	0c1b      	lsrs	r3, r3, #16
 800acde:	eba7 0808 	sub.w	r8, r7, r8
 800ace2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ace6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800acea:	fa1f f888 	uxth.w	r8, r8
 800acee:	141f      	asrs	r7, r3, #16
 800acf0:	454d      	cmp	r5, r9
 800acf2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800acf6:	f84a 3b04 	str.w	r3, [sl], #4
 800acfa:	d8e7      	bhi.n	800accc <__mdiff+0x7c>
 800acfc:	1b2b      	subs	r3, r5, r4
 800acfe:	3b15      	subs	r3, #21
 800ad00:	f023 0303 	bic.w	r3, r3, #3
 800ad04:	3304      	adds	r3, #4
 800ad06:	3415      	adds	r4, #21
 800ad08:	42a5      	cmp	r5, r4
 800ad0a:	bf38      	it	cc
 800ad0c:	2304      	movcc	r3, #4
 800ad0e:	4419      	add	r1, r3
 800ad10:	4473      	add	r3, lr
 800ad12:	469e      	mov	lr, r3
 800ad14:	460d      	mov	r5, r1
 800ad16:	4565      	cmp	r5, ip
 800ad18:	d30e      	bcc.n	800ad38 <__mdiff+0xe8>
 800ad1a:	f10c 0203 	add.w	r2, ip, #3
 800ad1e:	1a52      	subs	r2, r2, r1
 800ad20:	f022 0203 	bic.w	r2, r2, #3
 800ad24:	3903      	subs	r1, #3
 800ad26:	458c      	cmp	ip, r1
 800ad28:	bf38      	it	cc
 800ad2a:	2200      	movcc	r2, #0
 800ad2c:	441a      	add	r2, r3
 800ad2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad32:	b17b      	cbz	r3, 800ad54 <__mdiff+0x104>
 800ad34:	6106      	str	r6, [r0, #16]
 800ad36:	e7a5      	b.n	800ac84 <__mdiff+0x34>
 800ad38:	f855 8b04 	ldr.w	r8, [r5], #4
 800ad3c:	fa17 f488 	uxtah	r4, r7, r8
 800ad40:	1422      	asrs	r2, r4, #16
 800ad42:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ad46:	b2a4      	uxth	r4, r4
 800ad48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ad4c:	f84e 4b04 	str.w	r4, [lr], #4
 800ad50:	1417      	asrs	r7, r2, #16
 800ad52:	e7e0      	b.n	800ad16 <__mdiff+0xc6>
 800ad54:	3e01      	subs	r6, #1
 800ad56:	e7ea      	b.n	800ad2e <__mdiff+0xde>
 800ad58:	0800d2ea 	.word	0x0800d2ea
 800ad5c:	0800d35c 	.word	0x0800d35c

0800ad60 <__d2b>:
 800ad60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad64:	4689      	mov	r9, r1
 800ad66:	2101      	movs	r1, #1
 800ad68:	ec57 6b10 	vmov	r6, r7, d0
 800ad6c:	4690      	mov	r8, r2
 800ad6e:	f7ff fcd5 	bl	800a71c <_Balloc>
 800ad72:	4604      	mov	r4, r0
 800ad74:	b930      	cbnz	r0, 800ad84 <__d2b+0x24>
 800ad76:	4602      	mov	r2, r0
 800ad78:	4b25      	ldr	r3, [pc, #148]	; (800ae10 <__d2b+0xb0>)
 800ad7a:	4826      	ldr	r0, [pc, #152]	; (800ae14 <__d2b+0xb4>)
 800ad7c:	f240 310a 	movw	r1, #778	; 0x30a
 800ad80:	f7fe fc4e 	bl	8009620 <__assert_func>
 800ad84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ad88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ad8c:	bb35      	cbnz	r5, 800addc <__d2b+0x7c>
 800ad8e:	2e00      	cmp	r6, #0
 800ad90:	9301      	str	r3, [sp, #4]
 800ad92:	d028      	beq.n	800ade6 <__d2b+0x86>
 800ad94:	4668      	mov	r0, sp
 800ad96:	9600      	str	r6, [sp, #0]
 800ad98:	f7ff fd8c 	bl	800a8b4 <__lo0bits>
 800ad9c:	9900      	ldr	r1, [sp, #0]
 800ad9e:	b300      	cbz	r0, 800ade2 <__d2b+0x82>
 800ada0:	9a01      	ldr	r2, [sp, #4]
 800ada2:	f1c0 0320 	rsb	r3, r0, #32
 800ada6:	fa02 f303 	lsl.w	r3, r2, r3
 800adaa:	430b      	orrs	r3, r1
 800adac:	40c2      	lsrs	r2, r0
 800adae:	6163      	str	r3, [r4, #20]
 800adb0:	9201      	str	r2, [sp, #4]
 800adb2:	9b01      	ldr	r3, [sp, #4]
 800adb4:	61a3      	str	r3, [r4, #24]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	bf14      	ite	ne
 800adba:	2202      	movne	r2, #2
 800adbc:	2201      	moveq	r2, #1
 800adbe:	6122      	str	r2, [r4, #16]
 800adc0:	b1d5      	cbz	r5, 800adf8 <__d2b+0x98>
 800adc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800adc6:	4405      	add	r5, r0
 800adc8:	f8c9 5000 	str.w	r5, [r9]
 800adcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800add0:	f8c8 0000 	str.w	r0, [r8]
 800add4:	4620      	mov	r0, r4
 800add6:	b003      	add	sp, #12
 800add8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800addc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ade0:	e7d5      	b.n	800ad8e <__d2b+0x2e>
 800ade2:	6161      	str	r1, [r4, #20]
 800ade4:	e7e5      	b.n	800adb2 <__d2b+0x52>
 800ade6:	a801      	add	r0, sp, #4
 800ade8:	f7ff fd64 	bl	800a8b4 <__lo0bits>
 800adec:	9b01      	ldr	r3, [sp, #4]
 800adee:	6163      	str	r3, [r4, #20]
 800adf0:	2201      	movs	r2, #1
 800adf2:	6122      	str	r2, [r4, #16]
 800adf4:	3020      	adds	r0, #32
 800adf6:	e7e3      	b.n	800adc0 <__d2b+0x60>
 800adf8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800adfc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae00:	f8c9 0000 	str.w	r0, [r9]
 800ae04:	6918      	ldr	r0, [r3, #16]
 800ae06:	f7ff fd35 	bl	800a874 <__hi0bits>
 800ae0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae0e:	e7df      	b.n	800add0 <__d2b+0x70>
 800ae10:	0800d2ea 	.word	0x0800d2ea
 800ae14:	0800d35c 	.word	0x0800d35c

0800ae18 <_calloc_r>:
 800ae18:	b513      	push	{r0, r1, r4, lr}
 800ae1a:	434a      	muls	r2, r1
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	9201      	str	r2, [sp, #4]
 800ae20:	f7fd fdc2 	bl	80089a8 <_malloc_r>
 800ae24:	4604      	mov	r4, r0
 800ae26:	b118      	cbz	r0, 800ae30 <_calloc_r+0x18>
 800ae28:	9a01      	ldr	r2, [sp, #4]
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	f7fd fd64 	bl	80088f8 <memset>
 800ae30:	4620      	mov	r0, r4
 800ae32:	b002      	add	sp, #8
 800ae34:	bd10      	pop	{r4, pc}

0800ae36 <__sfputc_r>:
 800ae36:	6893      	ldr	r3, [r2, #8]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	b410      	push	{r4}
 800ae3e:	6093      	str	r3, [r2, #8]
 800ae40:	da08      	bge.n	800ae54 <__sfputc_r+0x1e>
 800ae42:	6994      	ldr	r4, [r2, #24]
 800ae44:	42a3      	cmp	r3, r4
 800ae46:	db01      	blt.n	800ae4c <__sfputc_r+0x16>
 800ae48:	290a      	cmp	r1, #10
 800ae4a:	d103      	bne.n	800ae54 <__sfputc_r+0x1e>
 800ae4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae50:	f7fe bb26 	b.w	80094a0 <__swbuf_r>
 800ae54:	6813      	ldr	r3, [r2, #0]
 800ae56:	1c58      	adds	r0, r3, #1
 800ae58:	6010      	str	r0, [r2, #0]
 800ae5a:	7019      	strb	r1, [r3, #0]
 800ae5c:	4608      	mov	r0, r1
 800ae5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <__sfputs_r>:
 800ae64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae66:	4606      	mov	r6, r0
 800ae68:	460f      	mov	r7, r1
 800ae6a:	4614      	mov	r4, r2
 800ae6c:	18d5      	adds	r5, r2, r3
 800ae6e:	42ac      	cmp	r4, r5
 800ae70:	d101      	bne.n	800ae76 <__sfputs_r+0x12>
 800ae72:	2000      	movs	r0, #0
 800ae74:	e007      	b.n	800ae86 <__sfputs_r+0x22>
 800ae76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae7a:	463a      	mov	r2, r7
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f7ff ffda 	bl	800ae36 <__sfputc_r>
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	d1f3      	bne.n	800ae6e <__sfputs_r+0xa>
 800ae86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae88 <_vfiprintf_r>:
 800ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	460d      	mov	r5, r1
 800ae8e:	b09d      	sub	sp, #116	; 0x74
 800ae90:	4614      	mov	r4, r2
 800ae92:	4698      	mov	r8, r3
 800ae94:	4606      	mov	r6, r0
 800ae96:	b118      	cbz	r0, 800aea0 <_vfiprintf_r+0x18>
 800ae98:	6983      	ldr	r3, [r0, #24]
 800ae9a:	b90b      	cbnz	r3, 800aea0 <_vfiprintf_r+0x18>
 800ae9c:	f7ff fb08 	bl	800a4b0 <__sinit>
 800aea0:	4b89      	ldr	r3, [pc, #548]	; (800b0c8 <_vfiprintf_r+0x240>)
 800aea2:	429d      	cmp	r5, r3
 800aea4:	d11b      	bne.n	800aede <_vfiprintf_r+0x56>
 800aea6:	6875      	ldr	r5, [r6, #4]
 800aea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aeaa:	07d9      	lsls	r1, r3, #31
 800aeac:	d405      	bmi.n	800aeba <_vfiprintf_r+0x32>
 800aeae:	89ab      	ldrh	r3, [r5, #12]
 800aeb0:	059a      	lsls	r2, r3, #22
 800aeb2:	d402      	bmi.n	800aeba <_vfiprintf_r+0x32>
 800aeb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeb6:	f7ff fbb0 	bl	800a61a <__retarget_lock_acquire_recursive>
 800aeba:	89ab      	ldrh	r3, [r5, #12]
 800aebc:	071b      	lsls	r3, r3, #28
 800aebe:	d501      	bpl.n	800aec4 <_vfiprintf_r+0x3c>
 800aec0:	692b      	ldr	r3, [r5, #16]
 800aec2:	b9eb      	cbnz	r3, 800af00 <_vfiprintf_r+0x78>
 800aec4:	4629      	mov	r1, r5
 800aec6:	4630      	mov	r0, r6
 800aec8:	f7fe fb3c 	bl	8009544 <__swsetup_r>
 800aecc:	b1c0      	cbz	r0, 800af00 <_vfiprintf_r+0x78>
 800aece:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aed0:	07dc      	lsls	r4, r3, #31
 800aed2:	d50e      	bpl.n	800aef2 <_vfiprintf_r+0x6a>
 800aed4:	f04f 30ff 	mov.w	r0, #4294967295
 800aed8:	b01d      	add	sp, #116	; 0x74
 800aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aede:	4b7b      	ldr	r3, [pc, #492]	; (800b0cc <_vfiprintf_r+0x244>)
 800aee0:	429d      	cmp	r5, r3
 800aee2:	d101      	bne.n	800aee8 <_vfiprintf_r+0x60>
 800aee4:	68b5      	ldr	r5, [r6, #8]
 800aee6:	e7df      	b.n	800aea8 <_vfiprintf_r+0x20>
 800aee8:	4b79      	ldr	r3, [pc, #484]	; (800b0d0 <_vfiprintf_r+0x248>)
 800aeea:	429d      	cmp	r5, r3
 800aeec:	bf08      	it	eq
 800aeee:	68f5      	ldreq	r5, [r6, #12]
 800aef0:	e7da      	b.n	800aea8 <_vfiprintf_r+0x20>
 800aef2:	89ab      	ldrh	r3, [r5, #12]
 800aef4:	0598      	lsls	r0, r3, #22
 800aef6:	d4ed      	bmi.n	800aed4 <_vfiprintf_r+0x4c>
 800aef8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aefa:	f7ff fb8f 	bl	800a61c <__retarget_lock_release_recursive>
 800aefe:	e7e9      	b.n	800aed4 <_vfiprintf_r+0x4c>
 800af00:	2300      	movs	r3, #0
 800af02:	9309      	str	r3, [sp, #36]	; 0x24
 800af04:	2320      	movs	r3, #32
 800af06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af0e:	2330      	movs	r3, #48	; 0x30
 800af10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b0d4 <_vfiprintf_r+0x24c>
 800af14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af18:	f04f 0901 	mov.w	r9, #1
 800af1c:	4623      	mov	r3, r4
 800af1e:	469a      	mov	sl, r3
 800af20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af24:	b10a      	cbz	r2, 800af2a <_vfiprintf_r+0xa2>
 800af26:	2a25      	cmp	r2, #37	; 0x25
 800af28:	d1f9      	bne.n	800af1e <_vfiprintf_r+0x96>
 800af2a:	ebba 0b04 	subs.w	fp, sl, r4
 800af2e:	d00b      	beq.n	800af48 <_vfiprintf_r+0xc0>
 800af30:	465b      	mov	r3, fp
 800af32:	4622      	mov	r2, r4
 800af34:	4629      	mov	r1, r5
 800af36:	4630      	mov	r0, r6
 800af38:	f7ff ff94 	bl	800ae64 <__sfputs_r>
 800af3c:	3001      	adds	r0, #1
 800af3e:	f000 80aa 	beq.w	800b096 <_vfiprintf_r+0x20e>
 800af42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af44:	445a      	add	r2, fp
 800af46:	9209      	str	r2, [sp, #36]	; 0x24
 800af48:	f89a 3000 	ldrb.w	r3, [sl]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f000 80a2 	beq.w	800b096 <_vfiprintf_r+0x20e>
 800af52:	2300      	movs	r3, #0
 800af54:	f04f 32ff 	mov.w	r2, #4294967295
 800af58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af5c:	f10a 0a01 	add.w	sl, sl, #1
 800af60:	9304      	str	r3, [sp, #16]
 800af62:	9307      	str	r3, [sp, #28]
 800af64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af68:	931a      	str	r3, [sp, #104]	; 0x68
 800af6a:	4654      	mov	r4, sl
 800af6c:	2205      	movs	r2, #5
 800af6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af72:	4858      	ldr	r0, [pc, #352]	; (800b0d4 <_vfiprintf_r+0x24c>)
 800af74:	f7f5 f9bc 	bl	80002f0 <memchr>
 800af78:	9a04      	ldr	r2, [sp, #16]
 800af7a:	b9d8      	cbnz	r0, 800afb4 <_vfiprintf_r+0x12c>
 800af7c:	06d1      	lsls	r1, r2, #27
 800af7e:	bf44      	itt	mi
 800af80:	2320      	movmi	r3, #32
 800af82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af86:	0713      	lsls	r3, r2, #28
 800af88:	bf44      	itt	mi
 800af8a:	232b      	movmi	r3, #43	; 0x2b
 800af8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af90:	f89a 3000 	ldrb.w	r3, [sl]
 800af94:	2b2a      	cmp	r3, #42	; 0x2a
 800af96:	d015      	beq.n	800afc4 <_vfiprintf_r+0x13c>
 800af98:	9a07      	ldr	r2, [sp, #28]
 800af9a:	4654      	mov	r4, sl
 800af9c:	2000      	movs	r0, #0
 800af9e:	f04f 0c0a 	mov.w	ip, #10
 800afa2:	4621      	mov	r1, r4
 800afa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afa8:	3b30      	subs	r3, #48	; 0x30
 800afaa:	2b09      	cmp	r3, #9
 800afac:	d94e      	bls.n	800b04c <_vfiprintf_r+0x1c4>
 800afae:	b1b0      	cbz	r0, 800afde <_vfiprintf_r+0x156>
 800afb0:	9207      	str	r2, [sp, #28]
 800afb2:	e014      	b.n	800afde <_vfiprintf_r+0x156>
 800afb4:	eba0 0308 	sub.w	r3, r0, r8
 800afb8:	fa09 f303 	lsl.w	r3, r9, r3
 800afbc:	4313      	orrs	r3, r2
 800afbe:	9304      	str	r3, [sp, #16]
 800afc0:	46a2      	mov	sl, r4
 800afc2:	e7d2      	b.n	800af6a <_vfiprintf_r+0xe2>
 800afc4:	9b03      	ldr	r3, [sp, #12]
 800afc6:	1d19      	adds	r1, r3, #4
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	9103      	str	r1, [sp, #12]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	bfbb      	ittet	lt
 800afd0:	425b      	neglt	r3, r3
 800afd2:	f042 0202 	orrlt.w	r2, r2, #2
 800afd6:	9307      	strge	r3, [sp, #28]
 800afd8:	9307      	strlt	r3, [sp, #28]
 800afda:	bfb8      	it	lt
 800afdc:	9204      	strlt	r2, [sp, #16]
 800afde:	7823      	ldrb	r3, [r4, #0]
 800afe0:	2b2e      	cmp	r3, #46	; 0x2e
 800afe2:	d10c      	bne.n	800affe <_vfiprintf_r+0x176>
 800afe4:	7863      	ldrb	r3, [r4, #1]
 800afe6:	2b2a      	cmp	r3, #42	; 0x2a
 800afe8:	d135      	bne.n	800b056 <_vfiprintf_r+0x1ce>
 800afea:	9b03      	ldr	r3, [sp, #12]
 800afec:	1d1a      	adds	r2, r3, #4
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	9203      	str	r2, [sp, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	bfb8      	it	lt
 800aff6:	f04f 33ff 	movlt.w	r3, #4294967295
 800affa:	3402      	adds	r4, #2
 800affc:	9305      	str	r3, [sp, #20]
 800affe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0e4 <_vfiprintf_r+0x25c>
 800b002:	7821      	ldrb	r1, [r4, #0]
 800b004:	2203      	movs	r2, #3
 800b006:	4650      	mov	r0, sl
 800b008:	f7f5 f972 	bl	80002f0 <memchr>
 800b00c:	b140      	cbz	r0, 800b020 <_vfiprintf_r+0x198>
 800b00e:	2340      	movs	r3, #64	; 0x40
 800b010:	eba0 000a 	sub.w	r0, r0, sl
 800b014:	fa03 f000 	lsl.w	r0, r3, r0
 800b018:	9b04      	ldr	r3, [sp, #16]
 800b01a:	4303      	orrs	r3, r0
 800b01c:	3401      	adds	r4, #1
 800b01e:	9304      	str	r3, [sp, #16]
 800b020:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b024:	482c      	ldr	r0, [pc, #176]	; (800b0d8 <_vfiprintf_r+0x250>)
 800b026:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b02a:	2206      	movs	r2, #6
 800b02c:	f7f5 f960 	bl	80002f0 <memchr>
 800b030:	2800      	cmp	r0, #0
 800b032:	d03f      	beq.n	800b0b4 <_vfiprintf_r+0x22c>
 800b034:	4b29      	ldr	r3, [pc, #164]	; (800b0dc <_vfiprintf_r+0x254>)
 800b036:	bb1b      	cbnz	r3, 800b080 <_vfiprintf_r+0x1f8>
 800b038:	9b03      	ldr	r3, [sp, #12]
 800b03a:	3307      	adds	r3, #7
 800b03c:	f023 0307 	bic.w	r3, r3, #7
 800b040:	3308      	adds	r3, #8
 800b042:	9303      	str	r3, [sp, #12]
 800b044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b046:	443b      	add	r3, r7
 800b048:	9309      	str	r3, [sp, #36]	; 0x24
 800b04a:	e767      	b.n	800af1c <_vfiprintf_r+0x94>
 800b04c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b050:	460c      	mov	r4, r1
 800b052:	2001      	movs	r0, #1
 800b054:	e7a5      	b.n	800afa2 <_vfiprintf_r+0x11a>
 800b056:	2300      	movs	r3, #0
 800b058:	3401      	adds	r4, #1
 800b05a:	9305      	str	r3, [sp, #20]
 800b05c:	4619      	mov	r1, r3
 800b05e:	f04f 0c0a 	mov.w	ip, #10
 800b062:	4620      	mov	r0, r4
 800b064:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b068:	3a30      	subs	r2, #48	; 0x30
 800b06a:	2a09      	cmp	r2, #9
 800b06c:	d903      	bls.n	800b076 <_vfiprintf_r+0x1ee>
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d0c5      	beq.n	800affe <_vfiprintf_r+0x176>
 800b072:	9105      	str	r1, [sp, #20]
 800b074:	e7c3      	b.n	800affe <_vfiprintf_r+0x176>
 800b076:	fb0c 2101 	mla	r1, ip, r1, r2
 800b07a:	4604      	mov	r4, r0
 800b07c:	2301      	movs	r3, #1
 800b07e:	e7f0      	b.n	800b062 <_vfiprintf_r+0x1da>
 800b080:	ab03      	add	r3, sp, #12
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	462a      	mov	r2, r5
 800b086:	4b16      	ldr	r3, [pc, #88]	; (800b0e0 <_vfiprintf_r+0x258>)
 800b088:	a904      	add	r1, sp, #16
 800b08a:	4630      	mov	r0, r6
 800b08c:	f7fd fd78 	bl	8008b80 <_printf_float>
 800b090:	4607      	mov	r7, r0
 800b092:	1c78      	adds	r0, r7, #1
 800b094:	d1d6      	bne.n	800b044 <_vfiprintf_r+0x1bc>
 800b096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b098:	07d9      	lsls	r1, r3, #31
 800b09a:	d405      	bmi.n	800b0a8 <_vfiprintf_r+0x220>
 800b09c:	89ab      	ldrh	r3, [r5, #12]
 800b09e:	059a      	lsls	r2, r3, #22
 800b0a0:	d402      	bmi.n	800b0a8 <_vfiprintf_r+0x220>
 800b0a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0a4:	f7ff faba 	bl	800a61c <__retarget_lock_release_recursive>
 800b0a8:	89ab      	ldrh	r3, [r5, #12]
 800b0aa:	065b      	lsls	r3, r3, #25
 800b0ac:	f53f af12 	bmi.w	800aed4 <_vfiprintf_r+0x4c>
 800b0b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0b2:	e711      	b.n	800aed8 <_vfiprintf_r+0x50>
 800b0b4:	ab03      	add	r3, sp, #12
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	462a      	mov	r2, r5
 800b0ba:	4b09      	ldr	r3, [pc, #36]	; (800b0e0 <_vfiprintf_r+0x258>)
 800b0bc:	a904      	add	r1, sp, #16
 800b0be:	4630      	mov	r0, r6
 800b0c0:	f7fd ffea 	bl	8009098 <_printf_i>
 800b0c4:	e7e4      	b.n	800b090 <_vfiprintf_r+0x208>
 800b0c6:	bf00      	nop
 800b0c8:	0800d31c 	.word	0x0800d31c
 800b0cc:	0800d33c 	.word	0x0800d33c
 800b0d0:	0800d2fc 	.word	0x0800d2fc
 800b0d4:	0800d4bc 	.word	0x0800d4bc
 800b0d8:	0800d4c6 	.word	0x0800d4c6
 800b0dc:	08008b81 	.word	0x08008b81
 800b0e0:	0800ae65 	.word	0x0800ae65
 800b0e4:	0800d4c2 	.word	0x0800d4c2

0800b0e8 <__sread>:
 800b0e8:	b510      	push	{r4, lr}
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f0:	f000 f8ae 	bl	800b250 <_read_r>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	bfab      	itete	ge
 800b0f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0fa:	89a3      	ldrhlt	r3, [r4, #12]
 800b0fc:	181b      	addge	r3, r3, r0
 800b0fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b102:	bfac      	ite	ge
 800b104:	6563      	strge	r3, [r4, #84]	; 0x54
 800b106:	81a3      	strhlt	r3, [r4, #12]
 800b108:	bd10      	pop	{r4, pc}

0800b10a <__swrite>:
 800b10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b10e:	461f      	mov	r7, r3
 800b110:	898b      	ldrh	r3, [r1, #12]
 800b112:	05db      	lsls	r3, r3, #23
 800b114:	4605      	mov	r5, r0
 800b116:	460c      	mov	r4, r1
 800b118:	4616      	mov	r6, r2
 800b11a:	d505      	bpl.n	800b128 <__swrite+0x1e>
 800b11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b120:	2302      	movs	r3, #2
 800b122:	2200      	movs	r2, #0
 800b124:	f000 f870 	bl	800b208 <_lseek_r>
 800b128:	89a3      	ldrh	r3, [r4, #12]
 800b12a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b12e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b132:	81a3      	strh	r3, [r4, #12]
 800b134:	4632      	mov	r2, r6
 800b136:	463b      	mov	r3, r7
 800b138:	4628      	mov	r0, r5
 800b13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b13e:	f000 b817 	b.w	800b170 <_write_r>

0800b142 <__sseek>:
 800b142:	b510      	push	{r4, lr}
 800b144:	460c      	mov	r4, r1
 800b146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b14a:	f000 f85d 	bl	800b208 <_lseek_r>
 800b14e:	1c43      	adds	r3, r0, #1
 800b150:	89a3      	ldrh	r3, [r4, #12]
 800b152:	bf15      	itete	ne
 800b154:	6560      	strne	r0, [r4, #84]	; 0x54
 800b156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b15a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b15e:	81a3      	strheq	r3, [r4, #12]
 800b160:	bf18      	it	ne
 800b162:	81a3      	strhne	r3, [r4, #12]
 800b164:	bd10      	pop	{r4, pc}

0800b166 <__sclose>:
 800b166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b16a:	f000 b81b 	b.w	800b1a4 <_close_r>
	...

0800b170 <_write_r>:
 800b170:	b538      	push	{r3, r4, r5, lr}
 800b172:	4d07      	ldr	r5, [pc, #28]	; (800b190 <_write_r+0x20>)
 800b174:	4604      	mov	r4, r0
 800b176:	4608      	mov	r0, r1
 800b178:	4611      	mov	r1, r2
 800b17a:	2200      	movs	r2, #0
 800b17c:	602a      	str	r2, [r5, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	f7f7 fc7f 	bl	8002a82 <_write>
 800b184:	1c43      	adds	r3, r0, #1
 800b186:	d102      	bne.n	800b18e <_write_r+0x1e>
 800b188:	682b      	ldr	r3, [r5, #0]
 800b18a:	b103      	cbz	r3, 800b18e <_write_r+0x1e>
 800b18c:	6023      	str	r3, [r4, #0]
 800b18e:	bd38      	pop	{r3, r4, r5, pc}
 800b190:	2400089c 	.word	0x2400089c

0800b194 <abort>:
 800b194:	b508      	push	{r3, lr}
 800b196:	2006      	movs	r0, #6
 800b198:	f000 f894 	bl	800b2c4 <raise>
 800b19c:	2001      	movs	r0, #1
 800b19e:	f7f7 fc49 	bl	8002a34 <_exit>
	...

0800b1a4 <_close_r>:
 800b1a4:	b538      	push	{r3, r4, r5, lr}
 800b1a6:	4d06      	ldr	r5, [pc, #24]	; (800b1c0 <_close_r+0x1c>)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	4608      	mov	r0, r1
 800b1ae:	602b      	str	r3, [r5, #0]
 800b1b0:	f7f7 fc83 	bl	8002aba <_close>
 800b1b4:	1c43      	adds	r3, r0, #1
 800b1b6:	d102      	bne.n	800b1be <_close_r+0x1a>
 800b1b8:	682b      	ldr	r3, [r5, #0]
 800b1ba:	b103      	cbz	r3, 800b1be <_close_r+0x1a>
 800b1bc:	6023      	str	r3, [r4, #0]
 800b1be:	bd38      	pop	{r3, r4, r5, pc}
 800b1c0:	2400089c 	.word	0x2400089c

0800b1c4 <_fstat_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	4d07      	ldr	r5, [pc, #28]	; (800b1e4 <_fstat_r+0x20>)
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	4608      	mov	r0, r1
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	602b      	str	r3, [r5, #0]
 800b1d2:	f7f7 fc7e 	bl	8002ad2 <_fstat>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	d102      	bne.n	800b1e0 <_fstat_r+0x1c>
 800b1da:	682b      	ldr	r3, [r5, #0]
 800b1dc:	b103      	cbz	r3, 800b1e0 <_fstat_r+0x1c>
 800b1de:	6023      	str	r3, [r4, #0]
 800b1e0:	bd38      	pop	{r3, r4, r5, pc}
 800b1e2:	bf00      	nop
 800b1e4:	2400089c 	.word	0x2400089c

0800b1e8 <_isatty_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4d06      	ldr	r5, [pc, #24]	; (800b204 <_isatty_r+0x1c>)
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	602b      	str	r3, [r5, #0]
 800b1f4:	f7f7 fc7d 	bl	8002af2 <_isatty>
 800b1f8:	1c43      	adds	r3, r0, #1
 800b1fa:	d102      	bne.n	800b202 <_isatty_r+0x1a>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	b103      	cbz	r3, 800b202 <_isatty_r+0x1a>
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	2400089c 	.word	0x2400089c

0800b208 <_lseek_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	4d07      	ldr	r5, [pc, #28]	; (800b228 <_lseek_r+0x20>)
 800b20c:	4604      	mov	r4, r0
 800b20e:	4608      	mov	r0, r1
 800b210:	4611      	mov	r1, r2
 800b212:	2200      	movs	r2, #0
 800b214:	602a      	str	r2, [r5, #0]
 800b216:	461a      	mov	r2, r3
 800b218:	f7f7 fc76 	bl	8002b08 <_lseek>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d102      	bne.n	800b226 <_lseek_r+0x1e>
 800b220:	682b      	ldr	r3, [r5, #0]
 800b222:	b103      	cbz	r3, 800b226 <_lseek_r+0x1e>
 800b224:	6023      	str	r3, [r4, #0]
 800b226:	bd38      	pop	{r3, r4, r5, pc}
 800b228:	2400089c 	.word	0x2400089c

0800b22c <__ascii_mbtowc>:
 800b22c:	b082      	sub	sp, #8
 800b22e:	b901      	cbnz	r1, 800b232 <__ascii_mbtowc+0x6>
 800b230:	a901      	add	r1, sp, #4
 800b232:	b142      	cbz	r2, 800b246 <__ascii_mbtowc+0x1a>
 800b234:	b14b      	cbz	r3, 800b24a <__ascii_mbtowc+0x1e>
 800b236:	7813      	ldrb	r3, [r2, #0]
 800b238:	600b      	str	r3, [r1, #0]
 800b23a:	7812      	ldrb	r2, [r2, #0]
 800b23c:	1e10      	subs	r0, r2, #0
 800b23e:	bf18      	it	ne
 800b240:	2001      	movne	r0, #1
 800b242:	b002      	add	sp, #8
 800b244:	4770      	bx	lr
 800b246:	4610      	mov	r0, r2
 800b248:	e7fb      	b.n	800b242 <__ascii_mbtowc+0x16>
 800b24a:	f06f 0001 	mvn.w	r0, #1
 800b24e:	e7f8      	b.n	800b242 <__ascii_mbtowc+0x16>

0800b250 <_read_r>:
 800b250:	b538      	push	{r3, r4, r5, lr}
 800b252:	4d07      	ldr	r5, [pc, #28]	; (800b270 <_read_r+0x20>)
 800b254:	4604      	mov	r4, r0
 800b256:	4608      	mov	r0, r1
 800b258:	4611      	mov	r1, r2
 800b25a:	2200      	movs	r2, #0
 800b25c:	602a      	str	r2, [r5, #0]
 800b25e:	461a      	mov	r2, r3
 800b260:	f7f7 fbf2 	bl	8002a48 <_read>
 800b264:	1c43      	adds	r3, r0, #1
 800b266:	d102      	bne.n	800b26e <_read_r+0x1e>
 800b268:	682b      	ldr	r3, [r5, #0]
 800b26a:	b103      	cbz	r3, 800b26e <_read_r+0x1e>
 800b26c:	6023      	str	r3, [r4, #0]
 800b26e:	bd38      	pop	{r3, r4, r5, pc}
 800b270:	2400089c 	.word	0x2400089c

0800b274 <_raise_r>:
 800b274:	291f      	cmp	r1, #31
 800b276:	b538      	push	{r3, r4, r5, lr}
 800b278:	4604      	mov	r4, r0
 800b27a:	460d      	mov	r5, r1
 800b27c:	d904      	bls.n	800b288 <_raise_r+0x14>
 800b27e:	2316      	movs	r3, #22
 800b280:	6003      	str	r3, [r0, #0]
 800b282:	f04f 30ff 	mov.w	r0, #4294967295
 800b286:	bd38      	pop	{r3, r4, r5, pc}
 800b288:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b28a:	b112      	cbz	r2, 800b292 <_raise_r+0x1e>
 800b28c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b290:	b94b      	cbnz	r3, 800b2a6 <_raise_r+0x32>
 800b292:	4620      	mov	r0, r4
 800b294:	f000 f830 	bl	800b2f8 <_getpid_r>
 800b298:	462a      	mov	r2, r5
 800b29a:	4601      	mov	r1, r0
 800b29c:	4620      	mov	r0, r4
 800b29e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2a2:	f000 b817 	b.w	800b2d4 <_kill_r>
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d00a      	beq.n	800b2c0 <_raise_r+0x4c>
 800b2aa:	1c59      	adds	r1, r3, #1
 800b2ac:	d103      	bne.n	800b2b6 <_raise_r+0x42>
 800b2ae:	2316      	movs	r3, #22
 800b2b0:	6003      	str	r3, [r0, #0]
 800b2b2:	2001      	movs	r0, #1
 800b2b4:	e7e7      	b.n	800b286 <_raise_r+0x12>
 800b2b6:	2400      	movs	r4, #0
 800b2b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b2bc:	4628      	mov	r0, r5
 800b2be:	4798      	blx	r3
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	e7e0      	b.n	800b286 <_raise_r+0x12>

0800b2c4 <raise>:
 800b2c4:	4b02      	ldr	r3, [pc, #8]	; (800b2d0 <raise+0xc>)
 800b2c6:	4601      	mov	r1, r0
 800b2c8:	6818      	ldr	r0, [r3, #0]
 800b2ca:	f7ff bfd3 	b.w	800b274 <_raise_r>
 800b2ce:	bf00      	nop
 800b2d0:	24000010 	.word	0x24000010

0800b2d4 <_kill_r>:
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	4d07      	ldr	r5, [pc, #28]	; (800b2f4 <_kill_r+0x20>)
 800b2d8:	2300      	movs	r3, #0
 800b2da:	4604      	mov	r4, r0
 800b2dc:	4608      	mov	r0, r1
 800b2de:	4611      	mov	r1, r2
 800b2e0:	602b      	str	r3, [r5, #0]
 800b2e2:	f7f7 fb97 	bl	8002a14 <_kill>
 800b2e6:	1c43      	adds	r3, r0, #1
 800b2e8:	d102      	bne.n	800b2f0 <_kill_r+0x1c>
 800b2ea:	682b      	ldr	r3, [r5, #0]
 800b2ec:	b103      	cbz	r3, 800b2f0 <_kill_r+0x1c>
 800b2ee:	6023      	str	r3, [r4, #0]
 800b2f0:	bd38      	pop	{r3, r4, r5, pc}
 800b2f2:	bf00      	nop
 800b2f4:	2400089c 	.word	0x2400089c

0800b2f8 <_getpid_r>:
 800b2f8:	f7f7 bb84 	b.w	8002a04 <_getpid>

0800b2fc <__ascii_wctomb>:
 800b2fc:	b149      	cbz	r1, 800b312 <__ascii_wctomb+0x16>
 800b2fe:	2aff      	cmp	r2, #255	; 0xff
 800b300:	bf85      	ittet	hi
 800b302:	238a      	movhi	r3, #138	; 0x8a
 800b304:	6003      	strhi	r3, [r0, #0]
 800b306:	700a      	strbls	r2, [r1, #0]
 800b308:	f04f 30ff 	movhi.w	r0, #4294967295
 800b30c:	bf98      	it	ls
 800b30e:	2001      	movls	r0, #1
 800b310:	4770      	bx	lr
 800b312:	4608      	mov	r0, r1
 800b314:	4770      	bx	lr

0800b316 <sinf_poly>:
 800b316:	07cb      	lsls	r3, r1, #31
 800b318:	d412      	bmi.n	800b340 <sinf_poly+0x2a>
 800b31a:	ee21 6b00 	vmul.f64	d6, d1, d0
 800b31e:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800b322:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800b326:	eea5 7b01 	vfma.f64	d7, d5, d1
 800b32a:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800b32e:	ee21 1b06 	vmul.f64	d1, d1, d6
 800b332:	eea5 0b06 	vfma.f64	d0, d5, d6
 800b336:	eea7 0b01 	vfma.f64	d0, d7, d1
 800b33a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b33e:	4770      	bx	lr
 800b340:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800b344:	ee21 6b01 	vmul.f64	d6, d1, d1
 800b348:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800b34c:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800b350:	eea1 7b05 	vfma.f64	d7, d1, d5
 800b354:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800b358:	eea1 0b05 	vfma.f64	d0, d1, d5
 800b35c:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800b360:	ee21 1b06 	vmul.f64	d1, d1, d6
 800b364:	eea6 0b05 	vfma.f64	d0, d6, d5
 800b368:	e7e5      	b.n	800b336 <sinf_poly+0x20>
 800b36a:	0000      	movs	r0, r0
 800b36c:	0000      	movs	r0, r0
	...

0800b370 <cosf>:
 800b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b372:	ee10 4a10 	vmov	r4, s0
 800b376:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b37a:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800b37e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800b382:	d20c      	bcs.n	800b39e <cosf+0x2e>
 800b384:	ee26 1b06 	vmul.f64	d1, d6, d6
 800b388:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800b38c:	d378      	bcc.n	800b480 <cosf+0x110>
 800b38e:	eeb0 0b46 	vmov.f64	d0, d6
 800b392:	483f      	ldr	r0, [pc, #252]	; (800b490 <cosf+0x120>)
 800b394:	2101      	movs	r1, #1
 800b396:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b39a:	f7ff bfbc 	b.w	800b316 <sinf_poly>
 800b39e:	f240 422e 	movw	r2, #1070	; 0x42e
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d826      	bhi.n	800b3f4 <cosf+0x84>
 800b3a6:	4b3a      	ldr	r3, [pc, #232]	; (800b490 <cosf+0x120>)
 800b3a8:	ed93 7b08 	vldr	d7, [r3, #32]
 800b3ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b3b0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b3b4:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800b3b8:	ee17 1a90 	vmov	r1, s15
 800b3bc:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800b3c0:	1609      	asrs	r1, r1, #24
 800b3c2:	ee07 1a90 	vmov	s15, r1
 800b3c6:	f001 0203 	and.w	r2, r1, #3
 800b3ca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b3ce:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800b3d2:	ed92 0b00 	vldr	d0, [r2]
 800b3d6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800b3da:	f011 0f02 	tst.w	r1, #2
 800b3de:	eea5 6b47 	vfms.f64	d6, d5, d7
 800b3e2:	f081 0101 	eor.w	r1, r1, #1
 800b3e6:	bf08      	it	eq
 800b3e8:	4618      	moveq	r0, r3
 800b3ea:	ee26 1b06 	vmul.f64	d1, d6, d6
 800b3ee:	ee20 0b06 	vmul.f64	d0, d0, d6
 800b3f2:	e7d0      	b.n	800b396 <cosf+0x26>
 800b3f4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800b3f8:	d23e      	bcs.n	800b478 <cosf+0x108>
 800b3fa:	4b26      	ldr	r3, [pc, #152]	; (800b494 <cosf+0x124>)
 800b3fc:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800b400:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800b404:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800b408:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800b40c:	6a06      	ldr	r6, [r0, #32]
 800b40e:	6900      	ldr	r0, [r0, #16]
 800b410:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800b414:	40a9      	lsls	r1, r5
 800b416:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800b41a:	fba1 6706 	umull	r6, r7, r1, r6
 800b41e:	fb05 f301 	mul.w	r3, r5, r1
 800b422:	463a      	mov	r2, r7
 800b424:	fbe0 2301 	umlal	r2, r3, r0, r1
 800b428:	1c11      	adds	r1, r2, #0
 800b42a:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800b42e:	2000      	movs	r0, #0
 800b430:	1a10      	subs	r0, r2, r0
 800b432:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800b436:	eb63 0101 	sbc.w	r1, r3, r1
 800b43a:	f7f5 f937 	bl	80006ac <__aeabi_l2d>
 800b43e:	0fb5      	lsrs	r5, r6, #30
 800b440:	4b13      	ldr	r3, [pc, #76]	; (800b490 <cosf+0x120>)
 800b442:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800b446:	ed9f 0b10 	vldr	d0, [pc, #64]	; 800b488 <cosf+0x118>
 800b44a:	ec41 0b17 	vmov	d7, r0, r1
 800b44e:	f004 0203 	and.w	r2, r4, #3
 800b452:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800b456:	ee27 0b00 	vmul.f64	d0, d7, d0
 800b45a:	ed92 7b00 	vldr	d7, [r2]
 800b45e:	ee20 1b00 	vmul.f64	d1, d0, d0
 800b462:	f014 0f02 	tst.w	r4, #2
 800b466:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800b46a:	f085 0101 	eor.w	r1, r5, #1
 800b46e:	bf08      	it	eq
 800b470:	4618      	moveq	r0, r3
 800b472:	ee27 0b00 	vmul.f64	d0, d7, d0
 800b476:	e78e      	b.n	800b396 <cosf+0x26>
 800b478:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b47c:	f000 b834 	b.w	800b4e8 <__math_invalidf>
 800b480:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b486:	bf00      	nop
 800b488:	54442d18 	.word	0x54442d18
 800b48c:	3c1921fb 	.word	0x3c1921fb
 800b490:	0800e7c8 	.word	0x0800e7c8
 800b494:	0800e768 	.word	0x0800e768

0800b498 <with_errnof>:
 800b498:	b513      	push	{r0, r1, r4, lr}
 800b49a:	4604      	mov	r4, r0
 800b49c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b4a0:	f7fd f9f8 	bl	8008894 <__errno>
 800b4a4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b4a8:	6004      	str	r4, [r0, #0]
 800b4aa:	b002      	add	sp, #8
 800b4ac:	bd10      	pop	{r4, pc}

0800b4ae <xflowf>:
 800b4ae:	b130      	cbz	r0, 800b4be <xflowf+0x10>
 800b4b0:	eef1 7a40 	vneg.f32	s15, s0
 800b4b4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b4b8:	2022      	movs	r0, #34	; 0x22
 800b4ba:	f7ff bfed 	b.w	800b498 <with_errnof>
 800b4be:	eef0 7a40 	vmov.f32	s15, s0
 800b4c2:	e7f7      	b.n	800b4b4 <xflowf+0x6>

0800b4c4 <__math_uflowf>:
 800b4c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b4cc <__math_uflowf+0x8>
 800b4c8:	f7ff bff1 	b.w	800b4ae <xflowf>
 800b4cc:	10000000 	.word	0x10000000

0800b4d0 <__math_may_uflowf>:
 800b4d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b4d8 <__math_may_uflowf+0x8>
 800b4d4:	f7ff bfeb 	b.w	800b4ae <xflowf>
 800b4d8:	1a200000 	.word	0x1a200000

0800b4dc <__math_oflowf>:
 800b4dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b4e4 <__math_oflowf+0x8>
 800b4e0:	f7ff bfe5 	b.w	800b4ae <xflowf>
 800b4e4:	70000000 	.word	0x70000000

0800b4e8 <__math_invalidf>:
 800b4e8:	eef0 7a40 	vmov.f32	s15, s0
 800b4ec:	ee30 7a40 	vsub.f32	s14, s0, s0
 800b4f0:	eef4 7a67 	vcmp.f32	s15, s15
 800b4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f8:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800b4fc:	d602      	bvs.n	800b504 <__math_invalidf+0x1c>
 800b4fe:	2021      	movs	r0, #33	; 0x21
 800b500:	f7ff bfca 	b.w	800b498 <with_errnof>
 800b504:	4770      	bx	lr

0800b506 <checkint>:
 800b506:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b50a:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800b50e:	429a      	cmp	r2, r3
 800b510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b512:	dd2b      	ble.n	800b56c <checkint+0x66>
 800b514:	f240 4333 	movw	r3, #1075	; 0x433
 800b518:	429a      	cmp	r2, r3
 800b51a:	dc25      	bgt.n	800b568 <checkint+0x62>
 800b51c:	1a9b      	subs	r3, r3, r2
 800b51e:	f1a3 0620 	sub.w	r6, r3, #32
 800b522:	f04f 32ff 	mov.w	r2, #4294967295
 800b526:	fa02 f606 	lsl.w	r6, r2, r6
 800b52a:	fa02 f403 	lsl.w	r4, r2, r3
 800b52e:	f1c3 0520 	rsb	r5, r3, #32
 800b532:	4334      	orrs	r4, r6
 800b534:	fa22 f505 	lsr.w	r5, r2, r5
 800b538:	432c      	orrs	r4, r5
 800b53a:	409a      	lsls	r2, r3
 800b53c:	ea20 0602 	bic.w	r6, r0, r2
 800b540:	ea21 0704 	bic.w	r7, r1, r4
 800b544:	ea56 0207 	orrs.w	r2, r6, r7
 800b548:	f1a3 0420 	sub.w	r4, r3, #32
 800b54c:	f1c3 0220 	rsb	r2, r3, #32
 800b550:	d10c      	bne.n	800b56c <checkint+0x66>
 800b552:	40d8      	lsrs	r0, r3
 800b554:	fa01 f302 	lsl.w	r3, r1, r2
 800b558:	4318      	orrs	r0, r3
 800b55a:	40e1      	lsrs	r1, r4
 800b55c:	4308      	orrs	r0, r1
 800b55e:	f000 0301 	and.w	r3, r0, #1
 800b562:	f1c3 0002 	rsb	r0, r3, #2
 800b566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b568:	2002      	movs	r0, #2
 800b56a:	e7fc      	b.n	800b566 <checkint+0x60>
 800b56c:	2000      	movs	r0, #0
 800b56e:	e7fa      	b.n	800b566 <checkint+0x60>

0800b570 <pow>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	ed2d 8b0a 	vpush	{d8-d12}
 800b578:	b09b      	sub	sp, #108	; 0x6c
 800b57a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b57e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b582:	ed8d 1b00 	vstr	d1, [sp]
 800b586:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800b58a:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b58e:	f109 30ff 	add.w	r0, r9, #4294967295
 800b592:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800b596:	4288      	cmp	r0, r1
 800b598:	46cc      	mov	ip, r9
 800b59a:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800b59e:	d806      	bhi.n	800b5ae <pow+0x3e>
 800b5a0:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800b5a4:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800b5a8:	297f      	cmp	r1, #127	; 0x7f
 800b5aa:	f240 81ab 	bls.w	800b904 <pow+0x394>
 800b5ae:	19b1      	adds	r1, r6, r6
 800b5b0:	9104      	str	r1, [sp, #16]
 800b5b2:	eb47 0107 	adc.w	r1, r7, r7
 800b5b6:	9105      	str	r1, [sp, #20]
 800b5b8:	9904      	ldr	r1, [sp, #16]
 800b5ba:	f111 31ff 	adds.w	r1, r1, #4294967295
 800b5be:	460a      	mov	r2, r1
 800b5c0:	9905      	ldr	r1, [sp, #20]
 800b5c2:	f141 31ff 	adc.w	r1, r1, #4294967295
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800b5cc:	f06f 0001 	mvn.w	r0, #1
 800b5d0:	4299      	cmp	r1, r3
 800b5d2:	bf08      	it	eq
 800b5d4:	4290      	cmpeq	r0, r2
 800b5d6:	d260      	bcs.n	800b69a <pow+0x12a>
 800b5d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5dc:	4313      	orrs	r3, r2
 800b5de:	d11a      	bne.n	800b616 <pow+0xa6>
 800b5e0:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800b5e4:	1923      	adds	r3, r4, r4
 800b5e6:	930c      	str	r3, [sp, #48]	; 0x30
 800b5e8:	eb42 0302 	adc.w	r3, r2, r2
 800b5ec:	930d      	str	r3, [sp, #52]	; 0x34
 800b5ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b5f2:	4bcf      	ldr	r3, [pc, #828]	; (800b930 <pow+0x3c0>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	428b      	cmp	r3, r1
 800b5f8:	bf08      	it	eq
 800b5fa:	4282      	cmpeq	r2, r0
 800b5fc:	f080 8265 	bcs.w	800baca <pow+0x55a>
 800b600:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b604:	ed9d 6b00 	vldr	d6, [sp]
 800b608:	ee37 0b06 	vadd.f64	d0, d7, d6
 800b60c:	b01b      	add	sp, #108	; 0x6c
 800b60e:	ecbd 8b0a 	vpop	{d8-d12}
 800b612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b616:	49c7      	ldr	r1, [pc, #796]	; (800b934 <pow+0x3c4>)
 800b618:	2000      	movs	r0, #0
 800b61a:	428d      	cmp	r5, r1
 800b61c:	bf08      	it	eq
 800b61e:	4284      	cmpeq	r4, r0
 800b620:	d10b      	bne.n	800b63a <pow+0xca>
 800b622:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b626:	19b3      	adds	r3, r6, r6
 800b628:	930e      	str	r3, [sp, #56]	; 0x38
 800b62a:	eb42 0302 	adc.w	r3, r2, r2
 800b62e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b630:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b634:	4bbe      	ldr	r3, [pc, #760]	; (800b930 <pow+0x3c0>)
 800b636:	2200      	movs	r2, #0
 800b638:	e7dd      	b.n	800b5f6 <pow+0x86>
 800b63a:	1921      	adds	r1, r4, r4
 800b63c:	9106      	str	r1, [sp, #24]
 800b63e:	eb45 0105 	adc.w	r1, r5, r5
 800b642:	9107      	str	r1, [sp, #28]
 800b644:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b648:	49bb      	ldr	r1, [pc, #748]	; (800b938 <pow+0x3c8>)
 800b64a:	2000      	movs	r0, #0
 800b64c:	42a1      	cmp	r1, r4
 800b64e:	bf08      	it	eq
 800b650:	4298      	cmpeq	r0, r3
 800b652:	d3d5      	bcc.n	800b600 <pow+0x90>
 800b654:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b658:	428c      	cmp	r4, r1
 800b65a:	bf08      	it	eq
 800b65c:	4283      	cmpeq	r3, r0
 800b65e:	d1cf      	bne.n	800b600 <pow+0x90>
 800b660:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b664:	49b5      	ldr	r1, [pc, #724]	; (800b93c <pow+0x3cc>)
 800b666:	2000      	movs	r0, #0
 800b668:	428c      	cmp	r4, r1
 800b66a:	bf08      	it	eq
 800b66c:	4283      	cmpeq	r3, r0
 800b66e:	f000 822c 	beq.w	800baca <pow+0x55a>
 800b672:	49b3      	ldr	r1, [pc, #716]	; (800b940 <pow+0x3d0>)
 800b674:	f04f 30ff 	mov.w	r0, #4294967295
 800b678:	42a1      	cmp	r1, r4
 800b67a:	bf08      	it	eq
 800b67c:	4298      	cmpeq	r0, r3
 800b67e:	ea6f 0307 	mvn.w	r3, r7
 800b682:	bf34      	ite	cc
 800b684:	2201      	movcc	r2, #1
 800b686:	2200      	movcs	r2, #0
 800b688:	0fdb      	lsrs	r3, r3, #31
 800b68a:	429a      	cmp	r2, r3
 800b68c:	f040 821a 	bne.w	800bac4 <pow+0x554>
 800b690:	ed9d 7b00 	vldr	d7, [sp]
 800b694:	ee27 0b07 	vmul.f64	d0, d7, d7
 800b698:	e7b8      	b.n	800b60c <pow+0x9c>
 800b69a:	1923      	adds	r3, r4, r4
 800b69c:	9308      	str	r3, [sp, #32]
 800b69e:	eb45 0305 	adc.w	r3, r5, r5
 800b6a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6a4:	9b08      	ldr	r3, [sp, #32]
 800b6a6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800b6aa:	9310      	str	r3, [sp, #64]	; 0x40
 800b6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ae:	f143 33ff 	adc.w	r3, r3, #4294967295
 800b6b2:	9311      	str	r3, [sp, #68]	; 0x44
 800b6b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b6b8:	4299      	cmp	r1, r3
 800b6ba:	bf08      	it	eq
 800b6bc:	4290      	cmpeq	r0, r2
 800b6be:	d22d      	bcs.n	800b71c <pow+0x1ac>
 800b6c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b6c4:	2c00      	cmp	r4, #0
 800b6c6:	f175 0300 	sbcs.w	r3, r5, #0
 800b6ca:	ee27 0b07 	vmul.f64	d0, d7, d7
 800b6ce:	da16      	bge.n	800b6fe <pow+0x18e>
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	4639      	mov	r1, r7
 800b6d4:	f7ff ff17 	bl	800b506 <checkint>
 800b6d8:	2801      	cmp	r0, #1
 800b6da:	d110      	bne.n	800b6fe <pow+0x18e>
 800b6dc:	eeb1 0b40 	vneg.f64	d0, d0
 800b6e0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800b6e4:	4323      	orrs	r3, r4
 800b6e6:	d10c      	bne.n	800b702 <pow+0x192>
 800b6e8:	2e00      	cmp	r6, #0
 800b6ea:	f177 0300 	sbcs.w	r3, r7, #0
 800b6ee:	da8d      	bge.n	800b60c <pow+0x9c>
 800b6f0:	b01b      	add	sp, #108	; 0x6c
 800b6f2:	ecbd 8b0a 	vpop	{d8-d12}
 800b6f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fa:	f001 bb89 	b.w	800ce10 <__math_divzero>
 800b6fe:	2000      	movs	r0, #0
 800b700:	e7ee      	b.n	800b6e0 <pow+0x170>
 800b702:	2e00      	cmp	r6, #0
 800b704:	f177 0300 	sbcs.w	r3, r7, #0
 800b708:	da80      	bge.n	800b60c <pow+0x9c>
 800b70a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b70e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800b712:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800b716:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800b71a:	e777      	b.n	800b60c <pow+0x9c>
 800b71c:	2c00      	cmp	r4, #0
 800b71e:	f175 0300 	sbcs.w	r3, r5, #0
 800b722:	da35      	bge.n	800b790 <pow+0x220>
 800b724:	4630      	mov	r0, r6
 800b726:	4639      	mov	r1, r7
 800b728:	f7ff feed 	bl	800b506 <checkint>
 800b72c:	b940      	cbnz	r0, 800b740 <pow+0x1d0>
 800b72e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800b732:	b01b      	add	sp, #108	; 0x6c
 800b734:	ecbd 8b0a 	vpop	{d8-d12}
 800b738:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73c:	f001 bb80 	b.w	800ce40 <__math_invalid>
 800b740:	2801      	cmp	r0, #1
 800b742:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b746:	bf14      	ite	ne
 800b748:	2000      	movne	r0, #0
 800b74a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800b74e:	461d      	mov	r5, r3
 800b750:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800b754:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800b758:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800b75c:	2a7f      	cmp	r2, #127	; 0x7f
 800b75e:	d933      	bls.n	800b7c8 <pow+0x258>
 800b760:	4974      	ldr	r1, [pc, #464]	; (800b934 <pow+0x3c4>)
 800b762:	2000      	movs	r0, #0
 800b764:	428d      	cmp	r5, r1
 800b766:	bf08      	it	eq
 800b768:	4284      	cmpeq	r4, r0
 800b76a:	f000 81ae 	beq.w	800baca <pow+0x55a>
 800b76e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b772:	4293      	cmp	r3, r2
 800b774:	d80e      	bhi.n	800b794 <pow+0x224>
 800b776:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b77a:	ed9d 7b00 	vldr	d7, [sp]
 800b77e:	42a9      	cmp	r1, r5
 800b780:	bf08      	it	eq
 800b782:	42a0      	cmpeq	r0, r4
 800b784:	bf34      	ite	cc
 800b786:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800b78a:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800b78e:	e73d      	b.n	800b60c <pow+0x9c>
 800b790:	2000      	movs	r0, #0
 800b792:	e7df      	b.n	800b754 <pow+0x1e4>
 800b794:	42a9      	cmp	r1, r5
 800b796:	bf08      	it	eq
 800b798:	42a0      	cmpeq	r0, r4
 800b79a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800b79e:	bf2c      	ite	cs
 800b7a0:	2301      	movcs	r3, #1
 800b7a2:	2300      	movcc	r3, #0
 800b7a4:	4590      	cmp	r8, r2
 800b7a6:	bf8c      	ite	hi
 800b7a8:	f04f 0800 	movhi.w	r8, #0
 800b7ac:	f04f 0801 	movls.w	r8, #1
 800b7b0:	4543      	cmp	r3, r8
 800b7b2:	f04f 0000 	mov.w	r0, #0
 800b7b6:	f000 80af 	beq.w	800b918 <pow+0x3a8>
 800b7ba:	b01b      	add	sp, #108	; 0x6c
 800b7bc:	ecbd 8b0a 	vpop	{d8-d12}
 800b7c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	f001 bb1c 	b.w	800ce00 <__math_oflow>
 800b7c8:	f1bc 0f00 	cmp.w	ip, #0
 800b7cc:	d10e      	bne.n	800b7ec <pow+0x27c>
 800b7ce:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800b928 <pow+0x3b8>
 800b7d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b7d6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b7da:	ec57 6b17 	vmov	r6, r7, d7
 800b7de:	4b59      	ldr	r3, [pc, #356]	; (800b944 <pow+0x3d4>)
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b7e6:	1874      	adds	r4, r6, r1
 800b7e8:	eb42 0503 	adc.w	r5, r2, r3
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	18e3      	adds	r3, r4, r3
 800b7f0:	4b55      	ldr	r3, [pc, #340]	; (800b948 <pow+0x3d8>)
 800b7f2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800b7f6:	eb45 0303 	adc.w	r3, r5, r3
 800b7fa:	1519      	asrs	r1, r3, #20
 800b7fc:	ee03 1a10 	vmov	s6, r1
 800b800:	0d1e      	lsrs	r6, r3, #20
 800b802:	2100      	movs	r1, #0
 800b804:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800b808:	0536      	lsls	r6, r6, #20
 800b80a:	1a63      	subs	r3, r4, r1
 800b80c:	9312      	str	r3, [sp, #72]	; 0x48
 800b80e:	eb65 0306 	sbc.w	r3, r5, r6
 800b812:	9313      	str	r3, [sp, #76]	; 0x4c
 800b814:	4b4d      	ldr	r3, [pc, #308]	; (800b94c <pow+0x3dc>)
 800b816:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800b81a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b81e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800b822:	eea5 6b07 	vfma.f64	d6, d5, d7
 800b826:	ed93 7b00 	vldr	d7, [r3]
 800b82a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800b82e:	ed93 4b02 	vldr	d4, [r3, #8]
 800b832:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800b836:	eea3 5b07 	vfma.f64	d5, d3, d7
 800b83a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800b83e:	ee36 9b05 	vadd.f64	d9, d6, d5
 800b842:	ee35 5b49 	vsub.f64	d5, d5, d9
 800b846:	eea3 7b04 	vfma.f64	d7, d3, d4
 800b84a:	ed93 4b04 	vldr	d4, [r3, #16]
 800b84e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800b852:	ee37 7b05 	vadd.f64	d7, d7, d5
 800b856:	ee26 4b04 	vmul.f64	d4, d6, d4
 800b85a:	ed93 3b08 	vldr	d3, [r3, #32]
 800b85e:	ee26 0b04 	vmul.f64	d0, d6, d4
 800b862:	eeb0 8b40 	vmov.f64	d8, d0
 800b866:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800b86a:	ed93 4b06 	vldr	d4, [r3, #24]
 800b86e:	ee26 ab00 	vmul.f64	d10, d6, d0
 800b872:	ee39 1b00 	vadd.f64	d1, d9, d0
 800b876:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800b87a:	eea6 4b03 	vfma.f64	d4, d6, d3
 800b87e:	ee39 9b41 	vsub.f64	d9, d9, d1
 800b882:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800b886:	ee37 8b08 	vadd.f64	d8, d7, d8
 800b88a:	ee39 9b00 	vadd.f64	d9, d9, d0
 800b88e:	eea6 3b02 	vfma.f64	d3, d6, d2
 800b892:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800b896:	ee38 9b09 	vadd.f64	d9, d8, d9
 800b89a:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800b89e:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800b8a2:	ed9d 6b00 	vldr	d6, [sp]
 800b8a6:	eea0 3b02 	vfma.f64	d3, d0, d2
 800b8aa:	eea0 4b03 	vfma.f64	d4, d0, d3
 800b8ae:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800b8b2:	ee31 7b09 	vadd.f64	d7, d1, d9
 800b8b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b8ba:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b8be:	eeb0 3b46 	vmov.f64	d3, d6
 800b8c2:	ee31 1b47 	vsub.f64	d1, d1, d7
 800b8c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8ca:	ee31 9b09 	vadd.f64	d9, d1, d9
 800b8ce:	ed9d 6b00 	vldr	d6, [sp]
 800b8d2:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800b8d6:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800b8da:	193c      	adds	r4, r7, r4
 800b8dc:	2c3e      	cmp	r4, #62	; 0x3e
 800b8de:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800b8e2:	eea6 3b09 	vfma.f64	d3, d6, d9
 800b8e6:	d934      	bls.n	800b952 <pow+0x3e2>
 800b8e8:	428c      	cmp	r4, r1
 800b8ea:	da0d      	bge.n	800b908 <pow+0x398>
 800b8ec:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b8f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8f4:	ee37 0b00 	vadd.f64	d0, d7, d0
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	f43f ae87 	beq.w	800b60c <pow+0x9c>
 800b8fe:	eeb1 0b40 	vneg.f64	d0, d0
 800b902:	e683      	b.n	800b60c <pow+0x9c>
 800b904:	2000      	movs	r0, #0
 800b906:	e771      	b.n	800b7ec <pow+0x27c>
 800b908:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800b90c:	d920      	bls.n	800b950 <pow+0x3e0>
 800b90e:	2a00      	cmp	r2, #0
 800b910:	f173 0300 	sbcs.w	r3, r3, #0
 800b914:	f6bf af51 	bge.w	800b7ba <pow+0x24a>
 800b918:	b01b      	add	sp, #108	; 0x6c
 800b91a:	ecbd 8b0a 	vpop	{d8-d12}
 800b91e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b922:	f001 ba65 	b.w	800cdf0 <__math_uflow>
 800b926:	bf00      	nop
 800b928:	00000000 	.word	0x00000000
 800b92c:	43300000 	.word	0x43300000
 800b930:	fff00000 	.word	0xfff00000
 800b934:	3ff00000 	.word	0x3ff00000
 800b938:	ffe00000 	.word	0xffe00000
 800b93c:	7fe00000 	.word	0x7fe00000
 800b940:	7fdfffff 	.word	0x7fdfffff
 800b944:	fcc00000 	.word	0xfcc00000
 800b948:	c0196aab 	.word	0xc0196aab
 800b94c:	0800d5d8 	.word	0x0800d5d8
 800b950:	460f      	mov	r7, r1
 800b952:	4e65      	ldr	r6, [pc, #404]	; (800bae8 <pow+0x578>)
 800b954:	ed9d 4b02 	vldr	d4, [sp, #8]
 800b958:	ed96 6b02 	vldr	d6, [r6, #8]
 800b95c:	ed96 7b00 	vldr	d7, [r6]
 800b960:	eeb0 5b46 	vmov.f64	d5, d6
 800b964:	eea4 5b07 	vfma.f64	d5, d4, d7
 800b968:	ed8d 5b00 	vstr	d5, [sp]
 800b96c:	ee35 6b46 	vsub.f64	d6, d5, d6
 800b970:	eeb0 5b44 	vmov.f64	d5, d4
 800b974:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b978:	ed96 7b04 	vldr	d7, [r6, #16]
 800b97c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800b980:	eea6 5b07 	vfma.f64	d5, d6, d7
 800b984:	eeb0 7b45 	vmov.f64	d7, d5
 800b988:	ed96 5b06 	vldr	d5, [r6, #24]
 800b98c:	1849      	adds	r1, r1, r1
 800b98e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800b992:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800b996:	eea6 7b05 	vfma.f64	d7, d6, d5
 800b99a:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800b99e:	ee33 3b07 	vadd.f64	d3, d3, d7
 800b9a2:	ee23 6b03 	vmul.f64	d6, d3, d3
 800b9a6:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800b9aa:	ed96 5b08 	vldr	d5, [r6, #32]
 800b9ae:	ee33 7b07 	vadd.f64	d7, d3, d7
 800b9b2:	1814      	adds	r4, r2, r0
 800b9b4:	0365      	lsls	r5, r4, #13
 800b9b6:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800b9ba:	eea3 5b04 	vfma.f64	d5, d3, d4
 800b9be:	eea6 7b05 	vfma.f64	d7, d6, d5
 800b9c2:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800b9c6:	ee26 6b06 	vmul.f64	d6, d6, d6
 800b9ca:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	eb10 0a04 	adds.w	sl, r0, r4
 800b9d4:	eea3 5b04 	vfma.f64	d5, d3, d4
 800b9d8:	eb45 0b0c 	adc.w	fp, r5, ip
 800b9dc:	eea6 7b05 	vfma.f64	d7, d6, d5
 800b9e0:	2f00      	cmp	r7, #0
 800b9e2:	d16a      	bne.n	800baba <pow+0x54a>
 800b9e4:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800b9e8:	4639      	mov	r1, r7
 800b9ea:	ea50 0301 	orrs.w	r3, r0, r1
 800b9ee:	f04f 0300 	mov.w	r3, #0
 800b9f2:	d115      	bne.n	800ba20 <pow+0x4b0>
 800b9f4:	eb1a 0303 	adds.w	r3, sl, r3
 800b9f8:	ee0b 3a10 	vmov	s22, r3
 800b9fc:	4b3b      	ldr	r3, [pc, #236]	; (800baec <pow+0x57c>)
 800b9fe:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800bad0 <pow+0x560>
 800ba02:	eb4b 0303 	adc.w	r3, fp, r3
 800ba06:	ee0b 3a90 	vmov	s23, r3
 800ba0a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800ba0e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800ba12:	b01b      	add	sp, #108	; 0x6c
 800ba14:	ecbd 8b0a 	vpop	{d8-d12}
 800ba18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1c:	f001 ba28 	b.w	800ce70 <__math_check_oflow>
 800ba20:	eb1a 0303 	adds.w	r3, sl, r3
 800ba24:	930a      	str	r3, [sp, #40]	; 0x28
 800ba26:	4b32      	ldr	r3, [pc, #200]	; (800baf0 <pow+0x580>)
 800ba28:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800ba2c:	eb4b 0303 	adc.w	r3, fp, r3
 800ba30:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba32:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800ba36:	ee27 6b05 	vmul.f64	d6, d7, d5
 800ba3a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800ba3e:	eeb0 3bc7 	vabs.f64	d3, d7
 800ba42:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800ba46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800bad8 <pow+0x568>
 800ba4e:	d52b      	bpl.n	800baa8 <pow+0x538>
 800ba50:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ba54:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ba58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba5c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800ba60:	ee35 6b06 	vadd.f64	d6, d5, d6
 800ba64:	bf48      	it	mi
 800ba66:	eeb0 4b43 	vmovmi.f64	d4, d3
 800ba6a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800ba6e:	ee34 5b43 	vsub.f64	d5, d4, d3
 800ba72:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ba76:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ba7a:	ee37 7b03 	vadd.f64	d7, d7, d3
 800ba7e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800ba82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ba86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba8a:	d105      	bne.n	800ba98 <pow+0x528>
 800ba8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ba8e:	463a      	mov	r2, r7
 800ba90:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800ba94:	ec43 2b17 	vmov	d7, r2, r3
 800ba98:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800ba9c:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800baa0:	ee26 6b00 	vmul.f64	d6, d6, d0
 800baa4:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800baa8:	ee27 0b00 	vmul.f64	d0, d7, d0
 800baac:	b01b      	add	sp, #108	; 0x6c
 800baae:	ecbd 8b0a 	vpop	{d8-d12}
 800bab2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab6:	f001 b9d2 	b.w	800ce5e <__math_check_uflow>
 800baba:	ec4b ab10 	vmov	d0, sl, fp
 800babe:	eea7 0b00 	vfma.f64	d0, d7, d0
 800bac2:	e5a3      	b.n	800b60c <pow+0x9c>
 800bac4:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800bae0 <pow+0x570>
 800bac8:	e5a0      	b.n	800b60c <pow+0x9c>
 800baca:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bace:	e59d      	b.n	800b60c <pow+0x9c>
 800bad0:	00000000 	.word	0x00000000
 800bad4:	7f000000 	.word	0x7f000000
 800bad8:	00000000 	.word	0x00000000
 800badc:	00100000 	.word	0x00100000
	...
 800bae8:	0800ea30 	.word	0x0800ea30
 800baec:	c0f00000 	.word	0xc0f00000
 800baf0:	3fe00000 	.word	0x3fe00000
 800baf4:	00000000 	.word	0x00000000

0800baf8 <cos>:
 800baf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bafa:	eeb0 7b40 	vmov.f64	d7, d0
 800bafe:	ee17 3a90 	vmov	r3, s15
 800bb02:	4a1f      	ldr	r2, [pc, #124]	; (800bb80 <cos+0x88>)
 800bb04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	dc04      	bgt.n	800bb16 <cos+0x1e>
 800bb0c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800bb78 <cos+0x80>
 800bb10:	f000 fcf2 	bl	800c4f8 <__kernel_cos>
 800bb14:	e004      	b.n	800bb20 <cos+0x28>
 800bb16:	4a1b      	ldr	r2, [pc, #108]	; (800bb84 <cos+0x8c>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	dd04      	ble.n	800bb26 <cos+0x2e>
 800bb1c:	ee30 0b40 	vsub.f64	d0, d0, d0
 800bb20:	b005      	add	sp, #20
 800bb22:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb26:	4668      	mov	r0, sp
 800bb28:	f000 faa2 	bl	800c070 <__ieee754_rem_pio2>
 800bb2c:	f000 0003 	and.w	r0, r0, #3
 800bb30:	2801      	cmp	r0, #1
 800bb32:	d007      	beq.n	800bb44 <cos+0x4c>
 800bb34:	2802      	cmp	r0, #2
 800bb36:	d00e      	beq.n	800bb56 <cos+0x5e>
 800bb38:	b9a0      	cbnz	r0, 800bb64 <cos+0x6c>
 800bb3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb3e:	ed9d 0b00 	vldr	d0, [sp]
 800bb42:	e7e5      	b.n	800bb10 <cos+0x18>
 800bb44:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb48:	ed9d 0b00 	vldr	d0, [sp]
 800bb4c:	f000 ffc0 	bl	800cad0 <__kernel_sin>
 800bb50:	eeb1 0b40 	vneg.f64	d0, d0
 800bb54:	e7e4      	b.n	800bb20 <cos+0x28>
 800bb56:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb5a:	ed9d 0b00 	vldr	d0, [sp]
 800bb5e:	f000 fccb 	bl	800c4f8 <__kernel_cos>
 800bb62:	e7f5      	b.n	800bb50 <cos+0x58>
 800bb64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb68:	ed9d 0b00 	vldr	d0, [sp]
 800bb6c:	2001      	movs	r0, #1
 800bb6e:	f000 ffaf 	bl	800cad0 <__kernel_sin>
 800bb72:	e7d5      	b.n	800bb20 <cos+0x28>
 800bb74:	f3af 8000 	nop.w
	...
 800bb80:	3fe921fb 	.word	0x3fe921fb
 800bb84:	7fefffff 	.word	0x7fefffff

0800bb88 <expf>:
 800bb88:	ee10 2a10 	vmov	r2, s0
 800bb8c:	b470      	push	{r4, r5, r6}
 800bb8e:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800bb92:	f240 442a 	movw	r4, #1066	; 0x42a
 800bb96:	42a3      	cmp	r3, r4
 800bb98:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800bb9c:	d92a      	bls.n	800bbf4 <expf+0x6c>
 800bb9e:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800bba2:	d059      	beq.n	800bc58 <expf+0xd0>
 800bba4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800bba8:	d303      	bcc.n	800bbb2 <expf+0x2a>
 800bbaa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bbae:	bc70      	pop	{r4, r5, r6}
 800bbb0:	4770      	bx	lr
 800bbb2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800bc60 <expf+0xd8>
 800bbb6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbbe:	dd03      	ble.n	800bbc8 <expf+0x40>
 800bbc0:	bc70      	pop	{r4, r5, r6}
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	f7ff bc8a 	b.w	800b4dc <__math_oflowf>
 800bbc8:	eddf 7a26 	vldr	s15, [pc, #152]	; 800bc64 <expf+0xdc>
 800bbcc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd4:	d503      	bpl.n	800bbde <expf+0x56>
 800bbd6:	bc70      	pop	{r4, r5, r6}
 800bbd8:	2000      	movs	r0, #0
 800bbda:	f7ff bc73 	b.w	800b4c4 <__math_uflowf>
 800bbde:	eddf 7a22 	vldr	s15, [pc, #136]	; 800bc68 <expf+0xe0>
 800bbe2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bbe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbea:	d503      	bpl.n	800bbf4 <expf+0x6c>
 800bbec:	bc70      	pop	{r4, r5, r6}
 800bbee:	2000      	movs	r0, #0
 800bbf0:	f7ff bc6e 	b.w	800b4d0 <__math_may_uflowf>
 800bbf4:	4b1d      	ldr	r3, [pc, #116]	; (800bc6c <expf+0xe4>)
 800bbf6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bbfa:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800bbfe:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800bc02:	eeb0 7b44 	vmov.f64	d7, d4
 800bc06:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bc0a:	ee17 5a10 	vmov	r5, s14
 800bc0e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800bc12:	f005 021f 	and.w	r2, r5, #31
 800bc16:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800bc1a:	e9d2 4600 	ldrd	r4, r6, [r2]
 800bc1e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800bc22:	ed93 4b50 	vldr	d4, [r3, #320]	; 0x140
 800bc26:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800bc2a:	eea4 0b07 	vfma.f64	d0, d4, d7
 800bc2e:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800bc32:	2300      	movs	r3, #0
 800bc34:	1918      	adds	r0, r3, r4
 800bc36:	ea4f 32c5 	mov.w	r2, r5, lsl #15
 800bc3a:	eb42 0106 	adc.w	r1, r2, r6
 800bc3e:	eea5 6b07 	vfma.f64	d6, d5, d7
 800bc42:	ee27 5b07 	vmul.f64	d5, d7, d7
 800bc46:	ec41 0b17 	vmov	d7, r0, r1
 800bc4a:	eea6 0b05 	vfma.f64	d0, d6, d5
 800bc4e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bc52:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bc56:	e7aa      	b.n	800bbae <expf+0x26>
 800bc58:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800bc70 <expf+0xe8>
 800bc5c:	e7a7      	b.n	800bbae <expf+0x26>
 800bc5e:	bf00      	nop
 800bc60:	42b17217 	.word	0x42b17217
 800bc64:	c2cff1b4 	.word	0xc2cff1b4
 800bc68:	c2ce8ecf 	.word	0xc2ce8ecf
 800bc6c:	0800e620 	.word	0x0800e620
 800bc70:	00000000 	.word	0x00000000

0800bc74 <sinf_poly>:
 800bc74:	07cb      	lsls	r3, r1, #31
 800bc76:	d412      	bmi.n	800bc9e <sinf_poly+0x2a>
 800bc78:	ee21 6b00 	vmul.f64	d6, d1, d0
 800bc7c:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800bc80:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800bc84:	eea5 7b01 	vfma.f64	d7, d5, d1
 800bc88:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800bc8c:	ee21 1b06 	vmul.f64	d1, d1, d6
 800bc90:	eea5 0b06 	vfma.f64	d0, d5, d6
 800bc94:	eea7 0b01 	vfma.f64	d0, d7, d1
 800bc98:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800bc9c:	4770      	bx	lr
 800bc9e:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800bca2:	ee21 6b01 	vmul.f64	d6, d1, d1
 800bca6:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800bcaa:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800bcae:	eea1 7b05 	vfma.f64	d7, d1, d5
 800bcb2:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800bcb6:	eea1 0b05 	vfma.f64	d0, d1, d5
 800bcba:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800bcbe:	ee21 1b06 	vmul.f64	d1, d1, d6
 800bcc2:	eea6 0b05 	vfma.f64	d0, d6, d5
 800bcc6:	e7e5      	b.n	800bc94 <sinf_poly+0x20>

0800bcc8 <sinf>:
 800bcc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcca:	ee10 4a10 	vmov	r4, s0
 800bcce:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800bcd2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800bcd6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800bcda:	eef0 7a40 	vmov.f32	s15, s0
 800bcde:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800bce2:	d218      	bcs.n	800bd16 <sinf+0x4e>
 800bce4:	ee26 1b06 	vmul.f64	d1, d6, d6
 800bce8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800bcec:	d20a      	bcs.n	800bd04 <sinf+0x3c>
 800bcee:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800bcf2:	d103      	bne.n	800bcfc <sinf+0x34>
 800bcf4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800bcf8:	ed8d 1a01 	vstr	s2, [sp, #4]
 800bcfc:	eeb0 0a67 	vmov.f32	s0, s15
 800bd00:	b003      	add	sp, #12
 800bd02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd04:	483e      	ldr	r0, [pc, #248]	; (800be00 <sinf+0x138>)
 800bd06:	eeb0 0b46 	vmov.f64	d0, d6
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	b003      	add	sp, #12
 800bd0e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bd12:	f7ff bfaf 	b.w	800bc74 <sinf_poly>
 800bd16:	f240 422e 	movw	r2, #1070	; 0x42e
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d824      	bhi.n	800bd68 <sinf+0xa0>
 800bd1e:	4b38      	ldr	r3, [pc, #224]	; (800be00 <sinf+0x138>)
 800bd20:	ed93 7b08 	vldr	d7, [r3, #32]
 800bd24:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bd28:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800bd2c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800bd30:	ee17 1a90 	vmov	r1, s15
 800bd34:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800bd38:	1609      	asrs	r1, r1, #24
 800bd3a:	ee07 1a90 	vmov	s15, r1
 800bd3e:	f001 0203 	and.w	r2, r1, #3
 800bd42:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800bd46:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800bd4a:	ed92 0b00 	vldr	d0, [r2]
 800bd4e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800bd52:	f011 0f02 	tst.w	r1, #2
 800bd56:	eea5 6b47 	vfms.f64	d6, d5, d7
 800bd5a:	bf08      	it	eq
 800bd5c:	4618      	moveq	r0, r3
 800bd5e:	ee26 1b06 	vmul.f64	d1, d6, d6
 800bd62:	ee20 0b06 	vmul.f64	d0, d0, d6
 800bd66:	e7d1      	b.n	800bd0c <sinf+0x44>
 800bd68:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800bd6c:	d23d      	bcs.n	800bdea <sinf+0x122>
 800bd6e:	4b25      	ldr	r3, [pc, #148]	; (800be04 <sinf+0x13c>)
 800bd70:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800bd74:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800bd78:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800bd7c:	6a06      	ldr	r6, [r0, #32]
 800bd7e:	6900      	ldr	r0, [r0, #16]
 800bd80:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800bd84:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800bd88:	40a9      	lsls	r1, r5
 800bd8a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800bd8e:	fba1 6706 	umull	r6, r7, r1, r6
 800bd92:	fb05 f301 	mul.w	r3, r5, r1
 800bd96:	463a      	mov	r2, r7
 800bd98:	fbe0 2301 	umlal	r2, r3, r0, r1
 800bd9c:	1c11      	adds	r1, r2, #0
 800bd9e:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800bda2:	2000      	movs	r0, #0
 800bda4:	1a10      	subs	r0, r2, r0
 800bda6:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800bdaa:	eb63 0101 	sbc.w	r1, r3, r1
 800bdae:	f7f4 fc7d 	bl	80006ac <__aeabi_l2d>
 800bdb2:	0fb5      	lsrs	r5, r6, #30
 800bdb4:	4a12      	ldr	r2, [pc, #72]	; (800be00 <sinf+0x138>)
 800bdb6:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 800bdba:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800bdf8 <sinf+0x130>
 800bdbe:	ec41 0b17 	vmov	d7, r0, r1
 800bdc2:	f003 0103 	and.w	r1, r3, #3
 800bdc6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800bdca:	ee27 0b00 	vmul.f64	d0, d7, d0
 800bdce:	ed91 7b00 	vldr	d7, [r1]
 800bdd2:	ee20 1b00 	vmul.f64	d1, d0, d0
 800bdd6:	f013 0f02 	tst.w	r3, #2
 800bdda:	f102 0070 	add.w	r0, r2, #112	; 0x70
 800bdde:	4629      	mov	r1, r5
 800bde0:	bf08      	it	eq
 800bde2:	4610      	moveq	r0, r2
 800bde4:	ee27 0b00 	vmul.f64	d0, d7, d0
 800bde8:	e790      	b.n	800bd0c <sinf+0x44>
 800bdea:	b003      	add	sp, #12
 800bdec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800bdf0:	f7ff bb7a 	b.w	800b4e8 <__math_invalidf>
 800bdf4:	f3af 8000 	nop.w
 800bdf8:	54442d18 	.word	0x54442d18
 800bdfc:	3c1921fb 	.word	0x3c1921fb
 800be00:	0800e7c8 	.word	0x0800e7c8
 800be04:	0800e768 	.word	0x0800e768

0800be08 <log10>:
 800be08:	b508      	push	{r3, lr}
 800be0a:	ed2d 8b02 	vpush	{d8}
 800be0e:	eeb0 8b40 	vmov.f64	d8, d0
 800be12:	f000 f8b5 	bl	800bf80 <__ieee754_log10>
 800be16:	4b16      	ldr	r3, [pc, #88]	; (800be70 <log10+0x68>)
 800be18:	f993 3000 	ldrsb.w	r3, [r3]
 800be1c:	3301      	adds	r3, #1
 800be1e:	d014      	beq.n	800be4a <log10+0x42>
 800be20:	eeb4 8b48 	vcmp.f64	d8, d8
 800be24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be28:	d60f      	bvs.n	800be4a <log10+0x42>
 800be2a:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800be2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be32:	d80a      	bhi.n	800be4a <log10+0x42>
 800be34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800be38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be3c:	d108      	bne.n	800be50 <log10+0x48>
 800be3e:	f7fc fd29 	bl	8008894 <__errno>
 800be42:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800be68 <log10+0x60>
 800be46:	2322      	movs	r3, #34	; 0x22
 800be48:	6003      	str	r3, [r0, #0]
 800be4a:	ecbd 8b02 	vpop	{d8}
 800be4e:	bd08      	pop	{r3, pc}
 800be50:	f7fc fd20 	bl	8008894 <__errno>
 800be54:	ecbd 8b02 	vpop	{d8}
 800be58:	2321      	movs	r3, #33	; 0x21
 800be5a:	6003      	str	r3, [r0, #0]
 800be5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800be60:	4804      	ldr	r0, [pc, #16]	; (800be74 <log10+0x6c>)
 800be62:	f001 b899 	b.w	800cf98 <nan>
 800be66:	bf00      	nop
 800be68:	00000000 	.word	0x00000000
 800be6c:	fff00000 	.word	0xfff00000
 800be70:	240001e0 	.word	0x240001e0
 800be74:	0800d27d 	.word	0x0800d27d

0800be78 <sqrt>:
 800be78:	b508      	push	{r3, lr}
 800be7a:	ed2d 8b04 	vpush	{d8-d9}
 800be7e:	eeb0 8b40 	vmov.f64	d8, d0
 800be82:	f000 fa35 	bl	800c2f0 <__ieee754_sqrt>
 800be86:	4b10      	ldr	r3, [pc, #64]	; (800bec8 <sqrt+0x50>)
 800be88:	f993 3000 	ldrsb.w	r3, [r3]
 800be8c:	3301      	adds	r3, #1
 800be8e:	d011      	beq.n	800beb4 <sqrt+0x3c>
 800be90:	eeb4 8b48 	vcmp.f64	d8, d8
 800be94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be98:	d60c      	bvs.n	800beb4 <sqrt+0x3c>
 800be9a:	ed9f 9b09 	vldr	d9, [pc, #36]	; 800bec0 <sqrt+0x48>
 800be9e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800bea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea6:	d505      	bpl.n	800beb4 <sqrt+0x3c>
 800bea8:	f7fc fcf4 	bl	8008894 <__errno>
 800beac:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800beb0:	2321      	movs	r3, #33	; 0x21
 800beb2:	6003      	str	r3, [r0, #0]
 800beb4:	ecbd 8b04 	vpop	{d8-d9}
 800beb8:	bd08      	pop	{r3, pc}
 800beba:	bf00      	nop
 800bebc:	f3af 8000 	nop.w
	...
 800bec8:	240001e0 	.word	0x240001e0

0800becc <acosf>:
 800becc:	b508      	push	{r3, lr}
 800bece:	ed2d 8b02 	vpush	{d8}
 800bed2:	eeb0 8a40 	vmov.f32	s16, s0
 800bed6:	f000 fa0f 	bl	800c2f8 <__ieee754_acosf>
 800beda:	4b13      	ldr	r3, [pc, #76]	; (800bf28 <acosf+0x5c>)
 800bedc:	f993 3000 	ldrsb.w	r3, [r3]
 800bee0:	3301      	adds	r3, #1
 800bee2:	eef0 8a40 	vmov.f32	s17, s0
 800bee6:	d01a      	beq.n	800bf1e <acosf+0x52>
 800bee8:	eeb4 8a48 	vcmp.f32	s16, s16
 800beec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bef0:	d615      	bvs.n	800bf1e <acosf+0x52>
 800bef2:	eeb0 0a48 	vmov.f32	s0, s16
 800bef6:	f001 f8e9 	bl	800d0cc <fabsf>
 800befa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800befe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bf02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf06:	dd0a      	ble.n	800bf1e <acosf+0x52>
 800bf08:	f7fc fcc4 	bl	8008894 <__errno>
 800bf0c:	ecbd 8b02 	vpop	{d8}
 800bf10:	2321      	movs	r3, #33	; 0x21
 800bf12:	6003      	str	r3, [r0, #0]
 800bf14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800bf18:	4804      	ldr	r0, [pc, #16]	; (800bf2c <acosf+0x60>)
 800bf1a:	f001 b8df 	b.w	800d0dc <nanf>
 800bf1e:	eeb0 0a68 	vmov.f32	s0, s17
 800bf22:	ecbd 8b02 	vpop	{d8}
 800bf26:	bd08      	pop	{r3, pc}
 800bf28:	240001e0 	.word	0x240001e0
 800bf2c:	0800d27d 	.word	0x0800d27d

0800bf30 <sqrtf>:
 800bf30:	b508      	push	{r3, lr}
 800bf32:	ed2d 8b02 	vpush	{d8}
 800bf36:	eeb0 8a40 	vmov.f32	s16, s0
 800bf3a:	f000 fad7 	bl	800c4ec <__ieee754_sqrtf>
 800bf3e:	4b0d      	ldr	r3, [pc, #52]	; (800bf74 <sqrtf+0x44>)
 800bf40:	f993 3000 	ldrsb.w	r3, [r3]
 800bf44:	3301      	adds	r3, #1
 800bf46:	d011      	beq.n	800bf6c <sqrtf+0x3c>
 800bf48:	eeb4 8a48 	vcmp.f32	s16, s16
 800bf4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf50:	d60c      	bvs.n	800bf6c <sqrtf+0x3c>
 800bf52:	eddf 8a09 	vldr	s17, [pc, #36]	; 800bf78 <sqrtf+0x48>
 800bf56:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bf5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf5e:	d505      	bpl.n	800bf6c <sqrtf+0x3c>
 800bf60:	f7fc fc98 	bl	8008894 <__errno>
 800bf64:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bf68:	2321      	movs	r3, #33	; 0x21
 800bf6a:	6003      	str	r3, [r0, #0]
 800bf6c:	ecbd 8b02 	vpop	{d8}
 800bf70:	bd08      	pop	{r3, pc}
 800bf72:	bf00      	nop
 800bf74:	240001e0 	.word	0x240001e0
	...

0800bf80 <__ieee754_log10>:
 800bf80:	b510      	push	{r4, lr}
 800bf82:	ed2d 8b02 	vpush	{d8}
 800bf86:	b082      	sub	sp, #8
 800bf88:	ed8d 0b00 	vstr	d0, [sp]
 800bf8c:	9b01      	ldr	r3, [sp, #4]
 800bf8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf92:	da28      	bge.n	800bfe6 <__ieee754_log10+0x66>
 800bf94:	9900      	ldr	r1, [sp, #0]
 800bf96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bf9a:	430a      	orrs	r2, r1
 800bf9c:	d109      	bne.n	800bfb2 <__ieee754_log10+0x32>
 800bf9e:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800c038 <__ieee754_log10+0xb8>
 800bfa2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800c040 <__ieee754_log10+0xc0>
 800bfa6:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800bfaa:	b002      	add	sp, #8
 800bfac:	ecbd 8b02 	vpop	{d8}
 800bfb0:	bd10      	pop	{r4, pc}
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	da04      	bge.n	800bfc0 <__ieee754_log10+0x40>
 800bfb6:	ed9d 7b00 	vldr	d7, [sp]
 800bfba:	ee37 6b47 	vsub.f64	d6, d7, d7
 800bfbe:	e7f0      	b.n	800bfa2 <__ieee754_log10+0x22>
 800bfc0:	ed9d 6b00 	vldr	d6, [sp]
 800bfc4:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c048 <__ieee754_log10+0xc8>
 800bfc8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bfcc:	ed8d 7b00 	vstr	d7, [sp]
 800bfd0:	9b01      	ldr	r3, [sp, #4]
 800bfd2:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800bfd6:	4924      	ldr	r1, [pc, #144]	; (800c068 <__ieee754_log10+0xe8>)
 800bfd8:	428b      	cmp	r3, r1
 800bfda:	dd06      	ble.n	800bfea <__ieee754_log10+0x6a>
 800bfdc:	ed9d 7b00 	vldr	d7, [sp]
 800bfe0:	ee37 0b07 	vadd.f64	d0, d7, d7
 800bfe4:	e7e1      	b.n	800bfaa <__ieee754_log10+0x2a>
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	e7f5      	b.n	800bfd6 <__ieee754_log10+0x56>
 800bfea:	1518      	asrs	r0, r3, #20
 800bfec:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800bff0:	4410      	add	r0, r2
 800bff2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800bff6:	eb00 73d0 	add.w	r3, r0, r0, lsr #31
 800bffa:	ee08 3a10 	vmov	s16, r3
 800bffe:	f240 34ff 	movw	r4, #1023	; 0x3ff
 800c002:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c006:	eba4 70d0 	sub.w	r0, r4, r0, lsr #31
 800c00a:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800c00e:	ec43 2b10 	vmov	d0, r2, r3
 800c012:	f000 fdb5 	bl	800cb80 <log>
 800c016:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800c050 <__ieee754_log10+0xd0>
 800c01a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c01e:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800c058 <__ieee754_log10+0xd8>
 800c022:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
 800c026:	eea8 0b07 	vfma.f64	d0, d8, d7
 800c02a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800c060 <__ieee754_log10+0xe0>
 800c02e:	eea8 0b07 	vfma.f64	d0, d8, d7
 800c032:	e7ba      	b.n	800bfaa <__ieee754_log10+0x2a>
 800c034:	f3af 8000 	nop.w
 800c038:	00000000 	.word	0x00000000
 800c03c:	c3500000 	.word	0xc3500000
	...
 800c04c:	43500000 	.word	0x43500000
 800c050:	1526e50e 	.word	0x1526e50e
 800c054:	3fdbcb7b 	.word	0x3fdbcb7b
 800c058:	11f12b36 	.word	0x11f12b36
 800c05c:	3d59fef3 	.word	0x3d59fef3
 800c060:	509f6000 	.word	0x509f6000
 800c064:	3fd34413 	.word	0x3fd34413
 800c068:	7fefffff 	.word	0x7fefffff
 800c06c:	00000000 	.word	0x00000000

0800c070 <__ieee754_rem_pio2>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	eeb0 7b40 	vmov.f64	d7, d0
 800c076:	ee17 5a90 	vmov	r5, s15
 800c07a:	4b97      	ldr	r3, [pc, #604]	; (800c2d8 <__ieee754_rem_pio2+0x268>)
 800c07c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c080:	429e      	cmp	r6, r3
 800c082:	b088      	sub	sp, #32
 800c084:	4604      	mov	r4, r0
 800c086:	dc07      	bgt.n	800c098 <__ieee754_rem_pio2+0x28>
 800c088:	2200      	movs	r2, #0
 800c08a:	2300      	movs	r3, #0
 800c08c:	ed84 0b00 	vstr	d0, [r4]
 800c090:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c094:	2000      	movs	r0, #0
 800c096:	e01b      	b.n	800c0d0 <__ieee754_rem_pio2+0x60>
 800c098:	4b90      	ldr	r3, [pc, #576]	; (800c2dc <__ieee754_rem_pio2+0x26c>)
 800c09a:	429e      	cmp	r6, r3
 800c09c:	dc3b      	bgt.n	800c116 <__ieee754_rem_pio2+0xa6>
 800c09e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800c0a2:	2d00      	cmp	r5, #0
 800c0a4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800c298 <__ieee754_rem_pio2+0x228>
 800c0a8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800c0ac:	dd19      	ble.n	800c0e2 <__ieee754_rem_pio2+0x72>
 800c0ae:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c0b2:	429e      	cmp	r6, r3
 800c0b4:	d00e      	beq.n	800c0d4 <__ieee754_rem_pio2+0x64>
 800c0b6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800c2a0 <__ieee754_rem_pio2+0x230>
 800c0ba:	ee37 5b46 	vsub.f64	d5, d7, d6
 800c0be:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c0c2:	ed84 5b00 	vstr	d5, [r4]
 800c0c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c0ca:	ed84 7b02 	vstr	d7, [r4, #8]
 800c0ce:	2001      	movs	r0, #1
 800c0d0:	b008      	add	sp, #32
 800c0d2:	bd70      	pop	{r4, r5, r6, pc}
 800c0d4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800c2a8 <__ieee754_rem_pio2+0x238>
 800c0d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c0dc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800c2b0 <__ieee754_rem_pio2+0x240>
 800c0e0:	e7eb      	b.n	800c0ba <__ieee754_rem_pio2+0x4a>
 800c0e2:	429e      	cmp	r6, r3
 800c0e4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c0e8:	d00e      	beq.n	800c108 <__ieee754_rem_pio2+0x98>
 800c0ea:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800c2a0 <__ieee754_rem_pio2+0x230>
 800c0ee:	ee37 5b06 	vadd.f64	d5, d7, d6
 800c0f2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c0f6:	ed84 5b00 	vstr	d5, [r4]
 800c0fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c0fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c102:	ed84 7b02 	vstr	d7, [r4, #8]
 800c106:	e7e3      	b.n	800c0d0 <__ieee754_rem_pio2+0x60>
 800c108:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800c2a8 <__ieee754_rem_pio2+0x238>
 800c10c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c110:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800c2b0 <__ieee754_rem_pio2+0x240>
 800c114:	e7eb      	b.n	800c0ee <__ieee754_rem_pio2+0x7e>
 800c116:	4b72      	ldr	r3, [pc, #456]	; (800c2e0 <__ieee754_rem_pio2+0x270>)
 800c118:	429e      	cmp	r6, r3
 800c11a:	dc6e      	bgt.n	800c1fa <__ieee754_rem_pio2+0x18a>
 800c11c:	f000 febc 	bl	800ce98 <fabs>
 800c120:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c124:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800c2b8 <__ieee754_rem_pio2+0x248>
 800c128:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c12c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c130:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c134:	ee17 0a90 	vmov	r0, s15
 800c138:	eeb1 4b45 	vneg.f64	d4, d5
 800c13c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800c298 <__ieee754_rem_pio2+0x228>
 800c140:	eea5 0b47 	vfms.f64	d0, d5, d7
 800c144:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800c2a0 <__ieee754_rem_pio2+0x230>
 800c148:	281f      	cmp	r0, #31
 800c14a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c14e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c152:	dc08      	bgt.n	800c166 <__ieee754_rem_pio2+0xf6>
 800c154:	4b63      	ldr	r3, [pc, #396]	; (800c2e4 <__ieee754_rem_pio2+0x274>)
 800c156:	1e42      	subs	r2, r0, #1
 800c158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15c:	42b3      	cmp	r3, r6
 800c15e:	d002      	beq.n	800c166 <__ieee754_rem_pio2+0xf6>
 800c160:	ed84 6b00 	vstr	d6, [r4]
 800c164:	e024      	b.n	800c1b0 <__ieee754_rem_pio2+0x140>
 800c166:	ee16 3a90 	vmov	r3, s13
 800c16a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c16e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800c172:	2b10      	cmp	r3, #16
 800c174:	ea4f 5226 	mov.w	r2, r6, asr #20
 800c178:	ddf2      	ble.n	800c160 <__ieee754_rem_pio2+0xf0>
 800c17a:	eeb0 6b40 	vmov.f64	d6, d0
 800c17e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800c2a8 <__ieee754_rem_pio2+0x238>
 800c182:	eea4 6b03 	vfma.f64	d6, d4, d3
 800c186:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c18a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c18e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800c2b0 <__ieee754_rem_pio2+0x240>
 800c192:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800c196:	ee36 3b47 	vsub.f64	d3, d6, d7
 800c19a:	ee13 3a90 	vmov	r3, s7
 800c19e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	2b31      	cmp	r3, #49	; 0x31
 800c1a6:	dc17      	bgt.n	800c1d8 <__ieee754_rem_pio2+0x168>
 800c1a8:	eeb0 0b46 	vmov.f64	d0, d6
 800c1ac:	ed84 3b00 	vstr	d3, [r4]
 800c1b0:	ed94 6b00 	vldr	d6, [r4]
 800c1b4:	2d00      	cmp	r5, #0
 800c1b6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c1ba:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c1be:	ed84 7b02 	vstr	d7, [r4, #8]
 800c1c2:	da85      	bge.n	800c0d0 <__ieee754_rem_pio2+0x60>
 800c1c4:	eeb1 6b46 	vneg.f64	d6, d6
 800c1c8:	ed84 6b00 	vstr	d6, [r4]
 800c1cc:	eeb1 7b47 	vneg.f64	d7, d7
 800c1d0:	4240      	negs	r0, r0
 800c1d2:	ed84 7b02 	vstr	d7, [r4, #8]
 800c1d6:	e77b      	b.n	800c0d0 <__ieee754_rem_pio2+0x60>
 800c1d8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800c2c0 <__ieee754_rem_pio2+0x250>
 800c1dc:	eeb0 0b46 	vmov.f64	d0, d6
 800c1e0:	eea4 0b03 	vfma.f64	d0, d4, d3
 800c1e4:	ee36 7b40 	vsub.f64	d7, d6, d0
 800c1e8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800c2c8 <__ieee754_rem_pio2+0x258>
 800c1ec:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c1f0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800c1f4:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c1f8:	e7b2      	b.n	800c160 <__ieee754_rem_pio2+0xf0>
 800c1fa:	4b3b      	ldr	r3, [pc, #236]	; (800c2e8 <__ieee754_rem_pio2+0x278>)
 800c1fc:	429e      	cmp	r6, r3
 800c1fe:	dd06      	ble.n	800c20e <__ieee754_rem_pio2+0x19e>
 800c200:	ee30 7b40 	vsub.f64	d7, d0, d0
 800c204:	ed80 7b02 	vstr	d7, [r0, #8]
 800c208:	ed80 7b00 	vstr	d7, [r0]
 800c20c:	e742      	b.n	800c094 <__ieee754_rem_pio2+0x24>
 800c20e:	1532      	asrs	r2, r6, #20
 800c210:	ee10 0a10 	vmov	r0, s0
 800c214:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800c218:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c21c:	ec41 0b17 	vmov	d7, r0, r1
 800c220:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c224:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800c2d0 <__ieee754_rem_pio2+0x260>
 800c228:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c22c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c230:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c234:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c238:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c23c:	a902      	add	r1, sp, #8
 800c23e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c242:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c246:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c24a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c24e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c252:	2603      	movs	r6, #3
 800c254:	4608      	mov	r0, r1
 800c256:	ed91 7b04 	vldr	d7, [r1, #16]
 800c25a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c262:	4633      	mov	r3, r6
 800c264:	f1a1 0108 	sub.w	r1, r1, #8
 800c268:	f106 36ff 	add.w	r6, r6, #4294967295
 800c26c:	d0f3      	beq.n	800c256 <__ieee754_rem_pio2+0x1e6>
 800c26e:	491f      	ldr	r1, [pc, #124]	; (800c2ec <__ieee754_rem_pio2+0x27c>)
 800c270:	9101      	str	r1, [sp, #4]
 800c272:	2102      	movs	r1, #2
 800c274:	9100      	str	r1, [sp, #0]
 800c276:	4621      	mov	r1, r4
 800c278:	f000 f9aa 	bl	800c5d0 <__kernel_rem_pio2>
 800c27c:	2d00      	cmp	r5, #0
 800c27e:	f6bf af27 	bge.w	800c0d0 <__ieee754_rem_pio2+0x60>
 800c282:	ed94 7b00 	vldr	d7, [r4]
 800c286:	eeb1 7b47 	vneg.f64	d7, d7
 800c28a:	ed84 7b00 	vstr	d7, [r4]
 800c28e:	ed94 7b02 	vldr	d7, [r4, #8]
 800c292:	e79b      	b.n	800c1cc <__ieee754_rem_pio2+0x15c>
 800c294:	f3af 8000 	nop.w
 800c298:	54400000 	.word	0x54400000
 800c29c:	3ff921fb 	.word	0x3ff921fb
 800c2a0:	1a626331 	.word	0x1a626331
 800c2a4:	3dd0b461 	.word	0x3dd0b461
 800c2a8:	1a600000 	.word	0x1a600000
 800c2ac:	3dd0b461 	.word	0x3dd0b461
 800c2b0:	2e037073 	.word	0x2e037073
 800c2b4:	3ba3198a 	.word	0x3ba3198a
 800c2b8:	6dc9c883 	.word	0x6dc9c883
 800c2bc:	3fe45f30 	.word	0x3fe45f30
 800c2c0:	2e000000 	.word	0x2e000000
 800c2c4:	3ba3198a 	.word	0x3ba3198a
 800c2c8:	252049c1 	.word	0x252049c1
 800c2cc:	397b839a 	.word	0x397b839a
 800c2d0:	00000000 	.word	0x00000000
 800c2d4:	41700000 	.word	0x41700000
 800c2d8:	3fe921fb 	.word	0x3fe921fb
 800c2dc:	4002d97b 	.word	0x4002d97b
 800c2e0:	413921fb 	.word	0x413921fb
 800c2e4:	0800e8a8 	.word	0x0800e8a8
 800c2e8:	7fefffff 	.word	0x7fefffff
 800c2ec:	0800e928 	.word	0x0800e928

0800c2f0 <__ieee754_sqrt>:
 800c2f0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800c2f4:	4770      	bx	lr
	...

0800c2f8 <__ieee754_acosf>:
 800c2f8:	b508      	push	{r3, lr}
 800c2fa:	ee10 3a10 	vmov	r3, s0
 800c2fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c302:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c306:	ed2d 8b0c 	vpush	{d8-d13}
 800c30a:	d109      	bne.n	800c320 <__ieee754_acosf+0x28>
 800c30c:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800c4a8 <__ieee754_acosf+0x1b0>
 800c310:	ed9f 8a66 	vldr	s16, [pc, #408]	; 800c4ac <__ieee754_acosf+0x1b4>
 800c314:	2b00      	cmp	r3, #0
 800c316:	fe30 0a08 	vselgt.f32	s0, s0, s16
 800c31a:	ecbd 8b0c 	vpop	{d8-d13}
 800c31e:	bd08      	pop	{r3, pc}
 800c320:	dd04      	ble.n	800c32c <__ieee754_acosf+0x34>
 800c322:	ee30 8a40 	vsub.f32	s16, s0, s0
 800c326:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c32a:	e7f6      	b.n	800c31a <__ieee754_acosf+0x22>
 800c32c:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800c330:	da3e      	bge.n	800c3b0 <__ieee754_acosf+0xb8>
 800c332:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800c336:	f340 80b3 	ble.w	800c4a0 <__ieee754_acosf+0x1a8>
 800c33a:	ee60 7a00 	vmul.f32	s15, s0, s0
 800c33e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800c4b0 <__ieee754_acosf+0x1b8>
 800c342:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800c4b4 <__ieee754_acosf+0x1bc>
 800c346:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 800c4b8 <__ieee754_acosf+0x1c0>
 800c34a:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 800c4bc <__ieee754_acosf+0x1c4>
 800c34e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c352:	eddf 6a5b 	vldr	s13, [pc, #364]	; 800c4c0 <__ieee754_acosf+0x1c8>
 800c356:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c35a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800c4c4 <__ieee754_acosf+0x1cc>
 800c35e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c362:	eddf 6a59 	vldr	s13, [pc, #356]	; 800c4c8 <__ieee754_acosf+0x1d0>
 800c366:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c36a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800c4cc <__ieee754_acosf+0x1d4>
 800c36e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c372:	eddf 6a57 	vldr	s13, [pc, #348]	; 800c4d0 <__ieee754_acosf+0x1d8>
 800c376:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800c37a:	eddf 6a56 	vldr	s13, [pc, #344]	; 800c4d4 <__ieee754_acosf+0x1dc>
 800c37e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c382:	ed9f 6a55 	vldr	s12, [pc, #340]	; 800c4d8 <__ieee754_acosf+0x1e0>
 800c386:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800c38a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c38e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c392:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c396:	eef0 7a66 	vmov.f32	s15, s13
 800c39a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c39e:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800c4dc <__ieee754_acosf+0x1e4>
 800c3a2:	eea0 8a66 	vfms.f32	s16, s0, s13
 800c3a6:	ee30 0a48 	vsub.f32	s0, s0, s16
 800c3aa:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c3ae:	e7b4      	b.n	800c31a <__ieee754_acosf+0x22>
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	eddf da3f 	vldr	s27, [pc, #252]	; 800c4b0 <__ieee754_acosf+0x1b8>
 800c3b6:	eddf ca3f 	vldr	s25, [pc, #252]	; 800c4b4 <__ieee754_acosf+0x1bc>
 800c3ba:	ed9f ca41 	vldr	s24, [pc, #260]	; 800c4c0 <__ieee754_acosf+0x1c8>
 800c3be:	eddf ba41 	vldr	s23, [pc, #260]	; 800c4c4 <__ieee754_acosf+0x1cc>
 800c3c2:	ed9f ba41 	vldr	s22, [pc, #260]	; 800c4c8 <__ieee754_acosf+0x1d0>
 800c3c6:	eddf 8a41 	vldr	s17, [pc, #260]	; 800c4cc <__ieee754_acosf+0x1d4>
 800c3ca:	ed9f da41 	vldr	s26, [pc, #260]	; 800c4d0 <__ieee754_acosf+0x1d8>
 800c3ce:	eddf aa3a 	vldr	s21, [pc, #232]	; 800c4b8 <__ieee754_acosf+0x1c0>
 800c3d2:	ed9f aa40 	vldr	s20, [pc, #256]	; 800c4d4 <__ieee754_acosf+0x1dc>
 800c3d6:	eddf 9a40 	vldr	s19, [pc, #256]	; 800c4d8 <__ieee754_acosf+0x1e0>
 800c3da:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c3de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c3e2:	da28      	bge.n	800c436 <__ieee754_acosf+0x13e>
 800c3e4:	ee30 0a09 	vadd.f32	s0, s0, s18
 800c3e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c3ec:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800c3f0:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800c3f4:	eeac ca80 	vfma.f32	s24, s25, s0
 800c3f8:	eeaa aa80 	vfma.f32	s20, s21, s0
 800c3fc:	eeec ba00 	vfma.f32	s23, s24, s0
 800c400:	eeea 9a00 	vfma.f32	s19, s20, s0
 800c404:	eeab ba80 	vfma.f32	s22, s23, s0
 800c408:	eea9 9a80 	vfma.f32	s18, s19, s0
 800c40c:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800c410:	ee68 8a80 	vmul.f32	s17, s17, s0
 800c414:	f000 f86a 	bl	800c4ec <__ieee754_sqrtf>
 800c418:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800c41c:	eddf 7a30 	vldr	s15, [pc, #192]	; 800c4e0 <__ieee754_acosf+0x1e8>
 800c420:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c424:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c428:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c42c:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800c4e4 <__ieee754_acosf+0x1ec>
 800c430:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c434:	e771      	b.n	800c31a <__ieee754_acosf+0x22>
 800c436:	ee39 8a40 	vsub.f32	s16, s18, s0
 800c43a:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c43e:	eeb0 0a48 	vmov.f32	s0, s16
 800c442:	f000 f853 	bl	800c4ec <__ieee754_sqrtf>
 800c446:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800c44a:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800c44e:	eeac ca88 	vfma.f32	s24, s25, s16
 800c452:	eeaa aa88 	vfma.f32	s20, s21, s16
 800c456:	eeec ba08 	vfma.f32	s23, s24, s16
 800c45a:	ee10 3a10 	vmov	r3, s0
 800c45e:	eeab ba88 	vfma.f32	s22, s23, s16
 800c462:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c466:	f023 030f 	bic.w	r3, r3, #15
 800c46a:	eeea 9a08 	vfma.f32	s19, s20, s16
 800c46e:	ee07 3a90 	vmov	s15, r3
 800c472:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800c476:	eeb0 6a48 	vmov.f32	s12, s16
 800c47a:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800c47e:	eea9 9a88 	vfma.f32	s18, s19, s16
 800c482:	ee70 6a27 	vadd.f32	s13, s0, s15
 800c486:	ee68 8a88 	vmul.f32	s17, s17, s16
 800c48a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c48e:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800c492:	eea0 7a26 	vfma.f32	s14, s0, s13
 800c496:	ee37 0a87 	vadd.f32	s0, s15, s14
 800c49a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c49e:	e73c      	b.n	800c31a <__ieee754_acosf+0x22>
 800c4a0:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800c4e8 <__ieee754_acosf+0x1f0>
 800c4a4:	e739      	b.n	800c31a <__ieee754_acosf+0x22>
 800c4a6:	bf00      	nop
 800c4a8:	00000000 	.word	0x00000000
 800c4ac:	40490fdb 	.word	0x40490fdb
 800c4b0:	3811ef08 	.word	0x3811ef08
 800c4b4:	3a4f7f04 	.word	0x3a4f7f04
 800c4b8:	bf303361 	.word	0xbf303361
 800c4bc:	33a22168 	.word	0x33a22168
 800c4c0:	bd241146 	.word	0xbd241146
 800c4c4:	3e4e0aa8 	.word	0x3e4e0aa8
 800c4c8:	bea6b090 	.word	0xbea6b090
 800c4cc:	3e2aaaab 	.word	0x3e2aaaab
 800c4d0:	3d9dc62e 	.word	0x3d9dc62e
 800c4d4:	4001572d 	.word	0x4001572d
 800c4d8:	c019d139 	.word	0xc019d139
 800c4dc:	3fc90fda 	.word	0x3fc90fda
 800c4e0:	b3a22168 	.word	0xb3a22168
 800c4e4:	40490fda 	.word	0x40490fda
 800c4e8:	3fc90fdb 	.word	0x3fc90fdb

0800c4ec <__ieee754_sqrtf>:
 800c4ec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c4f0:	4770      	bx	lr
 800c4f2:	0000      	movs	r0, r0
 800c4f4:	0000      	movs	r0, r0
	...

0800c4f8 <__kernel_cos>:
 800c4f8:	ee10 1a90 	vmov	r1, s1
 800c4fc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c504:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800c508:	da05      	bge.n	800c516 <__kernel_cos+0x1e>
 800c50a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c50e:	ee17 3a90 	vmov	r3, s15
 800c512:	2b00      	cmp	r3, #0
 800c514:	d03d      	beq.n	800c592 <__kernel_cos+0x9a>
 800c516:	ee20 3b00 	vmul.f64	d3, d0, d0
 800c51a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800c598 <__kernel_cos+0xa0>
 800c51e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c5a0 <__kernel_cos+0xa8>
 800c522:	eea3 6b07 	vfma.f64	d6, d3, d7
 800c526:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c5a8 <__kernel_cos+0xb0>
 800c52a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c52e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c5b0 <__kernel_cos+0xb8>
 800c532:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c536:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c5b8 <__kernel_cos+0xc0>
 800c53a:	4b23      	ldr	r3, [pc, #140]	; (800c5c8 <__kernel_cos+0xd0>)
 800c53c:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c540:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800c5c0 <__kernel_cos+0xc8>
 800c544:	4299      	cmp	r1, r3
 800c546:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c54a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c54e:	ee26 5b03 	vmul.f64	d5, d6, d3
 800c552:	ee23 7b07 	vmul.f64	d7, d3, d7
 800c556:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800c55a:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c55e:	dc04      	bgt.n	800c56a <__kernel_cos+0x72>
 800c560:	ee37 6b46 	vsub.f64	d6, d7, d6
 800c564:	ee34 0b46 	vsub.f64	d0, d4, d6
 800c568:	4770      	bx	lr
 800c56a:	4b18      	ldr	r3, [pc, #96]	; (800c5cc <__kernel_cos+0xd4>)
 800c56c:	4299      	cmp	r1, r3
 800c56e:	dc0d      	bgt.n	800c58c <__kernel_cos+0x94>
 800c570:	2200      	movs	r2, #0
 800c572:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800c576:	ec43 2b15 	vmov	d5, r2, r3
 800c57a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800c57e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c582:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c586:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c58a:	4770      	bx	lr
 800c58c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800c590:	e7f3      	b.n	800c57a <__kernel_cos+0x82>
 800c592:	eeb0 0b44 	vmov.f64	d0, d4
 800c596:	4770      	bx	lr
 800c598:	be8838d4 	.word	0xbe8838d4
 800c59c:	bda8fae9 	.word	0xbda8fae9
 800c5a0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c5a4:	3e21ee9e 	.word	0x3e21ee9e
 800c5a8:	809c52ad 	.word	0x809c52ad
 800c5ac:	be927e4f 	.word	0xbe927e4f
 800c5b0:	19cb1590 	.word	0x19cb1590
 800c5b4:	3efa01a0 	.word	0x3efa01a0
 800c5b8:	16c15177 	.word	0x16c15177
 800c5bc:	bf56c16c 	.word	0xbf56c16c
 800c5c0:	5555554c 	.word	0x5555554c
 800c5c4:	3fa55555 	.word	0x3fa55555
 800c5c8:	3fd33332 	.word	0x3fd33332
 800c5cc:	3fe90000 	.word	0x3fe90000

0800c5d0 <__kernel_rem_pio2>:
 800c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d4:	ed2d 8b06 	vpush	{d8-d10}
 800c5d8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800c5dc:	469b      	mov	fp, r3
 800c5de:	460f      	mov	r7, r1
 800c5e0:	4bcf      	ldr	r3, [pc, #828]	; (800c920 <__kernel_rem_pio2+0x350>)
 800c5e2:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800c5e4:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800c5e8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800c5ec:	9000      	str	r0, [sp, #0]
 800c5ee:	f112 0f14 	cmn.w	r2, #20
 800c5f2:	bfa8      	it	ge
 800c5f4:	2318      	movge	r3, #24
 800c5f6:	f10b 31ff 	add.w	r1, fp, #4294967295
 800c5fa:	bfb8      	it	lt
 800c5fc:	2300      	movlt	r3, #0
 800c5fe:	f06f 0417 	mvn.w	r4, #23
 800c602:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800c908 <__kernel_rem_pio2+0x338>
 800c606:	bfa4      	itt	ge
 800c608:	f1a2 0a03 	subge.w	sl, r2, #3
 800c60c:	fb9a f3f3 	sdivge	r3, sl, r3
 800c610:	fb03 4404 	mla	r4, r3, r4, r4
 800c614:	1a5d      	subs	r5, r3, r1
 800c616:	4414      	add	r4, r2
 800c618:	eb09 0601 	add.w	r6, r9, r1
 800c61c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800c620:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800c624:	2200      	movs	r2, #0
 800c626:	42b2      	cmp	r2, r6
 800c628:	dd12      	ble.n	800c650 <__kernel_rem_pio2+0x80>
 800c62a:	aa18      	add	r2, sp, #96	; 0x60
 800c62c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c630:	460e      	mov	r6, r1
 800c632:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800c636:	f1cb 0a01 	rsb	sl, fp, #1
 800c63a:	eb0a 0006 	add.w	r0, sl, r6
 800c63e:	4581      	cmp	r9, r0
 800c640:	db25      	blt.n	800c68e <__kernel_rem_pio2+0xbe>
 800c642:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800c908 <__kernel_rem_pio2+0x338>
 800c646:	f8dd e000 	ldr.w	lr, [sp]
 800c64a:	4615      	mov	r5, r2
 800c64c:	2000      	movs	r0, #0
 800c64e:	e015      	b.n	800c67c <__kernel_rem_pio2+0xac>
 800c650:	42d5      	cmn	r5, r2
 800c652:	d409      	bmi.n	800c668 <__kernel_rem_pio2+0x98>
 800c654:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800c658:	ee07 0a90 	vmov	s15, r0
 800c65c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c660:	eca8 7b02 	vstmia	r8!, {d7}
 800c664:	3201      	adds	r2, #1
 800c666:	e7de      	b.n	800c626 <__kernel_rem_pio2+0x56>
 800c668:	eeb0 7b46 	vmov.f64	d7, d6
 800c66c:	e7f8      	b.n	800c660 <__kernel_rem_pio2+0x90>
 800c66e:	ecbe 5b02 	vldmia	lr!, {d5}
 800c672:	ed95 6b00 	vldr	d6, [r5]
 800c676:	3001      	adds	r0, #1
 800c678:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c67c:	4288      	cmp	r0, r1
 800c67e:	f1a5 0508 	sub.w	r5, r5, #8
 800c682:	ddf4      	ble.n	800c66e <__kernel_rem_pio2+0x9e>
 800c684:	eca8 7b02 	vstmia	r8!, {d7}
 800c688:	3208      	adds	r2, #8
 800c68a:	3601      	adds	r6, #1
 800c68c:	e7d5      	b.n	800c63a <__kernel_rem_pio2+0x6a>
 800c68e:	aa04      	add	r2, sp, #16
 800c690:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800c910 <__kernel_rem_pio2+0x340>
 800c694:	ed9f aba0 	vldr	d10, [pc, #640]	; 800c918 <__kernel_rem_pio2+0x348>
 800c698:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800c69c:	9201      	str	r2, [sp, #4]
 800c69e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800c6a2:	464e      	mov	r6, r9
 800c6a4:	ab90      	add	r3, sp, #576	; 0x240
 800c6a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c6aa:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800c6ae:	ab04      	add	r3, sp, #16
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	4632      	mov	r2, r6
 800c6b4:	2a00      	cmp	r2, #0
 800c6b6:	dc4e      	bgt.n	800c756 <__kernel_rem_pio2+0x186>
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800c6be:	f000 fc73 	bl	800cfa8 <scalbn>
 800c6c2:	eeb0 8b40 	vmov.f64	d8, d0
 800c6c6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800c6ca:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c6ce:	f000 fbef 	bl	800ceb0 <floor>
 800c6d2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800c6d6:	eea0 8b47 	vfms.f64	d8, d0, d7
 800c6da:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800c6de:	2c00      	cmp	r4, #0
 800c6e0:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800c6e4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800c6e8:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c6ec:	ee17 8a90 	vmov	r8, s15
 800c6f0:	dd46      	ble.n	800c780 <__kernel_rem_pio2+0x1b0>
 800c6f2:	1e70      	subs	r0, r6, #1
 800c6f4:	aa04      	add	r2, sp, #16
 800c6f6:	f1c4 0c18 	rsb	ip, r4, #24
 800c6fa:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800c6fe:	fa45 f20c 	asr.w	r2, r5, ip
 800c702:	4490      	add	r8, r2
 800c704:	fa02 f20c 	lsl.w	r2, r2, ip
 800c708:	1aad      	subs	r5, r5, r2
 800c70a:	aa04      	add	r2, sp, #16
 800c70c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800c710:	f1c4 0217 	rsb	r2, r4, #23
 800c714:	4115      	asrs	r5, r2
 800c716:	2d00      	cmp	r5, #0
 800c718:	dd41      	ble.n	800c79e <__kernel_rem_pio2+0x1ce>
 800c71a:	f04f 0c00 	mov.w	ip, #0
 800c71e:	f108 0801 	add.w	r8, r8, #1
 800c722:	4660      	mov	r0, ip
 800c724:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800c728:	4566      	cmp	r6, ip
 800c72a:	dc69      	bgt.n	800c800 <__kernel_rem_pio2+0x230>
 800c72c:	2c00      	cmp	r4, #0
 800c72e:	dd03      	ble.n	800c738 <__kernel_rem_pio2+0x168>
 800c730:	2c01      	cmp	r4, #1
 800c732:	d076      	beq.n	800c822 <__kernel_rem_pio2+0x252>
 800c734:	2c02      	cmp	r4, #2
 800c736:	d07f      	beq.n	800c838 <__kernel_rem_pio2+0x268>
 800c738:	2d02      	cmp	r5, #2
 800c73a:	d130      	bne.n	800c79e <__kernel_rem_pio2+0x1ce>
 800c73c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c740:	ee30 8b48 	vsub.f64	d8, d0, d8
 800c744:	b358      	cbz	r0, 800c79e <__kernel_rem_pio2+0x1ce>
 800c746:	4620      	mov	r0, r4
 800c748:	9102      	str	r1, [sp, #8]
 800c74a:	f000 fc2d 	bl	800cfa8 <scalbn>
 800c74e:	9902      	ldr	r1, [sp, #8]
 800c750:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c754:	e023      	b.n	800c79e <__kernel_rem_pio2+0x1ce>
 800c756:	ee20 7b09 	vmul.f64	d7, d0, d9
 800c75a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c75e:	3a01      	subs	r2, #1
 800c760:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c764:	ad68      	add	r5, sp, #416	; 0x1a0
 800c766:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800c76a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c76e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800c772:	eca0 0a01 	vstmia	r0!, {s0}
 800c776:	ed95 0b00 	vldr	d0, [r5]
 800c77a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c77e:	e799      	b.n	800c6b4 <__kernel_rem_pio2+0xe4>
 800c780:	d105      	bne.n	800c78e <__kernel_rem_pio2+0x1be>
 800c782:	1e72      	subs	r2, r6, #1
 800c784:	a804      	add	r0, sp, #16
 800c786:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800c78a:	15ed      	asrs	r5, r5, #23
 800c78c:	e7c3      	b.n	800c716 <__kernel_rem_pio2+0x146>
 800c78e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c792:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c79a:	da2f      	bge.n	800c7fc <__kernel_rem_pio2+0x22c>
 800c79c:	2500      	movs	r5, #0
 800c79e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a6:	f040 8087 	bne.w	800c8b8 <__kernel_rem_pio2+0x2e8>
 800c7aa:	1e73      	subs	r3, r6, #1
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f04f 0c00 	mov.w	ip, #0
 800c7b2:	4548      	cmp	r0, r9
 800c7b4:	da47      	bge.n	800c846 <__kernel_rem_pio2+0x276>
 800c7b6:	f1bc 0f00 	cmp.w	ip, #0
 800c7ba:	d070      	beq.n	800c89e <__kernel_rem_pio2+0x2ce>
 800c7bc:	aa04      	add	r2, sp, #16
 800c7be:	3c18      	subs	r4, #24
 800c7c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c7c4:	2a00      	cmp	r2, #0
 800c7c6:	d075      	beq.n	800c8b4 <__kernel_rem_pio2+0x2e4>
 800c7c8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	9300      	str	r3, [sp, #0]
 800c7d0:	f000 fbea 	bl	800cfa8 <scalbn>
 800c7d4:	9b00      	ldr	r3, [sp, #0]
 800c7d6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800c910 <__kernel_rem_pio2+0x340>
 800c7da:	461a      	mov	r2, r3
 800c7dc:	2a00      	cmp	r2, #0
 800c7de:	f280 80ac 	bge.w	800c93a <__kernel_rem_pio2+0x36a>
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	2900      	cmp	r1, #0
 800c7e8:	f2c0 80cd 	blt.w	800c986 <__kernel_rem_pio2+0x3b6>
 800c7ec:	aa68      	add	r2, sp, #416	; 0x1a0
 800c7ee:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800c7f2:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800c908 <__kernel_rem_pio2+0x338>
 800c7f6:	4e4b      	ldr	r6, [pc, #300]	; (800c924 <__kernel_rem_pio2+0x354>)
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	e0b8      	b.n	800c96e <__kernel_rem_pio2+0x39e>
 800c7fc:	2502      	movs	r5, #2
 800c7fe:	e78c      	b.n	800c71a <__kernel_rem_pio2+0x14a>
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	b948      	cbnz	r0, 800c818 <__kernel_rem_pio2+0x248>
 800c804:	b11a      	cbz	r2, 800c80e <__kernel_rem_pio2+0x23e>
 800c806:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800c80a:	601a      	str	r2, [r3, #0]
 800c80c:	2201      	movs	r2, #1
 800c80e:	f10c 0c01 	add.w	ip, ip, #1
 800c812:	3304      	adds	r3, #4
 800c814:	4610      	mov	r0, r2
 800c816:	e787      	b.n	800c728 <__kernel_rem_pio2+0x158>
 800c818:	ebae 0202 	sub.w	r2, lr, r2
 800c81c:	601a      	str	r2, [r3, #0]
 800c81e:	4602      	mov	r2, r0
 800c820:	e7f5      	b.n	800c80e <__kernel_rem_pio2+0x23e>
 800c822:	1e72      	subs	r2, r6, #1
 800c824:	ab04      	add	r3, sp, #16
 800c826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c82a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c82e:	f10d 0c10 	add.w	ip, sp, #16
 800c832:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800c836:	e77f      	b.n	800c738 <__kernel_rem_pio2+0x168>
 800c838:	1e72      	subs	r2, r6, #1
 800c83a:	ab04      	add	r3, sp, #16
 800c83c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c840:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c844:	e7f3      	b.n	800c82e <__kernel_rem_pio2+0x25e>
 800c846:	aa04      	add	r2, sp, #16
 800c848:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800c84c:	3801      	subs	r0, #1
 800c84e:	ea4c 0c02 	orr.w	ip, ip, r2
 800c852:	e7ae      	b.n	800c7b2 <__kernel_rem_pio2+0x1e2>
 800c854:	3001      	adds	r0, #1
 800c856:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c85a:	2a00      	cmp	r2, #0
 800c85c:	d0fa      	beq.n	800c854 <__kernel_rem_pio2+0x284>
 800c85e:	eb06 020b 	add.w	r2, r6, fp
 800c862:	ad18      	add	r5, sp, #96	; 0x60
 800c864:	1c73      	adds	r3, r6, #1
 800c866:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800c86a:	4406      	add	r6, r0
 800c86c:	429e      	cmp	r6, r3
 800c86e:	f6ff af19 	blt.w	800c6a4 <__kernel_rem_pio2+0xd4>
 800c872:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800c876:	9d00      	ldr	r5, [sp, #0]
 800c878:	ee07 0a90 	vmov	s15, r0
 800c87c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c880:	2000      	movs	r0, #0
 800c882:	eca2 7b02 	vstmia	r2!, {d7}
 800c886:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c908 <__kernel_rem_pio2+0x338>
 800c88a:	4694      	mov	ip, r2
 800c88c:	4288      	cmp	r0, r1
 800c88e:	dd09      	ble.n	800c8a4 <__kernel_rem_pio2+0x2d4>
 800c890:	a868      	add	r0, sp, #416	; 0x1a0
 800c892:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800c896:	ed80 7b00 	vstr	d7, [r0]
 800c89a:	3301      	adds	r3, #1
 800c89c:	e7e6      	b.n	800c86c <__kernel_rem_pio2+0x29c>
 800c89e:	9b01      	ldr	r3, [sp, #4]
 800c8a0:	2001      	movs	r0, #1
 800c8a2:	e7d8      	b.n	800c856 <__kernel_rem_pio2+0x286>
 800c8a4:	ecb5 5b02 	vldmia	r5!, {d5}
 800c8a8:	ed3c 6b02 	vldmdb	ip!, {d6}
 800c8ac:	3001      	adds	r0, #1
 800c8ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c8b2:	e7eb      	b.n	800c88c <__kernel_rem_pio2+0x2bc>
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	e781      	b.n	800c7bc <__kernel_rem_pio2+0x1ec>
 800c8b8:	4260      	negs	r0, r4
 800c8ba:	eeb0 0b48 	vmov.f64	d0, d8
 800c8be:	f000 fb73 	bl	800cfa8 <scalbn>
 800c8c2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800c918 <__kernel_rem_pio2+0x348>
 800c8c6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800c8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ce:	db2b      	blt.n	800c928 <__kernel_rem_pio2+0x358>
 800c8d0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800c910 <__kernel_rem_pio2+0x340>
 800c8d4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c8d8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c8dc:	aa04      	add	r2, sp, #16
 800c8de:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800c8e2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800c8e6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c8ea:	a904      	add	r1, sp, #16
 800c8ec:	ee10 3a10 	vmov	r3, s0
 800c8f0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c8f4:	ee17 2a10 	vmov	r2, s14
 800c8f8:	1c73      	adds	r3, r6, #1
 800c8fa:	3418      	adds	r4, #24
 800c8fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c900:	e762      	b.n	800c7c8 <__kernel_rem_pio2+0x1f8>
 800c902:	bf00      	nop
 800c904:	f3af 8000 	nop.w
	...
 800c914:	3e700000 	.word	0x3e700000
 800c918:	00000000 	.word	0x00000000
 800c91c:	41700000 	.word	0x41700000
 800c920:	0800f2e0 	.word	0x0800f2e0
 800c924:	0800f2a0 	.word	0x0800f2a0
 800c928:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c92c:	aa04      	add	r2, sp, #16
 800c92e:	ee10 3a10 	vmov	r3, s0
 800c932:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c936:	4633      	mov	r3, r6
 800c938:	e746      	b.n	800c7c8 <__kernel_rem_pio2+0x1f8>
 800c93a:	a804      	add	r0, sp, #16
 800c93c:	a968      	add	r1, sp, #416	; 0x1a0
 800c93e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c942:	9000      	str	r0, [sp, #0]
 800c944:	ee07 0a90 	vmov	s15, r0
 800c948:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c94c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c950:	3a01      	subs	r2, #1
 800c952:	ee27 7b00 	vmul.f64	d7, d7, d0
 800c956:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c95a:	ed81 7b00 	vstr	d7, [r1]
 800c95e:	e73d      	b.n	800c7dc <__kernel_rem_pio2+0x20c>
 800c960:	ecb6 5b02 	vldmia	r6!, {d5}
 800c964:	ecb4 6b02 	vldmia	r4!, {d6}
 800c968:	3201      	adds	r2, #1
 800c96a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c96e:	454a      	cmp	r2, r9
 800c970:	dc01      	bgt.n	800c976 <__kernel_rem_pio2+0x3a6>
 800c972:	4290      	cmp	r0, r2
 800c974:	daf4      	bge.n	800c960 <__kernel_rem_pio2+0x390>
 800c976:	aa40      	add	r2, sp, #256	; 0x100
 800c978:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c97c:	ed82 7b00 	vstr	d7, [r2]
 800c980:	3901      	subs	r1, #1
 800c982:	3001      	adds	r0, #1
 800c984:	e72f      	b.n	800c7e6 <__kernel_rem_pio2+0x216>
 800c986:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800c988:	2a02      	cmp	r2, #2
 800c98a:	dc0a      	bgt.n	800c9a2 <__kernel_rem_pio2+0x3d2>
 800c98c:	2a00      	cmp	r2, #0
 800c98e:	dc5a      	bgt.n	800ca46 <__kernel_rem_pio2+0x476>
 800c990:	d039      	beq.n	800ca06 <__kernel_rem_pio2+0x436>
 800c992:	f008 0007 	and.w	r0, r8, #7
 800c996:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800c99a:	ecbd 8b06 	vpop	{d8-d10}
 800c99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800c9a4:	2a03      	cmp	r2, #3
 800c9a6:	d1f4      	bne.n	800c992 <__kernel_rem_pio2+0x3c2>
 800c9a8:	aa40      	add	r2, sp, #256	; 0x100
 800c9aa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c9ae:	4611      	mov	r1, r2
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	2800      	cmp	r0, #0
 800c9b4:	f1a1 0108 	sub.w	r1, r1, #8
 800c9b8:	dc52      	bgt.n	800ca60 <__kernel_rem_pio2+0x490>
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	2901      	cmp	r1, #1
 800c9be:	f1a2 0208 	sub.w	r2, r2, #8
 800c9c2:	dc5d      	bgt.n	800ca80 <__kernel_rem_pio2+0x4b0>
 800c9c4:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800cac8 <__kernel_rem_pio2+0x4f8>
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	dc69      	bgt.n	800caa0 <__kernel_rem_pio2+0x4d0>
 800c9cc:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800c9d0:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800c9d4:	2d00      	cmp	r5, #0
 800c9d6:	d16c      	bne.n	800cab2 <__kernel_rem_pio2+0x4e2>
 800c9d8:	ed87 5b00 	vstr	d5, [r7]
 800c9dc:	ed87 6b02 	vstr	d6, [r7, #8]
 800c9e0:	ed87 7b04 	vstr	d7, [r7, #16]
 800c9e4:	e7d5      	b.n	800c992 <__kernel_rem_pio2+0x3c2>
 800c9e6:	aa40      	add	r2, sp, #256	; 0x100
 800c9e8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c9ec:	ed92 6b00 	vldr	d6, [r2]
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	daf5      	bge.n	800c9e6 <__kernel_rem_pio2+0x416>
 800c9fa:	b10d      	cbz	r5, 800ca00 <__kernel_rem_pio2+0x430>
 800c9fc:	eeb1 7b47 	vneg.f64	d7, d7
 800ca00:	ed87 7b00 	vstr	d7, [r7]
 800ca04:	e7c5      	b.n	800c992 <__kernel_rem_pio2+0x3c2>
 800ca06:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800cac8 <__kernel_rem_pio2+0x4f8>
 800ca0a:	e7f4      	b.n	800c9f6 <__kernel_rem_pio2+0x426>
 800ca0c:	a940      	add	r1, sp, #256	; 0x100
 800ca0e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ca12:	ed91 7b00 	vldr	d7, [r1]
 800ca16:	3a01      	subs	r2, #1
 800ca18:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ca1c:	2a00      	cmp	r2, #0
 800ca1e:	daf5      	bge.n	800ca0c <__kernel_rem_pio2+0x43c>
 800ca20:	b1ad      	cbz	r5, 800ca4e <__kernel_rem_pio2+0x47e>
 800ca22:	eeb1 7b46 	vneg.f64	d7, d6
 800ca26:	ed87 7b00 	vstr	d7, [r7]
 800ca2a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800ca2e:	a942      	add	r1, sp, #264	; 0x108
 800ca30:	2201      	movs	r2, #1
 800ca32:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ca36:	4293      	cmp	r3, r2
 800ca38:	da0c      	bge.n	800ca54 <__kernel_rem_pio2+0x484>
 800ca3a:	b10d      	cbz	r5, 800ca40 <__kernel_rem_pio2+0x470>
 800ca3c:	eeb1 7b47 	vneg.f64	d7, d7
 800ca40:	ed87 7b02 	vstr	d7, [r7, #8]
 800ca44:	e7a5      	b.n	800c992 <__kernel_rem_pio2+0x3c2>
 800ca46:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800cac8 <__kernel_rem_pio2+0x4f8>
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	e7e6      	b.n	800ca1c <__kernel_rem_pio2+0x44c>
 800ca4e:	eeb0 7b46 	vmov.f64	d7, d6
 800ca52:	e7e8      	b.n	800ca26 <__kernel_rem_pio2+0x456>
 800ca54:	ecb1 6b02 	vldmia	r1!, {d6}
 800ca58:	3201      	adds	r2, #1
 800ca5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ca5e:	e7ea      	b.n	800ca36 <__kernel_rem_pio2+0x466>
 800ca60:	ed91 7b00 	vldr	d7, [r1]
 800ca64:	ed91 5b02 	vldr	d5, [r1, #8]
 800ca68:	3801      	subs	r0, #1
 800ca6a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ca6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ca72:	ed81 6b00 	vstr	d6, [r1]
 800ca76:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ca7a:	ed81 7b02 	vstr	d7, [r1, #8]
 800ca7e:	e798      	b.n	800c9b2 <__kernel_rem_pio2+0x3e2>
 800ca80:	ed92 7b00 	vldr	d7, [r2]
 800ca84:	ed92 5b02 	vldr	d5, [r2, #8]
 800ca88:	3901      	subs	r1, #1
 800ca8a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ca8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ca92:	ed82 6b00 	vstr	d6, [r2]
 800ca96:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ca9a:	ed82 7b02 	vstr	d7, [r2, #8]
 800ca9e:	e78d      	b.n	800c9bc <__kernel_rem_pio2+0x3ec>
 800caa0:	aa40      	add	r2, sp, #256	; 0x100
 800caa2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800caa6:	ed92 6b00 	vldr	d6, [r2]
 800caaa:	3b01      	subs	r3, #1
 800caac:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cab0:	e78a      	b.n	800c9c8 <__kernel_rem_pio2+0x3f8>
 800cab2:	eeb1 5b45 	vneg.f64	d5, d5
 800cab6:	eeb1 6b46 	vneg.f64	d6, d6
 800caba:	ed87 5b00 	vstr	d5, [r7]
 800cabe:	eeb1 7b47 	vneg.f64	d7, d7
 800cac2:	ed87 6b02 	vstr	d6, [r7, #8]
 800cac6:	e78b      	b.n	800c9e0 <__kernel_rem_pio2+0x410>
	...

0800cad0 <__kernel_sin>:
 800cad0:	ee10 3a90 	vmov	r3, s1
 800cad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cad8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cadc:	da04      	bge.n	800cae8 <__kernel_sin+0x18>
 800cade:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800cae2:	ee17 3a90 	vmov	r3, s15
 800cae6:	b35b      	cbz	r3, 800cb40 <__kernel_sin+0x70>
 800cae8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800caec:	ee20 5b06 	vmul.f64	d5, d0, d6
 800caf0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800cb48 <__kernel_sin+0x78>
 800caf4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cb50 <__kernel_sin+0x80>
 800caf8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cafc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800cb58 <__kernel_sin+0x88>
 800cb00:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cb04:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cb60 <__kernel_sin+0x90>
 800cb08:	eea7 4b06 	vfma.f64	d4, d7, d6
 800cb0c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800cb68 <__kernel_sin+0x98>
 800cb10:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cb14:	b930      	cbnz	r0, 800cb24 <__kernel_sin+0x54>
 800cb16:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cb70 <__kernel_sin+0xa0>
 800cb1a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cb1e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800cb22:	4770      	bx	lr
 800cb24:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800cb28:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800cb2c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800cb30:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800cb34:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800cb78 <__kernel_sin+0xa8>
 800cb38:	eea5 1b07 	vfma.f64	d1, d5, d7
 800cb3c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	f3af 8000 	nop.w
 800cb48:	5acfd57c 	.word	0x5acfd57c
 800cb4c:	3de5d93a 	.word	0x3de5d93a
 800cb50:	8a2b9ceb 	.word	0x8a2b9ceb
 800cb54:	be5ae5e6 	.word	0xbe5ae5e6
 800cb58:	57b1fe7d 	.word	0x57b1fe7d
 800cb5c:	3ec71de3 	.word	0x3ec71de3
 800cb60:	19c161d5 	.word	0x19c161d5
 800cb64:	bf2a01a0 	.word	0xbf2a01a0
 800cb68:	1110f8a6 	.word	0x1110f8a6
 800cb6c:	3f811111 	.word	0x3f811111
 800cb70:	55555549 	.word	0x55555549
 800cb74:	bfc55555 	.word	0xbfc55555
 800cb78:	55555549 	.word	0x55555549
 800cb7c:	3fc55555 	.word	0x3fc55555

0800cb80 <log>:
 800cb80:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800cb84:	ed2d 8b02 	vpush	{d8}
 800cb88:	b082      	sub	sp, #8
 800cb8a:	ed8d 0b00 	vstr	d0, [sp]
 800cb8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb92:	2600      	movs	r6, #0
 800cb94:	1994      	adds	r4, r2, r6
 800cb96:	4e80      	ldr	r6, [pc, #512]	; (800cd98 <log+0x218>)
 800cb98:	4f80      	ldr	r7, [pc, #512]	; (800cd9c <log+0x21c>)
 800cb9a:	eb43 0506 	adc.w	r5, r3, r6
 800cb9e:	42af      	cmp	r7, r5
 800cba0:	f04f 36ff 	mov.w	r6, #4294967295
 800cba4:	bf08      	it	eq
 800cba6:	42a6      	cmpeq	r6, r4
 800cba8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800cbac:	d363      	bcc.n	800cc76 <log+0xf6>
 800cbae:	497c      	ldr	r1, [pc, #496]	; (800cda0 <log+0x220>)
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	428b      	cmp	r3, r1
 800cbb4:	bf08      	it	eq
 800cbb6:	4282      	cmpeq	r2, r0
 800cbb8:	f000 80de 	beq.w	800cd78 <log+0x1f8>
 800cbbc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800cbc0:	ee30 7b47 	vsub.f64	d7, d0, d7
 800cbc4:	4b77      	ldr	r3, [pc, #476]	; (800cda4 <log+0x224>)
 800cbc6:	ee27 1b07 	vmul.f64	d1, d7, d7
 800cbca:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800cbce:	ee27 3b01 	vmul.f64	d3, d7, d1
 800cbd2:	ed93 4b10 	vldr	d4, [r3, #64]	; 0x40
 800cbd6:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cbda:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800cbde:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800cbe2:	eea6 4b01 	vfma.f64	d4, d6, d1
 800cbe6:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800cbea:	eea5 6b07 	vfma.f64	d6, d5, d7
 800cbee:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800cbf2:	eea5 6b01 	vfma.f64	d6, d5, d1
 800cbf6:	ed93 5b1e 	vldr	d5, [r3, #120]	; 0x78
 800cbfa:	eeb0 2b46 	vmov.f64	d2, d6
 800cbfe:	ed93 6b1c 	vldr	d6, [r3, #112]	; 0x70
 800cc02:	eea5 6b07 	vfma.f64	d6, d5, d7
 800cc06:	ed93 5b20 	vldr	d5, [r3, #128]	; 0x80
 800cc0a:	eea5 6b01 	vfma.f64	d6, d5, d1
 800cc0e:	ed93 5b22 	vldr	d5, [r3, #136]	; 0x88
 800cc12:	ed93 1b0e 	vldr	d1, [r3, #56]	; 0x38
 800cc16:	eea5 6b03 	vfma.f64	d6, d5, d3
 800cc1a:	eea6 2b03 	vfma.f64	d2, d6, d3
 800cc1e:	ed9f 6b58 	vldr	d6, [pc, #352]	; 800cd80 <log+0x200>
 800cc22:	eea2 4b03 	vfma.f64	d4, d2, d3
 800cc26:	eeb0 2b47 	vmov.f64	d2, d7
 800cc2a:	eea7 2b06 	vfma.f64	d2, d7, d6
 800cc2e:	eea7 2b46 	vfms.f64	d2, d7, d6
 800cc32:	eeb0 6b47 	vmov.f64	d6, d7
 800cc36:	ee37 8b42 	vsub.f64	d8, d7, d2
 800cc3a:	ee22 0b02 	vmul.f64	d0, d2, d2
 800cc3e:	eea0 6b01 	vfma.f64	d6, d0, d1
 800cc42:	ee37 5b46 	vsub.f64	d5, d7, d6
 800cc46:	ee37 7b02 	vadd.f64	d7, d7, d2
 800cc4a:	eea0 5b01 	vfma.f64	d5, d0, d1
 800cc4e:	ee21 1b08 	vmul.f64	d1, d1, d8
 800cc52:	eea1 5b07 	vfma.f64	d5, d1, d7
 800cc56:	eeb0 7b45 	vmov.f64	d7, d5
 800cc5a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800cc5e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cc62:	ed8d 7b00 	vstr	d7, [sp]
 800cc66:	ed9d 0b00 	vldr	d0, [sp]
 800cc6a:	b002      	add	sp, #8
 800cc6c:	ecbd 8b02 	vpop	{d8}
 800cc70:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800cc74:	4770      	bx	lr
 800cc76:	f1ac 0510 	sub.w	r5, ip, #16
 800cc7a:	f647 74df 	movw	r4, #32735	; 0x7fdf
 800cc7e:	42a5      	cmp	r5, r4
 800cc80:	d930      	bls.n	800cce4 <log+0x164>
 800cc82:	1890      	adds	r0, r2, r2
 800cc84:	eb43 0103 	adc.w	r1, r3, r3
 800cc88:	4301      	orrs	r1, r0
 800cc8a:	d107      	bne.n	800cc9c <log+0x11c>
 800cc8c:	2001      	movs	r0, #1
 800cc8e:	b002      	add	sp, #8
 800cc90:	ecbd 8b02 	vpop	{d8}
 800cc94:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800cc98:	f000 b8ba 	b.w	800ce10 <__math_divzero>
 800cc9c:	4942      	ldr	r1, [pc, #264]	; (800cda8 <log+0x228>)
 800cc9e:	2000      	movs	r0, #0
 800cca0:	428b      	cmp	r3, r1
 800cca2:	bf08      	it	eq
 800cca4:	4282      	cmpeq	r2, r0
 800cca6:	d0de      	beq.n	800cc66 <log+0xe6>
 800cca8:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
 800ccac:	d104      	bne.n	800ccb8 <log+0x138>
 800ccae:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 800ccb2:	ea31 010c 	bics.w	r1, r1, ip
 800ccb6:	d108      	bne.n	800ccca <log+0x14a>
 800ccb8:	ed9d 0b00 	vldr	d0, [sp]
 800ccbc:	b002      	add	sp, #8
 800ccbe:	ecbd 8b02 	vpop	{d8}
 800ccc2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800ccc6:	f000 b8bb 	b.w	800ce40 <__math_invalid>
 800ccca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800cd88 <log+0x208>
 800ccce:	ed9d 6b00 	vldr	d6, [sp]
 800ccd2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ccd6:	ec56 5b17 	vmov	r5, r6, d7
 800ccda:	4834      	ldr	r0, [pc, #208]	; (800cdac <log+0x22c>)
 800ccdc:	2400      	movs	r4, #0
 800ccde:	192a      	adds	r2, r5, r4
 800cce0:	eb46 0300 	adc.w	r3, r6, r0
 800cce4:	2100      	movs	r1, #0
 800cce6:	1851      	adds	r1, r2, r1
 800cce8:	4931      	ldr	r1, [pc, #196]	; (800cdb0 <log+0x230>)
 800ccea:	eebf 4b00 	vmov.f64	d4, #240	; 0xbf800000 -1.0
 800ccee:	eb43 0101 	adc.w	r1, r3, r1
 800ccf2:	0d0c      	lsrs	r4, r1, #20
 800ccf4:	2500      	movs	r5, #0
 800ccf6:	ebb2 0805 	subs.w	r8, r2, r5
 800ccfa:	ea4f 5404 	mov.w	r4, r4, lsl #20
 800ccfe:	eb63 0904 	sbc.w	r9, r3, r4
 800cd02:	4b28      	ldr	r3, [pc, #160]	; (800cda4 <log+0x224>)
 800cd04:	f3c1 3046 	ubfx	r0, r1, #13, #7
 800cd08:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 800cd0c:	ed92 7b24 	vldr	d7, [r2, #144]	; 0x90
 800cd10:	ec49 8b16 	vmov	d6, r8, r9
 800cd14:	1509      	asrs	r1, r1, #20
 800cd16:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cd1a:	ee07 1a90 	vmov	s15, r1
 800cd1e:	ee24 1b04 	vmul.f64	d1, d4, d4
 800cd22:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800cd26:	ed93 5b00 	vldr	d5, [r3]
 800cd2a:	ee24 0b01 	vmul.f64	d0, d4, d1
 800cd2e:	ed93 3b02 	vldr	d3, [r3, #8]
 800cd32:	ed92 7b26 	vldr	d7, [r2, #152]	; 0x98
 800cd36:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cd3a:	ee34 5b07 	vadd.f64	d5, d4, d7
 800cd3e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800cd42:	ee37 7b04 	vadd.f64	d7, d7, d4
 800cd46:	eea3 7b06 	vfma.f64	d7, d3, d6
 800cd4a:	ed93 6b04 	vldr	d6, [r3, #16]
 800cd4e:	ed93 3b08 	vldr	d3, [r3, #32]
 800cd52:	eea6 7b01 	vfma.f64	d7, d6, d1
 800cd56:	ed93 6b06 	vldr	d6, [r3, #24]
 800cd5a:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800cd5e:	eea3 6b04 	vfma.f64	d6, d3, d4
 800cd62:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800cd66:	eea2 3b04 	vfma.f64	d3, d2, d4
 800cd6a:	eea3 6b01 	vfma.f64	d6, d3, d1
 800cd6e:	eea0 7b06 	vfma.f64	d7, d0, d6
 800cd72:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cd76:	e774      	b.n	800cc62 <log+0xe2>
 800cd78:	ed9f 7b05 	vldr	d7, [pc, #20]	; 800cd90 <log+0x210>
 800cd7c:	e771      	b.n	800cc62 <log+0xe2>
 800cd7e:	bf00      	nop
 800cd80:	00000000 	.word	0x00000000
 800cd84:	41a00000 	.word	0x41a00000
 800cd88:	00000000 	.word	0x00000000
 800cd8c:	43300000 	.word	0x43300000
	...
 800cd98:	c0120000 	.word	0xc0120000
 800cd9c:	000308ff 	.word	0x000308ff
 800cda0:	3ff00000 	.word	0x3ff00000
 800cda4:	0800f2f0 	.word	0x0800f2f0
 800cda8:	7ff00000 	.word	0x7ff00000
 800cdac:	fcc00000 	.word	0xfcc00000
 800cdb0:	c01a0000 	.word	0xc01a0000

0800cdb4 <with_errno>:
 800cdb4:	b513      	push	{r0, r1, r4, lr}
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	ed8d 0b00 	vstr	d0, [sp]
 800cdbc:	f7fb fd6a 	bl	8008894 <__errno>
 800cdc0:	ed9d 0b00 	vldr	d0, [sp]
 800cdc4:	6004      	str	r4, [r0, #0]
 800cdc6:	b002      	add	sp, #8
 800cdc8:	bd10      	pop	{r4, pc}

0800cdca <xflow>:
 800cdca:	b082      	sub	sp, #8
 800cdcc:	b158      	cbz	r0, 800cde6 <xflow+0x1c>
 800cdce:	eeb1 7b40 	vneg.f64	d7, d0
 800cdd2:	ed8d 7b00 	vstr	d7, [sp]
 800cdd6:	ed9d 7b00 	vldr	d7, [sp]
 800cdda:	2022      	movs	r0, #34	; 0x22
 800cddc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800cde0:	b002      	add	sp, #8
 800cde2:	f7ff bfe7 	b.w	800cdb4 <with_errno>
 800cde6:	eeb0 7b40 	vmov.f64	d7, d0
 800cdea:	e7f2      	b.n	800cdd2 <xflow+0x8>
 800cdec:	0000      	movs	r0, r0
	...

0800cdf0 <__math_uflow>:
 800cdf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cdf8 <__math_uflow+0x8>
 800cdf4:	f7ff bfe9 	b.w	800cdca <xflow>
 800cdf8:	00000000 	.word	0x00000000
 800cdfc:	10000000 	.word	0x10000000

0800ce00 <__math_oflow>:
 800ce00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ce08 <__math_oflow+0x8>
 800ce04:	f7ff bfe1 	b.w	800cdca <xflow>
 800ce08:	00000000 	.word	0x00000000
 800ce0c:	70000000 	.word	0x70000000

0800ce10 <__math_divzero>:
 800ce10:	b082      	sub	sp, #8
 800ce12:	2800      	cmp	r0, #0
 800ce14:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ce18:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800ce1c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800ce20:	ed8d 7b00 	vstr	d7, [sp]
 800ce24:	ed9d 0b00 	vldr	d0, [sp]
 800ce28:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800ce38 <__math_divzero+0x28>
 800ce2c:	2022      	movs	r0, #34	; 0x22
 800ce2e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800ce32:	b002      	add	sp, #8
 800ce34:	f7ff bfbe 	b.w	800cdb4 <with_errno>
	...

0800ce40 <__math_invalid>:
 800ce40:	eeb0 7b40 	vmov.f64	d7, d0
 800ce44:	eeb4 7b47 	vcmp.f64	d7, d7
 800ce48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce4c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800ce50:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800ce54:	d602      	bvs.n	800ce5c <__math_invalid+0x1c>
 800ce56:	2021      	movs	r0, #33	; 0x21
 800ce58:	f7ff bfac 	b.w	800cdb4 <with_errno>
 800ce5c:	4770      	bx	lr

0800ce5e <__math_check_uflow>:
 800ce5e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ce62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce66:	d102      	bne.n	800ce6e <__math_check_uflow+0x10>
 800ce68:	2022      	movs	r0, #34	; 0x22
 800ce6a:	f7ff bfa3 	b.w	800cdb4 <with_errno>
 800ce6e:	4770      	bx	lr

0800ce70 <__math_check_oflow>:
 800ce70:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800ce90 <__math_check_oflow+0x20>
 800ce74:	eeb0 7bc0 	vabs.f64	d7, d0
 800ce78:	eeb4 7b46 	vcmp.f64	d7, d6
 800ce7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce80:	dd02      	ble.n	800ce88 <__math_check_oflow+0x18>
 800ce82:	2022      	movs	r0, #34	; 0x22
 800ce84:	f7ff bf96 	b.w	800cdb4 <with_errno>
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	f3af 8000 	nop.w
 800ce90:	ffffffff 	.word	0xffffffff
 800ce94:	7fefffff 	.word	0x7fefffff

0800ce98 <fabs>:
 800ce98:	ec51 0b10 	vmov	r0, r1, d0
 800ce9c:	ee10 2a10 	vmov	r2, s0
 800cea0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cea4:	ec43 2b10 	vmov	d0, r2, r3
 800cea8:	4770      	bx	lr
 800ceaa:	0000      	movs	r0, r0
 800ceac:	0000      	movs	r0, r0
	...

0800ceb0 <floor>:
 800ceb0:	ee10 1a90 	vmov	r1, s1
 800ceb4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ceb8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800cebc:	2b13      	cmp	r3, #19
 800cebe:	b530      	push	{r4, r5, lr}
 800cec0:	ee10 0a10 	vmov	r0, s0
 800cec4:	ee10 5a10 	vmov	r5, s0
 800cec8:	dc31      	bgt.n	800cf2e <floor+0x7e>
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	da15      	bge.n	800cefa <floor+0x4a>
 800cece:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800cf88 <floor+0xd8>
 800ced2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ced6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ceda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cede:	dd07      	ble.n	800cef0 <floor+0x40>
 800cee0:	2900      	cmp	r1, #0
 800cee2:	da4e      	bge.n	800cf82 <floor+0xd2>
 800cee4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cee8:	4318      	orrs	r0, r3
 800ceea:	d001      	beq.n	800cef0 <floor+0x40>
 800ceec:	4928      	ldr	r1, [pc, #160]	; (800cf90 <floor+0xe0>)
 800ceee:	2000      	movs	r0, #0
 800cef0:	460b      	mov	r3, r1
 800cef2:	4602      	mov	r2, r0
 800cef4:	ec43 2b10 	vmov	d0, r2, r3
 800cef8:	e020      	b.n	800cf3c <floor+0x8c>
 800cefa:	4a26      	ldr	r2, [pc, #152]	; (800cf94 <floor+0xe4>)
 800cefc:	411a      	asrs	r2, r3
 800cefe:	ea01 0402 	and.w	r4, r1, r2
 800cf02:	4304      	orrs	r4, r0
 800cf04:	d01a      	beq.n	800cf3c <floor+0x8c>
 800cf06:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800cf88 <floor+0xd8>
 800cf0a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cf0e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cf12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf16:	ddeb      	ble.n	800cef0 <floor+0x40>
 800cf18:	2900      	cmp	r1, #0
 800cf1a:	bfbe      	ittt	lt
 800cf1c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800cf20:	fa40 f303 	asrlt.w	r3, r0, r3
 800cf24:	18c9      	addlt	r1, r1, r3
 800cf26:	ea21 0102 	bic.w	r1, r1, r2
 800cf2a:	2000      	movs	r0, #0
 800cf2c:	e7e0      	b.n	800cef0 <floor+0x40>
 800cf2e:	2b33      	cmp	r3, #51	; 0x33
 800cf30:	dd05      	ble.n	800cf3e <floor+0x8e>
 800cf32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf36:	d101      	bne.n	800cf3c <floor+0x8c>
 800cf38:	ee30 0b00 	vadd.f64	d0, d0, d0
 800cf3c:	bd30      	pop	{r4, r5, pc}
 800cf3e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800cf42:	f04f 32ff 	mov.w	r2, #4294967295
 800cf46:	40e2      	lsrs	r2, r4
 800cf48:	4202      	tst	r2, r0
 800cf4a:	d0f7      	beq.n	800cf3c <floor+0x8c>
 800cf4c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800cf88 <floor+0xd8>
 800cf50:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cf54:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800cf58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5c:	ddc8      	ble.n	800cef0 <floor+0x40>
 800cf5e:	2900      	cmp	r1, #0
 800cf60:	da02      	bge.n	800cf68 <floor+0xb8>
 800cf62:	2b14      	cmp	r3, #20
 800cf64:	d103      	bne.n	800cf6e <floor+0xbe>
 800cf66:	3101      	adds	r1, #1
 800cf68:	ea20 0002 	bic.w	r0, r0, r2
 800cf6c:	e7c0      	b.n	800cef0 <floor+0x40>
 800cf6e:	2401      	movs	r4, #1
 800cf70:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cf74:	fa04 f303 	lsl.w	r3, r4, r3
 800cf78:	4418      	add	r0, r3
 800cf7a:	42a8      	cmp	r0, r5
 800cf7c:	bf38      	it	cc
 800cf7e:	1909      	addcc	r1, r1, r4
 800cf80:	e7f2      	b.n	800cf68 <floor+0xb8>
 800cf82:	2000      	movs	r0, #0
 800cf84:	4601      	mov	r1, r0
 800cf86:	e7b3      	b.n	800cef0 <floor+0x40>
 800cf88:	8800759c 	.word	0x8800759c
 800cf8c:	7e37e43c 	.word	0x7e37e43c
 800cf90:	bff00000 	.word	0xbff00000
 800cf94:	000fffff 	.word	0x000fffff

0800cf98 <nan>:
 800cf98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cfa0 <nan+0x8>
 800cf9c:	4770      	bx	lr
 800cf9e:	bf00      	nop
 800cfa0:	00000000 	.word	0x00000000
 800cfa4:	7ff80000 	.word	0x7ff80000

0800cfa8 <scalbn>:
 800cfa8:	b082      	sub	sp, #8
 800cfaa:	ed8d 0b00 	vstr	d0, [sp]
 800cfae:	9b01      	ldr	r3, [sp, #4]
 800cfb0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cfb4:	b9a2      	cbnz	r2, 800cfe0 <scalbn+0x38>
 800cfb6:	9a00      	ldr	r2, [sp, #0]
 800cfb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	d03a      	beq.n	800d036 <scalbn+0x8e>
 800cfc0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800d098 <scalbn+0xf0>
 800cfc4:	4b40      	ldr	r3, [pc, #256]	; (800d0c8 <scalbn+0x120>)
 800cfc6:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cfca:	4298      	cmp	r0, r3
 800cfcc:	ed8d 7b00 	vstr	d7, [sp]
 800cfd0:	da11      	bge.n	800cff6 <scalbn+0x4e>
 800cfd2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800d0a0 <scalbn+0xf8>
 800cfd6:	ed9d 6b00 	vldr	d6, [sp]
 800cfda:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cfde:	e007      	b.n	800cff0 <scalbn+0x48>
 800cfe0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cfe4:	428a      	cmp	r2, r1
 800cfe6:	d10a      	bne.n	800cffe <scalbn+0x56>
 800cfe8:	ed9d 7b00 	vldr	d7, [sp]
 800cfec:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cff0:	ed8d 7b00 	vstr	d7, [sp]
 800cff4:	e01f      	b.n	800d036 <scalbn+0x8e>
 800cff6:	9b01      	ldr	r3, [sp, #4]
 800cff8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cffc:	3a36      	subs	r2, #54	; 0x36
 800cffe:	4402      	add	r2, r0
 800d000:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d004:	428a      	cmp	r2, r1
 800d006:	dd0a      	ble.n	800d01e <scalbn+0x76>
 800d008:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800d0a8 <scalbn+0x100>
 800d00c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800d0b0 <scalbn+0x108>
 800d010:	eeb0 6b47 	vmov.f64	d6, d7
 800d014:	9b01      	ldr	r3, [sp, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	fe27 7b05 	vselge.f64	d7, d7, d5
 800d01c:	e7dd      	b.n	800cfda <scalbn+0x32>
 800d01e:	2a00      	cmp	r2, #0
 800d020:	dd0d      	ble.n	800d03e <scalbn+0x96>
 800d022:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d026:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d02a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d02e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d032:	e9cd 0100 	strd	r0, r1, [sp]
 800d036:	ed9d 0b00 	vldr	d0, [sp]
 800d03a:	b002      	add	sp, #8
 800d03c:	4770      	bx	lr
 800d03e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d042:	da18      	bge.n	800d076 <scalbn+0xce>
 800d044:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d048:	4298      	cmp	r0, r3
 800d04a:	9b01      	ldr	r3, [sp, #4]
 800d04c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d050:	dd09      	ble.n	800d066 <scalbn+0xbe>
 800d052:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800d0a8 <scalbn+0x100>
 800d056:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800d0b0 <scalbn+0x108>
 800d05a:	eeb0 6b47 	vmov.f64	d6, d7
 800d05e:	2b00      	cmp	r3, #0
 800d060:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800d064:	e7b9      	b.n	800cfda <scalbn+0x32>
 800d066:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800d0a0 <scalbn+0xf8>
 800d06a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800d0b8 <scalbn+0x110>
 800d06e:	eeb0 6b47 	vmov.f64	d6, d7
 800d072:	2b00      	cmp	r3, #0
 800d074:	e7f4      	b.n	800d060 <scalbn+0xb8>
 800d076:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d07a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d07e:	3236      	adds	r2, #54	; 0x36
 800d080:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d084:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d088:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800d0c0 <scalbn+0x118>
 800d08c:	ec41 0b17 	vmov	d7, r0, r1
 800d090:	e7a3      	b.n	800cfda <scalbn+0x32>
 800d092:	bf00      	nop
 800d094:	f3af 8000 	nop.w
 800d098:	00000000 	.word	0x00000000
 800d09c:	43500000 	.word	0x43500000
 800d0a0:	c2f8f359 	.word	0xc2f8f359
 800d0a4:	01a56e1f 	.word	0x01a56e1f
 800d0a8:	8800759c 	.word	0x8800759c
 800d0ac:	7e37e43c 	.word	0x7e37e43c
 800d0b0:	8800759c 	.word	0x8800759c
 800d0b4:	fe37e43c 	.word	0xfe37e43c
 800d0b8:	c2f8f359 	.word	0xc2f8f359
 800d0bc:	81a56e1f 	.word	0x81a56e1f
 800d0c0:	00000000 	.word	0x00000000
 800d0c4:	3c900000 	.word	0x3c900000
 800d0c8:	ffff3cb0 	.word	0xffff3cb0

0800d0cc <fabsf>:
 800d0cc:	ee10 3a10 	vmov	r3, s0
 800d0d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0d4:	ee00 3a10 	vmov	s0, r3
 800d0d8:	4770      	bx	lr
	...

0800d0dc <nanf>:
 800d0dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d0e4 <nanf+0x8>
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	7fc00000 	.word	0x7fc00000

0800d0e8 <_init>:
 800d0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ea:	bf00      	nop
 800d0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ee:	bc08      	pop	{r3}
 800d0f0:	469e      	mov	lr, r3
 800d0f2:	4770      	bx	lr

0800d0f4 <_fini>:
 800d0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f6:	bf00      	nop
 800d0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0fa:	bc08      	pop	{r3}
 800d0fc:	469e      	mov	lr, r3
 800d0fe:	4770      	bx	lr
